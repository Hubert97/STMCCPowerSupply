
STMCCPowerSupply.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd0  08004bd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004bd0  08004bd0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bd0  08004bd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bd0  08004bd0  00014bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bd4  08004bd4  00014bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000000c  08004be4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08004be4  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111ad  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fd  00000000  00000000  000311e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  000338e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00034a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017543  00000000  00000000  00035a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bb6  00000000  00000000  0004cf4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096fa8  00000000  00000000  00060b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7aa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e3c  00000000  00000000  000f7afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004b78 	.word	0x08004b78

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004b78 	.word	0x08004b78

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <HAL_TIM_PeriodElapsedCallback>:
static void MX_DMA_Init(void);
static void MX_CRC_Init(void);
static void MX_TIM16_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16){ // Je≈ºeli przerwanie pochodzi od timera 16
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0d      	ldr	r2, [pc, #52]	; (8000260 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d113      	bne.n	8000256 <HAL_TIM_PeriodElapsedCallback+0x3a>

		 static int i =0;
		 i++;
 800022e:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	1c5a      	adds	r2, r3, #1
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000236:	601a      	str	r2, [r3, #0]
		 if (i>100)
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2b64      	cmp	r3, #100	; 0x64
 800023e:	dd0a      	ble.n	8000256 <HAL_TIM_PeriodElapsedCallback+0x3a>
		 {
			 HAL_GPIO_TogglePin(ACTION_LED_GPIO_Port, ACTION_LED_Pin);
 8000240:	2380      	movs	r3, #128	; 0x80
 8000242:	019a      	lsls	r2, r3, #6
 8000244:	23a0      	movs	r3, #160	; 0xa0
 8000246:	05db      	lsls	r3, r3, #23
 8000248:	0011      	movs	r1, r2
 800024a:	0018      	movs	r0, r3
 800024c:	f001 feff 	bl	800204e <HAL_GPIO_TogglePin>
			i = 0;
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
		 }

	}
}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	46bd      	mov	sp, r7
 800025a:	b002      	add	sp, #8
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	40014400 	.word	0x40014400
 8000264:	200001d4 	.word	0x200001d4

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026c:	f000 fc82 	bl	8000b74 <HAL_Init>

  /* USER CODE BEGIN Init */

	aRxBuffer[0]=0x00;
 8000270:	4b24      	ldr	r3, [pc, #144]	; (8000304 <main+0x9c>)
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
	aRxBuffer[1]=0x00;
 8000276:	4b23      	ldr	r3, [pc, #140]	; (8000304 <main+0x9c>)
 8000278:	2200      	movs	r2, #0
 800027a:	705a      	strb	r2, [r3, #1]
	aRxBuffer[2]=0x00;
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <main+0x9c>)
 800027e:	2200      	movs	r2, #0
 8000280:	709a      	strb	r2, [r3, #2]
	aRxBuffer[3]=0x00;
 8000282:	4b20      	ldr	r3, [pc, #128]	; (8000304 <main+0x9c>)
 8000284:	2200      	movs	r2, #0
 8000286:	70da      	strb	r2, [r3, #3]
	aTxBuffer[0]=0xAA;
 8000288:	4b1f      	ldr	r3, [pc, #124]	; (8000308 <main+0xa0>)
 800028a:	22aa      	movs	r2, #170	; 0xaa
 800028c:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1]=0xBB;
 800028e:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <main+0xa0>)
 8000290:	22bb      	movs	r2, #187	; 0xbb
 8000292:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2]=0xCC;
 8000294:	4b1c      	ldr	r3, [pc, #112]	; (8000308 <main+0xa0>)
 8000296:	22cc      	movs	r2, #204	; 0xcc
 8000298:	709a      	strb	r2, [r3, #2]
	aTxBuffer[3]=0xDD;
 800029a:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <main+0xa0>)
 800029c:	22dd      	movs	r2, #221	; 0xdd
 800029e:	70da      	strb	r2, [r3, #3]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f83a 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f000 f9aa 	bl	80005fc <MX_GPIO_Init>
  MX_ADC1_Init();
 80002a8:	f000 f894 	bl	80003d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80002ac:	f000 f91e 	bl	80004ec <MX_I2C1_Init>
  MX_DMA_Init();
 80002b0:	f000 f986 	bl	80005c0 <MX_DMA_Init>
  MX_CRC_Init();
 80002b4:	f000 f8f6 	bl	80004a4 <MX_CRC_Init>
  MX_TIM16_Init();
 80002b8:	f000 f95a 	bl	8000570 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim16);
 80002bc:	4b13      	ldr	r3, [pc, #76]	; (800030c <main+0xa4>)
 80002be:	0018      	movs	r0, r3
 80002c0:	f004 f9a2 	bl	8004608 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <main+0xa4>)
 80002c6:	0018      	movs	r0, r3
 80002c8:	f004 f9f6 	bl	80046b8 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start(&htim3);
 // HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);

  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <main+0xa8>)
 80002ce:	0018      	movs	r0, r3
 80002d0:	f002 f8d0 	bl	8002474 <HAL_I2C_EnableListen_IT>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <main+0x74>
  {
    /* Transfer error in reception process */
    Error_Handler();
 80002d8:	f000 fa6b 	bl	80007b2 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (Xfer_Complete ==1)
 80002dc:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <main+0xac>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d1fb      	bne.n	80002dc <main+0x74>
		  {
		  // ##- Put I2C peripheral in listen mode process ###########################
		  HAL_Delay(1);
 80002e4:	2001      	movs	r0, #1
 80002e6:	f000 fccb 	bl	8000c80 <HAL_Delay>
		   if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <main+0xa8>)
 80002ec:	0018      	movs	r0, r3
 80002ee:	f002 f8c1 	bl	8002474 <HAL_I2C_EnableListen_IT>
 80002f2:	1e03      	subs	r3, r0, #0
 80002f4:	d001      	beq.n	80002fa <main+0x92>
		   {
			 Error_Handler();
 80002f6:	f000 fa5c 	bl	80007b2 <Error_Handler>
		   }
		 Xfer_Complete =0;
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <main+0xac>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
	  if (Xfer_Complete ==1)
 8000300:	e7ec      	b.n	80002dc <main+0x74>
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	20000034 	.word	0x20000034
 8000308:	20000030 	.word	0x20000030
 800030c:	20000188 	.word	0x20000188
 8000310:	2000013c 	.word	0x2000013c
 8000314:	2000002c 	.word	0x2000002c

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b590      	push	{r4, r7, lr}
 800031a:	b093      	sub	sp, #76	; 0x4c
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	2410      	movs	r4, #16
 8000320:	193b      	adds	r3, r7, r4
 8000322:	0018      	movs	r0, r3
 8000324:	2338      	movs	r3, #56	; 0x38
 8000326:	001a      	movs	r2, r3
 8000328:	2100      	movs	r1, #0
 800032a:	f004 fc1d 	bl	8004b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032e:	003b      	movs	r3, r7
 8000330:	0018      	movs	r0, r3
 8000332:	2310      	movs	r3, #16
 8000334:	001a      	movs	r2, r3
 8000336:	2100      	movs	r1, #0
 8000338:	f004 fc16 	bl	8004b68 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800033c:	2380      	movs	r3, #128	; 0x80
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	0018      	movs	r0, r3
 8000342:	f003 fb03 	bl	800394c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000346:	193b      	adds	r3, r7, r4
 8000348:	2202      	movs	r2, #2
 800034a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034c:	193b      	adds	r3, r7, r4
 800034e:	2280      	movs	r2, #128	; 0x80
 8000350:	0052      	lsls	r2, r2, #1
 8000352:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000354:	0021      	movs	r1, r4
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2200      	movs	r2, #0
 800035a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2240      	movs	r2, #64	; 0x40
 8000360:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2202      	movs	r2, #2
 8000366:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2202      	movs	r2, #2
 800036c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2200      	movs	r2, #0
 8000372:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2208      	movs	r2, #8
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2280      	movs	r2, #128	; 0x80
 800037e:	0292      	lsls	r2, r2, #10
 8000380:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2280      	movs	r2, #128	; 0x80
 8000386:	0492      	lsls	r2, r2, #18
 8000388:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800038a:	187b      	adds	r3, r7, r1
 800038c:	2280      	movs	r2, #128	; 0x80
 800038e:	0592      	lsls	r2, r2, #22
 8000390:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000392:	187b      	adds	r3, r7, r1
 8000394:	0018      	movs	r0, r3
 8000396:	f003 fb19 	bl	80039cc <HAL_RCC_OscConfig>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800039e:	f000 fa08 	bl	80007b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a2:	003b      	movs	r3, r7
 80003a4:	2207      	movs	r2, #7
 80003a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a8:	003b      	movs	r3, r7
 80003aa:	2202      	movs	r2, #2
 80003ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	003b      	movs	r3, r7
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b4:	003b      	movs	r3, r7
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ba:	003b      	movs	r3, r7
 80003bc:	2102      	movs	r1, #2
 80003be:	0018      	movs	r0, r3
 80003c0:	f003 fe1e 	bl	8004000 <HAL_RCC_ClockConfig>
 80003c4:	1e03      	subs	r3, r0, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003c8:	f000 f9f3 	bl	80007b2 <Error_Handler>
  }
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	b013      	add	sp, #76	; 0x4c
 80003d2:	bd90      	pop	{r4, r7, pc}

080003d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	0018      	movs	r0, r3
 80003de:	230c      	movs	r3, #12
 80003e0:	001a      	movs	r2, r3
 80003e2:	2100      	movs	r1, #0
 80003e4:	f004 fbc0 	bl	8004b68 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80003e8:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <MX_ADC1_Init+0xc4>)
 80003ea:	4a2c      	ldr	r2, [pc, #176]	; (800049c <MX_ADC1_Init+0xc8>)
 80003ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003ee:	4b2a      	ldr	r3, [pc, #168]	; (8000498 <MX_ADC1_Init+0xc4>)
 80003f0:	2280      	movs	r2, #128	; 0x80
 80003f2:	05d2      	lsls	r2, r2, #23
 80003f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003f6:	4b28      	ldr	r3, [pc, #160]	; (8000498 <MX_ADC1_Init+0xc4>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003fc:	4b26      	ldr	r3, [pc, #152]	; (8000498 <MX_ADC1_Init+0xc4>)
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000402:	4b25      	ldr	r3, [pc, #148]	; (8000498 <MX_ADC1_Init+0xc4>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000408:	4b23      	ldr	r3, [pc, #140]	; (8000498 <MX_ADC1_Init+0xc4>)
 800040a:	2204      	movs	r2, #4
 800040c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800040e:	4b22      	ldr	r3, [pc, #136]	; (8000498 <MX_ADC1_Init+0xc4>)
 8000410:	2200      	movs	r2, #0
 8000412:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000414:	4b20      	ldr	r3, [pc, #128]	; (8000498 <MX_ADC1_Init+0xc4>)
 8000416:	2200      	movs	r2, #0
 8000418:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800041a:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <MX_ADC1_Init+0xc4>)
 800041c:	2201      	movs	r2, #1
 800041e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000420:	4b1d      	ldr	r3, [pc, #116]	; (8000498 <MX_ADC1_Init+0xc4>)
 8000422:	2201      	movs	r2, #1
 8000424:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <MX_ADC1_Init+0xc4>)
 8000428:	2200      	movs	r2, #0
 800042a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800042c:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <MX_ADC1_Init+0xc4>)
 800042e:	2200      	movs	r2, #0
 8000430:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000432:	4b19      	ldr	r3, [pc, #100]	; (8000498 <MX_ADC1_Init+0xc4>)
 8000434:	222c      	movs	r2, #44	; 0x2c
 8000436:	2100      	movs	r1, #0
 8000438:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800043a:	4b17      	ldr	r3, [pc, #92]	; (8000498 <MX_ADC1_Init+0xc4>)
 800043c:	2200      	movs	r2, #0
 800043e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8000440:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MX_ADC1_Init+0xc4>)
 8000442:	2206      	movs	r2, #6
 8000444:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8000446:	4b14      	ldr	r3, [pc, #80]	; (8000498 <MX_ADC1_Init+0xc4>)
 8000448:	2206      	movs	r2, #6
 800044a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_ADC1_Init+0xc4>)
 800044e:	223c      	movs	r2, #60	; 0x3c
 8000450:	2100      	movs	r1, #0
 8000452:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000454:	4b10      	ldr	r3, [pc, #64]	; (8000498 <MX_ADC1_Init+0xc4>)
 8000456:	2200      	movs	r2, #0
 8000458:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_ADC1_Init+0xc4>)
 800045c:	0018      	movs	r0, r3
 800045e:	f000 fd41 	bl	8000ee4 <HAL_ADC_Init>
 8000462:	1e03      	subs	r3, r0, #0
 8000464:	d001      	beq.n	800046a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000466:	f000 f9a4 	bl	80007b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4a0c      	ldr	r2, [pc, #48]	; (80004a0 <MX_ADC1_Init+0xcc>)
 800046e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800047c:	1d3a      	adds	r2, r7, #4
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_ADC1_Init+0xc4>)
 8000480:	0011      	movs	r1, r2
 8000482:	0018      	movs	r0, r3
 8000484:	f000 fed6 	bl	8001234 <HAL_ADC_ConfigChannel>
 8000488:	1e03      	subs	r3, r0, #0
 800048a:	d001      	beq.n	8000490 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 800048c:	f000 f991 	bl	80007b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	b004      	add	sp, #16
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000058 	.word	0x20000058
 800049c:	40012400 	.word	0x40012400
 80004a0:	b0001000 	.word	0xb0001000

080004a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <MX_CRC_Init+0x40>)
 80004aa:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <MX_CRC_Init+0x44>)
 80004ac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <MX_CRC_Init+0x40>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80004b4:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <MX_CRC_Init+0x40>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <MX_CRC_Init+0x40>)
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <MX_CRC_Init+0x40>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80004c6:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <MX_CRC_Init+0x40>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <MX_CRC_Init+0x40>)
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 f966 	bl	80017a0 <HAL_CRC_Init>
 80004d4:	1e03      	subs	r3, r0, #0
 80004d6:	d001      	beq.n	80004dc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80004d8:	f000 f96b 	bl	80007b2 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	20000118 	.word	0x20000118
 80004e8:	40023000 	.word	0x40023000

080004ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004f0:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <MX_I2C1_Init+0x78>)
 80004f2:	4a1d      	ldr	r2, [pc, #116]	; (8000568 <MX_I2C1_Init+0x7c>)
 80004f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80004f6:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_I2C1_Init+0x78>)
 80004f8:	4a1c      	ldr	r2, [pc, #112]	; (800056c <MX_I2C1_Init+0x80>)
 80004fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 64;
 80004fc:	4b19      	ldr	r3, [pc, #100]	; (8000564 <MX_I2C1_Init+0x78>)
 80004fe:	2240      	movs	r2, #64	; 0x40
 8000500:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MX_I2C1_Init+0x78>)
 8000504:	2201      	movs	r2, #1
 8000506:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <MX_I2C1_Init+0x78>)
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_I2C1_Init+0x78>)
 8000510:	2200      	movs	r2, #0
 8000512:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <MX_I2C1_Init+0x78>)
 8000516:	2200      	movs	r2, #0
 8000518:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_I2C1_Init+0x78>)
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	0312      	lsls	r2, r2, #12
 8000520:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <MX_I2C1_Init+0x78>)
 8000524:	2200      	movs	r2, #0
 8000526:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000528:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_I2C1_Init+0x78>)
 800052a:	0018      	movs	r0, r3
 800052c:	f001 fdaa 	bl	8002084 <HAL_I2C_Init>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000534:	f000 f93d 	bl	80007b2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <MX_I2C1_Init+0x78>)
 800053a:	2100      	movs	r1, #0
 800053c:	0018      	movs	r0, r3
 800053e:	f003 f96d 	bl	800381c <HAL_I2CEx_ConfigAnalogFilter>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000546:	f000 f934 	bl	80007b2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_I2C1_Init+0x78>)
 800054c:	2100      	movs	r1, #0
 800054e:	0018      	movs	r0, r3
 8000550:	f003 f9b0 	bl	80038b4 <HAL_I2CEx_ConfigDigitalFilter>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d001      	beq.n	800055c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000558:	f000 f92b 	bl	80007b2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	2000013c 	.word	0x2000013c
 8000568:	40005400 	.word	0x40005400
 800056c:	10707dbc 	.word	0x10707dbc

08000570 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <MX_TIM16_Init+0x44>)
 8000576:	4a10      	ldr	r2, [pc, #64]	; (80005b8 <MX_TIM16_Init+0x48>)
 8000578:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9;
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_TIM16_Init+0x44>)
 800057c:	2209      	movs	r2, #9
 800057e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <MX_TIM16_Init+0x44>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 6399;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <MX_TIM16_Init+0x44>)
 8000588:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <MX_TIM16_Init+0x4c>)
 800058a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_TIM16_Init+0x44>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <MX_TIM16_Init+0x44>)
 8000594:	2200      	movs	r2, #0
 8000596:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <MX_TIM16_Init+0x44>)
 800059a:	2200      	movs	r2, #0
 800059c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <MX_TIM16_Init+0x44>)
 80005a0:	0018      	movs	r0, r3
 80005a2:	f004 f831 	bl	8004608 <HAL_TIM_Base_Init>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80005aa:	f000 f902 	bl	80007b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000188 	.word	0x20000188
 80005b8:	40014400 	.word	0x40014400
 80005bc:	000018ff 	.word	0x000018ff

080005c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <MX_DMA_Init+0x38>)
 80005c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <MX_DMA_Init+0x38>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	430a      	orrs	r2, r1
 80005d0:	639a      	str	r2, [r3, #56]	; 0x38
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <MX_DMA_Init+0x38>)
 80005d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005d6:	2201      	movs	r2, #1
 80005d8:	4013      	ands	r3, r2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2009      	movs	r0, #9
 80005e4:	f001 f8aa 	bl	800173c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005e8:	2009      	movs	r0, #9
 80005ea:	f001 f8bc 	bl	8001766 <HAL_NVIC_EnableIRQ>

}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b002      	add	sp, #8
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	40021000 	.word	0x40021000

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b089      	sub	sp, #36	; 0x24
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	240c      	movs	r4, #12
 8000604:	193b      	adds	r3, r7, r4
 8000606:	0018      	movs	r0, r3
 8000608:	2314      	movs	r3, #20
 800060a:	001a      	movs	r2, r3
 800060c:	2100      	movs	r1, #0
 800060e:	f004 faab 	bl	8004b68 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_GPIO_Init+0x88>)
 8000614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_GPIO_Init+0x88>)
 8000618:	2102      	movs	r1, #2
 800061a:	430a      	orrs	r2, r1
 800061c:	635a      	str	r2, [r3, #52]	; 0x34
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_GPIO_Init+0x88>)
 8000620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000622:	2202      	movs	r2, #2
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_GPIO_Init+0x88>)
 800062c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_GPIO_Init+0x88>)
 8000630:	2101      	movs	r1, #1
 8000632:	430a      	orrs	r2, r1
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_GPIO_Init+0x88>)
 8000638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800063a:	2201      	movs	r2, #1
 800063c:	4013      	ands	r3, r2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACTION_LED_GPIO_Port, ACTION_LED_Pin, GPIO_PIN_RESET);
 8000642:	2380      	movs	r3, #128	; 0x80
 8000644:	0199      	lsls	r1, r3, #6
 8000646:	23a0      	movs	r3, #160	; 0xa0
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	2200      	movs	r2, #0
 800064c:	0018      	movs	r0, r3
 800064e:	f001 fce1 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACTION_LED_Pin */
  GPIO_InitStruct.Pin = ACTION_LED_Pin;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	2280      	movs	r2, #128	; 0x80
 8000656:	0192      	lsls	r2, r2, #6
 8000658:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2201      	movs	r2, #1
 800065e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	193b      	adds	r3, r7, r4
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	193b      	adds	r3, r7, r4
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACTION_LED_GPIO_Port, &GPIO_InitStruct);
 800066c:	193a      	adds	r2, r7, r4
 800066e:	23a0      	movs	r3, #160	; 0xa0
 8000670:	05db      	lsls	r3, r3, #23
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f001 fb69 	bl	8001d4c <HAL_GPIO_Init>

}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b009      	add	sp, #36	; 0x24
 8000680:	bd90      	pop	{r4, r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in transmission process is correct */

  //tidy up
  aRxBuffer[0]=0x00;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_I2C_SlaveTxCpltCallback+0x24>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
  aRxBuffer[1]=0x00;
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <HAL_I2C_SlaveTxCpltCallback+0x24>)
 8000698:	2200      	movs	r2, #0
 800069a:	705a      	strb	r2, [r3, #1]
  Xfer_Complete = 1;
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 800069e:	2201      	movs	r2, #1
 80006a0:	601a      	str	r2, [r3, #0]
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b002      	add	sp, #8
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	20000034 	.word	0x20000034
 80006b0:	2000002c 	.word	0x2000002c

080006b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in reception process is correct */



  if(aRxBuffer[0] < shMemSize)
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b1f      	cmp	r3, #31
 80006c2:	d806      	bhi.n	80006d2 <HAL_I2C_SlaveRxCpltCallback+0x1e>
	  sharedMemory[aRxBuffer[0]] = aRxBuffer[1];
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	001a      	movs	r2, r3
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80006cc:	7859      	ldrb	r1, [r3, #1]
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 80006d0:	5499      	strb	r1, [r3, r2]

  //tidy up
  aRxBuffer[0]=0x00;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
  aRxBuffer[1]=0x00;
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80006da:	2200      	movs	r2, #0
 80006dc:	705a      	strb	r2, [r3, #1]
  Xfer_Complete = 1;
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	601a      	str	r2, [r3, #0]
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b002      	add	sp, #8
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000034 	.word	0x20000034
 80006f0:	20000038 	.word	0x20000038
 80006f4:	2000002c 	.word	0x2000002c

080006f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	0008      	movs	r0, r1
 8000702:	0011      	movs	r1, r2
 8000704:	1cfb      	adds	r3, r7, #3
 8000706:	1c02      	adds	r2, r0, #0
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	003b      	movs	r3, r7
 800070c:	1c0a      	adds	r2, r1, #0
 800070e:	801a      	strh	r2, [r3, #0]
  Transfer_Direction = TransferDirection;
 8000710:	1cfb      	adds	r3, r7, #3
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_I2C_AddrCallback+0x74>)
 8000716:	601a      	str	r2, [r3, #0]

  if (Transfer_Direction != 0)
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <HAL_I2C_AddrCallback+0x74>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d016      	beq.n	800074e <HAL_I2C_AddrCallback+0x56>
  {
     /*##- Start the transmission process #####################################*/
  /* While the I2C in reception process, user can transmit data through
     "aTxBuffer" buffer */
	  if(aRxBuffer[0] < shMemSize)
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <HAL_I2C_AddrCallback+0x78>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b1f      	cmp	r3, #31
 8000726:	d806      	bhi.n	8000736 <HAL_I2C_AddrCallback+0x3e>
		  aTxBuffer[0] = sharedMemory[aRxBuffer[0]];
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_I2C_AddrCallback+0x78>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	001a      	movs	r2, r3
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <HAL_I2C_AddrCallback+0x7c>)
 8000730:	5c9a      	ldrb	r2, [r3, r2]
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <HAL_I2C_AddrCallback+0x80>)
 8000734:	701a      	strb	r2, [r3, #0]

	  if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)aTxBuffer, 1, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8000736:	2380      	movs	r3, #128	; 0x80
 8000738:	049b      	lsls	r3, r3, #18
 800073a:	490f      	ldr	r1, [pc, #60]	; (8000778 <HAL_I2C_AddrCallback+0x80>)
 800073c:	480f      	ldr	r0, [pc, #60]	; (800077c <HAL_I2C_AddrCallback+0x84>)
 800073e:	2201      	movs	r2, #1
 8000740:	f001 fd36 	bl	80021b0 <HAL_I2C_Slave_Seq_Transmit_IT>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d00d      	beq.n	8000764 <HAL_I2C_AddrCallback+0x6c>

    {
    /* Transfer error in transmission process */
    Error_Handler();
 8000748:	f000 f833 	bl	80007b2 <Error_Handler>
    Error_Handler();
  }

  }

}
 800074c:	e00a      	b.n	8000764 <HAL_I2C_AddrCallback+0x6c>
  if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)aRxBuffer, 2, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	049b      	lsls	r3, r3, #18
 8000752:	4907      	ldr	r1, [pc, #28]	; (8000770 <HAL_I2C_AddrCallback+0x78>)
 8000754:	4809      	ldr	r0, [pc, #36]	; (800077c <HAL_I2C_AddrCallback+0x84>)
 8000756:	2202      	movs	r2, #2
 8000758:	f001 fdda 	bl	8002310 <HAL_I2C_Slave_Seq_Receive_IT>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <HAL_I2C_AddrCallback+0x6c>
    Error_Handler();
 8000760:	f000 f827 	bl	80007b2 <Error_Handler>
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b002      	add	sp, #8
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000028 	.word	0x20000028
 8000770:	20000034 	.word	0x20000034
 8000774:	20000038 	.word	0x20000038
 8000778:	20000030 	.word	0x20000030
 800077c:	2000013c 	.word	0x2000013c

08000780 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b002      	add	sp, #8
 800078e:	bd80      	pop	{r7, pc}

08000790 <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	0018      	movs	r0, r3
 800079c:	f001 ff30 	bl	8002600 <HAL_I2C_GetError>
 80007a0:	0003      	movs	r3, r0
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d001      	beq.n	80007aa <HAL_I2C_ErrorCallback+0x1a>
  {
    Error_Handler();
 80007a6:	f000 f804 	bl	80007b2 <Error_Handler>
  }
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b002      	add	sp, #8
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b6:	b672      	cpsid	i
}
 80007b8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ba:	e7fe      	b.n	80007ba <Error_Handler+0x8>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_MspInit+0x48>)
 80007c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <HAL_MspInit+0x48>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	641a      	str	r2, [r3, #64]	; 0x40
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_MspInit+0x48>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	2201      	movs	r2, #1
 80007d4:	4013      	ands	r3, r2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_MspInit+0x48>)
 80007dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_MspInit+0x48>)
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	0549      	lsls	r1, r1, #21
 80007e4:	430a      	orrs	r2, r1
 80007e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x48>)
 80007ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	055b      	lsls	r3, r3, #21
 80007f0:	4013      	ands	r3, r2
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 80007f6:	2010      	movs	r0, #16
 80007f8:	f000 fa66 	bl	8000cc8 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b002      	add	sp, #8
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b08f      	sub	sp, #60	; 0x3c
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000810:	2410      	movs	r4, #16
 8000812:	193b      	adds	r3, r7, r4
 8000814:	0018      	movs	r0, r3
 8000816:	2328      	movs	r3, #40	; 0x28
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f004 f9a4 	bl	8004b68 <memset>
  if(hadc->Instance==ADC1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a27      	ldr	r2, [pc, #156]	; (80008c4 <HAL_ADC_MspInit+0xbc>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d147      	bne.n	80008ba <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800082a:	193b      	adds	r3, r7, r4
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	01d2      	lsls	r2, r2, #7
 8000830:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000838:	193b      	adds	r3, r7, r4
 800083a:	0018      	movs	r0, r3
 800083c:	f003 fd6a 	bl	8004314 <HAL_RCCEx_PeriphCLKConfig>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8000844:	f7ff ffb5 	bl	80007b2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <HAL_ADC_MspInit+0xc0>)
 800084a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <HAL_ADC_MspInit+0xc0>)
 800084e:	2180      	movs	r1, #128	; 0x80
 8000850:	0349      	lsls	r1, r1, #13
 8000852:	430a      	orrs	r2, r1
 8000854:	641a      	str	r2, [r3, #64]	; 0x40
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <HAL_ADC_MspInit+0xc0>)
 8000858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	035b      	lsls	r3, r3, #13
 800085e:	4013      	ands	r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <HAL_ADC_MspInit+0xc4>)
 8000866:	4a1a      	ldr	r2, [pc, #104]	; (80008d0 <HAL_ADC_MspInit+0xc8>)
 8000868:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <HAL_ADC_MspInit+0xc4>)
 800086c:	2205      	movs	r2, #5
 800086e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <HAL_ADC_MspInit+0xc4>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <HAL_ADC_MspInit+0xc4>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <HAL_ADC_MspInit+0xc4>)
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_ADC_MspInit+0xc4>)
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	0052      	lsls	r2, r2, #1
 8000888:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <HAL_ADC_MspInit+0xc4>)
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	00d2      	lsls	r2, r2, #3
 8000890:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_ADC_MspInit+0xc4>)
 8000894:	2220      	movs	r2, #32
 8000896:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_ADC_MspInit+0xc4>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <HAL_ADC_MspInit+0xc4>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f001 f851 	bl	8001948 <HAL_DMA_Init>
 80008a6:	1e03      	subs	r3, r0, #0
 80008a8:	d001      	beq.n	80008ae <HAL_ADC_MspInit+0xa6>
    {
      Error_Handler();
 80008aa:	f7ff ff82 	bl	80007b2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a06      	ldr	r2, [pc, #24]	; (80008cc <HAL_ADC_MspInit+0xc4>)
 80008b2:	651a      	str	r2, [r3, #80]	; 0x50
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_ADC_MspInit+0xc4>)
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b00f      	add	sp, #60	; 0x3c
 80008c0:	bd90      	pop	{r4, r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	40012400 	.word	0x40012400
 80008c8:	40021000 	.word	0x40021000
 80008cc:	200000bc 	.word	0x200000bc
 80008d0:	40020008 	.word	0x40020008

080008d4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0a      	ldr	r2, [pc, #40]	; (800090c <HAL_CRC_MspInit+0x38>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d10d      	bne.n	8000902 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <HAL_CRC_MspInit+0x3c>)
 80008e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_CRC_MspInit+0x3c>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0149      	lsls	r1, r1, #5
 80008f0:	430a      	orrs	r2, r1
 80008f2:	639a      	str	r2, [r3, #56]	; 0x38
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_CRC_MspInit+0x3c>)
 80008f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	015b      	lsls	r3, r3, #5
 80008fc:	4013      	ands	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b004      	add	sp, #16
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	40023000 	.word	0x40023000
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b095      	sub	sp, #84	; 0x54
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	233c      	movs	r3, #60	; 0x3c
 800091e:	18fb      	adds	r3, r7, r3
 8000920:	0018      	movs	r0, r3
 8000922:	2314      	movs	r3, #20
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	f004 f91e 	bl	8004b68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800092c:	2414      	movs	r4, #20
 800092e:	193b      	adds	r3, r7, r4
 8000930:	0018      	movs	r0, r3
 8000932:	2328      	movs	r3, #40	; 0x28
 8000934:	001a      	movs	r2, r3
 8000936:	2100      	movs	r1, #0
 8000938:	f004 f916 	bl	8004b68 <memset>
  if(hi2c->Instance==I2C1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a39      	ldr	r2, [pc, #228]	; (8000a28 <HAL_I2C_MspInit+0x114>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d16b      	bne.n	8000a1e <HAL_I2C_MspInit+0x10a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2220      	movs	r2, #32
 800094a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000952:	193b      	adds	r3, r7, r4
 8000954:	0018      	movs	r0, r3
 8000956:	f003 fcdd 	bl	8004314 <HAL_RCCEx_PeriphCLKConfig>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800095e:	f7ff ff28 	bl	80007b2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b32      	ldr	r3, [pc, #200]	; (8000a2c <HAL_I2C_MspInit+0x118>)
 8000964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000966:	4b31      	ldr	r3, [pc, #196]	; (8000a2c <HAL_I2C_MspInit+0x118>)
 8000968:	2102      	movs	r1, #2
 800096a:	430a      	orrs	r2, r1
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
 800096e:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <HAL_I2C_MspInit+0x118>)
 8000970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000972:	2202      	movs	r2, #2
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <HAL_I2C_MspInit+0x118>)
 800097c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800097e:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <HAL_I2C_MspInit+0x118>)
 8000980:	2101      	movs	r1, #1
 8000982:	430a      	orrs	r2, r1
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
 8000986:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <HAL_I2C_MspInit+0x118>)
 8000988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800098a:	2201      	movs	r2, #1
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000992:	213c      	movs	r1, #60	; 0x3c
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	0052      	lsls	r2, r2, #1
 800099a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099c:	000c      	movs	r4, r1
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2212      	movs	r2, #18
 80009a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2206      	movs	r2, #6
 80009b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <HAL_I2C_MspInit+0x11c>)
 80009ba:	0019      	movs	r1, r3
 80009bc:	0010      	movs	r0, r2
 80009be:	f001 f9c5 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009c2:	0021      	movs	r1, r4
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	00d2      	lsls	r2, r2, #3
 80009ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2212      	movs	r2, #18
 80009d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2206      	movs	r2, #6
 80009e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	187a      	adds	r2, r7, r1
 80009e6:	23a0      	movs	r3, #160	; 0xa0
 80009e8:	05db      	lsls	r3, r3, #23
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f001 f9ad 	bl	8001d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_I2C_MspInit+0x118>)
 80009f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_I2C_MspInit+0x118>)
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	0389      	lsls	r1, r1, #14
 80009fc:	430a      	orrs	r2, r1
 80009fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HAL_I2C_MspInit+0x118>)
 8000a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	039b      	lsls	r3, r3, #14
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 1, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2101      	movs	r1, #1
 8000a12:	2017      	movs	r0, #23
 8000a14:	f000 fe92 	bl	800173c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000a18:	2017      	movs	r0, #23
 8000a1a:	f000 fea4 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b015      	add	sp, #84	; 0x54
 8000a24:	bd90      	pop	{r4, r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	50000400 	.word	0x50000400

08000a34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <HAL_TIM_Base_MspInit+0x48>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d115      	bne.n	8000a72 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <HAL_TIM_Base_MspInit+0x4c>)
 8000a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_TIM_Base_MspInit+0x4c>)
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	0289      	lsls	r1, r1, #10
 8000a50:	430a      	orrs	r2, r1
 8000a52:	641a      	str	r2, [r3, #64]	; 0x40
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_TIM_Base_MspInit+0x4c>)
 8000a56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	029b      	lsls	r3, r3, #10
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2015      	movs	r0, #21
 8000a68:	f000 fe68 	bl	800173c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000a6c:	2015      	movs	r0, #21
 8000a6e:	f000 fe7a 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b004      	add	sp, #16
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	40014400 	.word	0x40014400
 8000a80:	40021000 	.word	0x40021000

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa8:	f000 f8ce 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <DMA1_Channel1_IRQHandler+0x14>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f001 f838 	bl	8001b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	200000bc 	.word	0x200000bc

08000acc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <TIM16_IRQHandler+0x14>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f003 fe44 	bl	8004760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	20000188 	.word	0x20000188

08000ae4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <I2C1_IRQHandler+0x2c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	699a      	ldr	r2, [r3, #24]
 8000aee:	23e0      	movs	r3, #224	; 0xe0
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	4013      	ands	r3, r2
 8000af4:	d004      	beq.n	8000b00 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <I2C1_IRQHandler+0x2c>)
 8000af8:	0018      	movs	r0, r3
 8000afa:	f001 fcf7 	bl	80024ec <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000afe:	e003      	b.n	8000b08 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <I2C1_IRQHandler+0x2c>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f001 fcd8 	bl	80024b8 <HAL_I2C_EV_IRQHandler>
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	2000013c 	.word	0x2000013c

08000b14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b24:	f7ff fff6 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b28:	480c      	ldr	r0, [pc, #48]	; (8000b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b2a:	490d      	ldr	r1, [pc, #52]	; (8000b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <LoopForever+0xe>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b40:	4c0a      	ldr	r4, [pc, #40]	; (8000b6c <LoopForever+0x16>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b4e:	f003 ffe7 	bl	8004b20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b52:	f7ff fb89 	bl	8000268 <main>

08000b56 <LoopForever>:

LoopForever:
  b LoopForever
 8000b56:	e7fe      	b.n	8000b56 <LoopForever>
  ldr   r0, =_estack
 8000b58:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b64:	08004bd8 	.word	0x08004bd8
  ldr r2, =_sbss
 8000b68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b6c:	200001dc 	.word	0x200001dc

08000b70 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC1_IRQHandler>
	...

08000b74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_Init+0x3c>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_Init+0x3c>)
 8000b86:	2180      	movs	r1, #128	; 0x80
 8000b88:	0049      	lsls	r1, r1, #1
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b8e:	2003      	movs	r0, #3
 8000b90:	f000 f810 	bl	8000bb4 <HAL_InitTick>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d003      	beq.n	8000ba0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e001      	b.n	8000ba4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ba0:	f7ff fe0c 	bl	80007bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	781b      	ldrb	r3, [r3, #0]
}
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40022000 	.word	0x40022000

08000bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <HAL_InitTick+0x88>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d02b      	beq.n	8000c24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_InitTick+0x8c>)
 8000bce:	681c      	ldr	r4, [r3, #0]
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <HAL_InitTick+0x88>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	23fa      	movs	r3, #250	; 0xfa
 8000bd8:	0098      	lsls	r0, r3, #2
 8000bda:	f7ff fa93 	bl	8000104 <__udivsi3>
 8000bde:	0003      	movs	r3, r0
 8000be0:	0019      	movs	r1, r3
 8000be2:	0020      	movs	r0, r4
 8000be4:	f7ff fa8e 	bl	8000104 <__udivsi3>
 8000be8:	0003      	movs	r3, r0
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 fdcb 	bl	8001786 <HAL_SYSTICK_Config>
 8000bf0:	1e03      	subs	r3, r0, #0
 8000bf2:	d112      	bne.n	8000c1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d80a      	bhi.n	8000c10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	425b      	negs	r3, r3
 8000c00:	2200      	movs	r2, #0
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 fd9a 	bl	800173c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_InitTick+0x90>)
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	e00d      	b.n	8000c2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c10:	230f      	movs	r3, #15
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
 8000c18:	e008      	b.n	8000c2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e003      	b.n	8000c2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c24:	230f      	movs	r3, #15
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	781b      	ldrb	r3, [r3, #0]
}
 8000c32:	0018      	movs	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b005      	add	sp, #20
 8000c38:	bd90      	pop	{r4, r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000004 	.word	0x20000004

08000c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_IncTick+0x1c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	001a      	movs	r2, r3
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x20>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	18d2      	adds	r2, r2, r3
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_IncTick+0x20>)
 8000c5a:	601a      	str	r2, [r3, #0]
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	20000008 	.word	0x20000008
 8000c68:	200001d8 	.word	0x200001d8

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <HAL_GetTick+0x10>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	0018      	movs	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	200001d8 	.word	0x200001d8

08000c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c88:	f7ff fff0 	bl	8000c6c <HAL_GetTick>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3301      	adds	r3, #1
 8000c98:	d005      	beq.n	8000ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <HAL_Delay+0x44>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	189b      	adds	r3, r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	f7ff ffe0 	bl	8000c6c <HAL_GetTick>
 8000cac:	0002      	movs	r2, r0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d8f7      	bhi.n	8000ca8 <HAL_Delay+0x28>
  {
  }
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b004      	add	sp, #16
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	20000008 	.word	0x20000008

08000cc8 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000cd2:	6819      	ldr	r1, [r3, #0]
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b002      	add	sp, #8
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40010000 	.word	0x40010000

08000ce8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000cf8:	401a      	ands	r2, r3
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	601a      	str	r2, [r3, #0]
}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	fe3fffff 	.word	0xfe3fffff

08000d10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	23e0      	movs	r3, #224	; 0xe0
 8000d1e:	045b      	lsls	r3, r3, #17
 8000d20:	4013      	ands	r3, r2
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b084      	sub	sp, #16
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	2104      	movs	r1, #4
 8000d3e:	400a      	ands	r2, r1
 8000d40:	2107      	movs	r1, #7
 8000d42:	4091      	lsls	r1, r2
 8000d44:	000a      	movs	r2, r1
 8000d46:	43d2      	mvns	r2, r2
 8000d48:	401a      	ands	r2, r3
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	400b      	ands	r3, r1
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	4099      	lsls	r1, r3
 8000d54:	000b      	movs	r3, r1
 8000d56:	431a      	orrs	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b004      	add	sp, #16
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	2104      	movs	r1, #4
 8000d76:	400a      	ands	r2, r1
 8000d78:	2107      	movs	r1, #7
 8000d7a:	4091      	lsls	r1, r2
 8000d7c:	000a      	movs	r2, r1
 8000d7e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	2104      	movs	r1, #4
 8000d84:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d86:	40da      	lsrs	r2, r3
 8000d88:	0013      	movs	r3, r2
}
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	211f      	movs	r1, #31
 8000da6:	400a      	ands	r2, r1
 8000da8:	210f      	movs	r1, #15
 8000daa:	4091      	lsls	r1, r2
 8000dac:	000a      	movs	r2, r1
 8000dae:	43d2      	mvns	r2, r2
 8000db0:	401a      	ands	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	0e9b      	lsrs	r3, r3, #26
 8000db6:	210f      	movs	r1, #15
 8000db8:	4019      	ands	r1, r3
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	201f      	movs	r0, #31
 8000dbe:	4003      	ands	r3, r0
 8000dc0:	4099      	lsls	r1, r3
 8000dc2:	000b      	movs	r3, r1
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b004      	add	sp, #16
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	035b      	lsls	r3, r3, #13
 8000de4:	0b5b      	lsrs	r3, r3, #13
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b002      	add	sp, #8
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	0352      	lsls	r2, r2, #13
 8000e06:	0b52      	lsrs	r2, r2, #13
 8000e08:	43d2      	mvns	r2, r2
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b002      	add	sp, #8
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	0212      	lsls	r2, r2, #8
 8000e2c:	43d2      	mvns	r2, r2
 8000e2e:	401a      	ands	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	400b      	ands	r3, r1
 8000e38:	4904      	ldr	r1, [pc, #16]	; (8000e4c <LL_ADC_SetChannelSamplingTime+0x34>)
 8000e3a:	400b      	ands	r3, r1
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b004      	add	sp, #16
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	07ffff00 	.word	0x07ffff00

08000e50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <LL_ADC_EnableInternalRegulator+0x24>)
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	0552      	lsls	r2, r2, #21
 8000e64:	431a      	orrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	6fffffe8 	.word	0x6fffffe8

08000e78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	055b      	lsls	r3, r3, #21
 8000e88:	401a      	ands	r2, r3
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	055b      	lsls	r3, r3, #21
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d101      	bne.n	8000e96 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e000      	b.n	8000e98 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	0018      	movs	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	2201      	movs	r2, #1
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d101      	bne.n	8000eb8 <LL_ADC_IsEnabled+0x18>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e000      	b.n	8000eba <LL_ADC_IsEnabled+0x1a>
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	2204      	movs	r2, #4
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d101      	bne.n	8000eda <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eec:	231f      	movs	r3, #31
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e17f      	b.n	800120a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10a      	bne.n	8000f28 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff fc77 	bl	8000808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2254      	movs	r2, #84	; 0x54
 8000f24:	2100      	movs	r1, #0
 8000f26:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff ffa3 	bl	8000e78 <LL_ADC_IsInternalRegulatorEnabled>
 8000f32:	1e03      	subs	r3, r0, #0
 8000f34:	d115      	bne.n	8000f62 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff ff88 	bl	8000e50 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f40:	4bb4      	ldr	r3, [pc, #720]	; (8001214 <HAL_ADC_Init+0x330>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	49b4      	ldr	r1, [pc, #720]	; (8001218 <HAL_ADC_Init+0x334>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f7ff f8dc 	bl	8000104 <__udivsi3>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	3301      	adds	r3, #1
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f54:	e002      	b.n	8000f5c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f9      	bne.n	8000f56 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff ff86 	bl	8000e78 <LL_ADC_IsInternalRegulatorEnabled>
 8000f6c:	1e03      	subs	r3, r0, #0
 8000f6e:	d10f      	bne.n	8000f90 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f74:	2210      	movs	r2, #16
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f80:	2201      	movs	r2, #1
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f88:	231f      	movs	r3, #31
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff ff94 	bl	8000ec2 <LL_ADC_REG_IsConversionOngoing>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d000      	beq.n	8000faa <HAL_ADC_Init+0xc6>
 8000fa8:	e122      	b.n	80011f0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d000      	beq.n	8000fb2 <HAL_ADC_Init+0xce>
 8000fb0:	e11e      	b.n	80011f0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	4a99      	ldr	r2, [pc, #612]	; (800121c <HAL_ADC_Init+0x338>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2202      	movs	r2, #2
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f7ff ff6a 	bl	8000ea0 <LL_ADC_IsEnabled>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	d000      	beq.n	8000fd2 <HAL_ADC_Init+0xee>
 8000fd0:	e0ad      	b.n	800112e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7e1b      	ldrb	r3, [r3, #24]
 8000fda:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000fdc:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7e5b      	ldrb	r3, [r3, #25]
 8000fe2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000fe4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7e9b      	ldrb	r3, [r3, #26]
 8000fea:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000fec:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <HAL_ADC_Init+0x118>
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	015b      	lsls	r3, r3, #5
 8000ffa:	e000      	b.n	8000ffe <HAL_ADC_Init+0x11a>
 8000ffc:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000ffe:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001004:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	2b00      	cmp	r3, #0
 800100c:	da04      	bge.n	8001018 <HAL_ADC_Init+0x134>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	085b      	lsrs	r3, r3, #1
 8001016:	e001      	b.n	800101c <HAL_ADC_Init+0x138>
 8001018:	2380      	movs	r3, #128	; 0x80
 800101a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800101c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	212c      	movs	r1, #44	; 0x2c
 8001022:	5c5b      	ldrb	r3, [r3, r1]
 8001024:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001026:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2220      	movs	r2, #32
 8001032:	5c9b      	ldrb	r3, [r3, r2]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d115      	bne.n	8001064 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7e9b      	ldrb	r3, [r3, #26]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d105      	bne.n	800104c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	0252      	lsls	r2, r2, #9
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	e00b      	b.n	8001064 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001050:	2220      	movs	r2, #32
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105c:	2201      	movs	r2, #1
 800105e:	431a      	orrs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00a      	beq.n	8001082 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001070:	23e0      	movs	r3, #224	; 0xe0
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800107a:	4313      	orrs	r3, r2
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	4a65      	ldr	r2, [pc, #404]	; (8001220 <HAL_ADC_Init+0x33c>)
 800108a:	4013      	ands	r3, r2
 800108c:	0019      	movs	r1, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	430a      	orrs	r2, r1
 8001096:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	0f9b      	lsrs	r3, r3, #30
 800109e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010a4:	4313      	orrs	r3, r2
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	223c      	movs	r2, #60	; 0x3c
 80010b0:	5c9b      	ldrb	r3, [r3, r2]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d111      	bne.n	80010da <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	0f9b      	lsrs	r3, r3, #30
 80010bc:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010c2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80010c8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80010ce:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	2201      	movs	r2, #1
 80010d6:	4313      	orrs	r3, r2
 80010d8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	4a50      	ldr	r2, [pc, #320]	; (8001224 <HAL_ADC_Init+0x340>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	0019      	movs	r1, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	23c0      	movs	r3, #192	; 0xc0
 80010f6:	061b      	lsls	r3, r3, #24
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d018      	beq.n	800112e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	05db      	lsls	r3, r3, #23
 8001104:	429a      	cmp	r2, r3
 8001106:	d012      	beq.n	800112e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	061b      	lsls	r3, r3, #24
 8001110:	429a      	cmp	r2, r3
 8001112:	d00c      	beq.n	800112e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001114:	4b44      	ldr	r3, [pc, #272]	; (8001228 <HAL_ADC_Init+0x344>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a44      	ldr	r2, [pc, #272]	; (800122c <HAL_ADC_Init+0x348>)
 800111a:	4013      	ands	r3, r2
 800111c:	0019      	movs	r1, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	23f0      	movs	r3, #240	; 0xf0
 8001124:	039b      	lsls	r3, r3, #14
 8001126:	401a      	ands	r2, r3
 8001128:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <HAL_ADC_Init+0x344>)
 800112a:	430a      	orrs	r2, r1
 800112c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001136:	001a      	movs	r2, r3
 8001138:	2100      	movs	r1, #0
 800113a:	f7ff fdf6 	bl	8000d2a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001146:	493a      	ldr	r1, [pc, #232]	; (8001230 <HAL_ADC_Init+0x34c>)
 8001148:	001a      	movs	r2, r3
 800114a:	f7ff fdee 	bl	8000d2a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2110      	movs	r1, #16
 8001162:	4249      	negs	r1, r1
 8001164:	430a      	orrs	r2, r1
 8001166:	629a      	str	r2, [r3, #40]	; 0x28
 8001168:	e018      	b.n	800119c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691a      	ldr	r2, [r3, #16]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	039b      	lsls	r3, r3, #14
 8001172:	429a      	cmp	r2, r3
 8001174:	d112      	bne.n	800119c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	3b01      	subs	r3, #1
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	221c      	movs	r2, #28
 8001186:	4013      	ands	r3, r2
 8001188:	2210      	movs	r2, #16
 800118a:	4252      	negs	r2, r2
 800118c:	409a      	lsls	r2, r3
 800118e:	0011      	movs	r1, r2
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2100      	movs	r1, #0
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff fdde 	bl	8000d64 <LL_ADC_GetSamplingTimeCommonChannels>
 80011a8:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d10b      	bne.n	80011ca <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011bc:	2203      	movs	r2, #3
 80011be:	4393      	bics	r3, r2
 80011c0:	2201      	movs	r2, #1
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011c8:	e01c      	b.n	8001204 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	2212      	movs	r2, #18
 80011d0:	4393      	bics	r3, r2
 80011d2:	2210      	movs	r2, #16
 80011d4:	431a      	orrs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011de:	2201      	movs	r2, #1
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80011e6:	231f      	movs	r3, #31
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011ee:	e009      	b.n	8001204 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	2210      	movs	r2, #16
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011fc:	231f      	movs	r3, #31
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001204:	231f      	movs	r3, #31
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	781b      	ldrb	r3, [r3, #0]
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b008      	add	sp, #32
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	20000000 	.word	0x20000000
 8001218:	00030d40 	.word	0x00030d40
 800121c:	fffffefd 	.word	0xfffffefd
 8001220:	fffe0201 	.word	0xfffe0201
 8001224:	1ffffc02 	.word	0x1ffffc02
 8001228:	40012708 	.word	0x40012708
 800122c:	ffc3ffff 	.word	0xffc3ffff
 8001230:	07ffff04 	.word	0x07ffff04

08001234 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800123e:	2317      	movs	r3, #23
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2254      	movs	r2, #84	; 0x54
 800124e:	5c9b      	ldrb	r3, [r3, r2]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x24>
 8001254:	2302      	movs	r3, #2
 8001256:	e1c0      	b.n	80015da <HAL_ADC_ConfigChannel+0x3a6>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2254      	movs	r2, #84	; 0x54
 800125c:	2101      	movs	r1, #1
 800125e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff fe2c 	bl	8000ec2 <LL_ADC_REG_IsConversionOngoing>
 800126a:	1e03      	subs	r3, r0, #0
 800126c:	d000      	beq.n	8001270 <HAL_ADC_ConfigChannel+0x3c>
 800126e:	e1a3      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d100      	bne.n	800127a <HAL_ADC_ConfigChannel+0x46>
 8001278:	e143      	b.n	8001502 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691a      	ldr	r2, [r3, #16]
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	061b      	lsls	r3, r3, #24
 8001282:	429a      	cmp	r2, r3
 8001284:	d004      	beq.n	8001290 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800128a:	4ac1      	ldr	r2, [pc, #772]	; (8001590 <HAL_ADC_ConfigChannel+0x35c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d108      	bne.n	80012a2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	0019      	movs	r1, r3
 800129a:	0010      	movs	r0, r2
 800129c:	f7ff fd99 	bl	8000dd2 <LL_ADC_REG_SetSequencerChAdd>
 80012a0:	e0c9      	b.n	8001436 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	211f      	movs	r1, #31
 80012ac:	400b      	ands	r3, r1
 80012ae:	210f      	movs	r1, #15
 80012b0:	4099      	lsls	r1, r3
 80012b2:	000b      	movs	r3, r1
 80012b4:	43db      	mvns	r3, r3
 80012b6:	4013      	ands	r3, r2
 80012b8:	0019      	movs	r1, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	035b      	lsls	r3, r3, #13
 80012c0:	0b5b      	lsrs	r3, r3, #13
 80012c2:	d105      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x9c>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	0e9b      	lsrs	r3, r3, #26
 80012ca:	221f      	movs	r2, #31
 80012cc:	4013      	ands	r3, r2
 80012ce:	e098      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	4013      	ands	r3, r2
 80012d8:	d000      	beq.n	80012dc <HAL_ADC_ConfigChannel+0xa8>
 80012da:	e091      	b.n	8001400 <HAL_ADC_ConfigChannel+0x1cc>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2202      	movs	r2, #2
 80012e2:	4013      	ands	r3, r2
 80012e4:	d000      	beq.n	80012e8 <HAL_ADC_ConfigChannel+0xb4>
 80012e6:	e089      	b.n	80013fc <HAL_ADC_ConfigChannel+0x1c8>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2204      	movs	r2, #4
 80012ee:	4013      	ands	r3, r2
 80012f0:	d000      	beq.n	80012f4 <HAL_ADC_ConfigChannel+0xc0>
 80012f2:	e081      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x1c4>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2208      	movs	r2, #8
 80012fa:	4013      	ands	r3, r2
 80012fc:	d000      	beq.n	8001300 <HAL_ADC_ConfigChannel+0xcc>
 80012fe:	e079      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x1c0>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2210      	movs	r2, #16
 8001306:	4013      	ands	r3, r2
 8001308:	d000      	beq.n	800130c <HAL_ADC_ConfigChannel+0xd8>
 800130a:	e071      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x1bc>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2220      	movs	r2, #32
 8001312:	4013      	ands	r3, r2
 8001314:	d000      	beq.n	8001318 <HAL_ADC_ConfigChannel+0xe4>
 8001316:	e069      	b.n	80013ec <HAL_ADC_ConfigChannel+0x1b8>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2240      	movs	r2, #64	; 0x40
 800131e:	4013      	ands	r3, r2
 8001320:	d000      	beq.n	8001324 <HAL_ADC_ConfigChannel+0xf0>
 8001322:	e061      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x1b4>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	4013      	ands	r3, r2
 800132c:	d000      	beq.n	8001330 <HAL_ADC_ConfigChannel+0xfc>
 800132e:	e059      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x1b0>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4013      	ands	r3, r2
 800133a:	d151      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x1ac>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4013      	ands	r3, r2
 8001346:	d149      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x1a8>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4013      	ands	r3, r2
 8001352:	d141      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1a4>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	4013      	ands	r3, r2
 800135e:	d139      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1a0>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	015b      	lsls	r3, r3, #5
 8001368:	4013      	ands	r3, r2
 800136a:	d131      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x19c>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	019b      	lsls	r3, r3, #6
 8001374:	4013      	ands	r3, r2
 8001376:	d129      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x198>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	01db      	lsls	r3, r3, #7
 8001380:	4013      	ands	r3, r2
 8001382:	d121      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x194>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	4013      	ands	r3, r2
 800138e:	d119      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x190>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	025b      	lsls	r3, r3, #9
 8001398:	4013      	ands	r3, r2
 800139a:	d111      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x18c>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	029b      	lsls	r3, r3, #10
 80013a4:	4013      	ands	r3, r2
 80013a6:	d109      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x188>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	02db      	lsls	r3, r3, #11
 80013b0:	4013      	ands	r3, r2
 80013b2:	d001      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x184>
 80013b4:	2312      	movs	r3, #18
 80013b6:	e024      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013b8:	2300      	movs	r3, #0
 80013ba:	e022      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013bc:	2311      	movs	r3, #17
 80013be:	e020      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013c0:	2310      	movs	r3, #16
 80013c2:	e01e      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013c4:	230f      	movs	r3, #15
 80013c6:	e01c      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013c8:	230e      	movs	r3, #14
 80013ca:	e01a      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013cc:	230d      	movs	r3, #13
 80013ce:	e018      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013d0:	230c      	movs	r3, #12
 80013d2:	e016      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013d4:	230b      	movs	r3, #11
 80013d6:	e014      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013d8:	230a      	movs	r3, #10
 80013da:	e012      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013dc:	2309      	movs	r3, #9
 80013de:	e010      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013e0:	2308      	movs	r3, #8
 80013e2:	e00e      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013e4:	2307      	movs	r3, #7
 80013e6:	e00c      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013e8:	2306      	movs	r3, #6
 80013ea:	e00a      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013ec:	2305      	movs	r3, #5
 80013ee:	e008      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013f0:	2304      	movs	r3, #4
 80013f2:	e006      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013f4:	2303      	movs	r3, #3
 80013f6:	e004      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e002      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ce>
 8001400:	2300      	movs	r3, #0
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	6852      	ldr	r2, [r2, #4]
 8001406:	201f      	movs	r0, #31
 8001408:	4002      	ands	r2, r0
 800140a:	4093      	lsls	r3, r2
 800140c:	000a      	movs	r2, r1
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	429a      	cmp	r2, r3
 8001422:	d808      	bhi.n	8001436 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	6859      	ldr	r1, [r3, #4]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	001a      	movs	r2, r3
 8001432:	f7ff fcae 	bl	8000d92 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	6819      	ldr	r1, [r3, #0]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	001a      	movs	r2, r3
 8001444:	f7ff fce8 	bl	8000e18 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db00      	blt.n	8001452 <HAL_ADC_ConfigChannel+0x21e>
 8001450:	e0bc      	b.n	80015cc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001452:	4b50      	ldr	r3, [pc, #320]	; (8001594 <HAL_ADC_ConfigChannel+0x360>)
 8001454:	0018      	movs	r0, r3
 8001456:	f7ff fc5b 	bl	8000d10 <LL_ADC_GetCommonPathInternalCh>
 800145a:	0003      	movs	r3, r0
 800145c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a4d      	ldr	r2, [pc, #308]	; (8001598 <HAL_ADC_ConfigChannel+0x364>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d122      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	041b      	lsls	r3, r3, #16
 800146e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001470:	d11d      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	0412      	lsls	r2, r2, #16
 8001478:	4313      	orrs	r3, r2
 800147a:	4a46      	ldr	r2, [pc, #280]	; (8001594 <HAL_ADC_ConfigChannel+0x360>)
 800147c:	0019      	movs	r1, r3
 800147e:	0010      	movs	r0, r2
 8001480:	f7ff fc32 	bl	8000ce8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001484:	4b45      	ldr	r3, [pc, #276]	; (800159c <HAL_ADC_ConfigChannel+0x368>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4945      	ldr	r1, [pc, #276]	; (80015a0 <HAL_ADC_ConfigChannel+0x36c>)
 800148a:	0018      	movs	r0, r3
 800148c:	f7fe fe3a 	bl	8000104 <__udivsi3>
 8001490:	0003      	movs	r3, r0
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	0013      	movs	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	189b      	adds	r3, r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800149e:	e002      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f9      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014ac:	e08e      	b.n	80015cc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a3c      	ldr	r2, [pc, #240]	; (80015a4 <HAL_ADC_ConfigChannel+0x370>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d10e      	bne.n	80014d6 <HAL_ADC_ConfigChannel+0x2a2>
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	045b      	lsls	r3, r3, #17
 80014be:	4013      	ands	r3, r2
 80014c0:	d109      	bne.n	80014d6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	0452      	lsls	r2, r2, #17
 80014c8:	4313      	orrs	r3, r2
 80014ca:	4a32      	ldr	r2, [pc, #200]	; (8001594 <HAL_ADC_ConfigChannel+0x360>)
 80014cc:	0019      	movs	r1, r3
 80014ce:	0010      	movs	r0, r2
 80014d0:	f7ff fc0a 	bl	8000ce8 <LL_ADC_SetCommonPathInternalCh>
 80014d4:	e07a      	b.n	80015cc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a33      	ldr	r2, [pc, #204]	; (80015a8 <HAL_ADC_ConfigChannel+0x374>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d000      	beq.n	80014e2 <HAL_ADC_ConfigChannel+0x2ae>
 80014e0:	e074      	b.n	80015cc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	03db      	lsls	r3, r3, #15
 80014e8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014ea:	d000      	beq.n	80014ee <HAL_ADC_ConfigChannel+0x2ba>
 80014ec:	e06e      	b.n	80015cc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	03d2      	lsls	r2, r2, #15
 80014f4:	4313      	orrs	r3, r2
 80014f6:	4a27      	ldr	r2, [pc, #156]	; (8001594 <HAL_ADC_ConfigChannel+0x360>)
 80014f8:	0019      	movs	r1, r3
 80014fa:	0010      	movs	r0, r2
 80014fc:	f7ff fbf4 	bl	8000ce8 <LL_ADC_SetCommonPathInternalCh>
 8001500:	e064      	b.n	80015cc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691a      	ldr	r2, [r3, #16]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	061b      	lsls	r3, r3, #24
 800150a:	429a      	cmp	r2, r3
 800150c:	d004      	beq.n	8001518 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001512:	4a1f      	ldr	r2, [pc, #124]	; (8001590 <HAL_ADC_ConfigChannel+0x35c>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d107      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0019      	movs	r1, r3
 8001522:	0010      	movs	r0, r2
 8001524:	f7ff fc66 	bl	8000df4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	da4d      	bge.n	80015cc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_ADC_ConfigChannel+0x360>)
 8001532:	0018      	movs	r0, r3
 8001534:	f7ff fbec 	bl	8000d10 <LL_ADC_GetCommonPathInternalCh>
 8001538:	0003      	movs	r3, r0
 800153a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a15      	ldr	r2, [pc, #84]	; (8001598 <HAL_ADC_ConfigChannel+0x364>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d108      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4a18      	ldr	r2, [pc, #96]	; (80015ac <HAL_ADC_ConfigChannel+0x378>)
 800154a:	4013      	ands	r3, r2
 800154c:	4a11      	ldr	r2, [pc, #68]	; (8001594 <HAL_ADC_ConfigChannel+0x360>)
 800154e:	0019      	movs	r1, r3
 8001550:	0010      	movs	r0, r2
 8001552:	f7ff fbc9 	bl	8000ce8 <LL_ADC_SetCommonPathInternalCh>
 8001556:	e039      	b.n	80015cc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <HAL_ADC_ConfigChannel+0x370>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d108      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <HAL_ADC_ConfigChannel+0x37c>)
 8001566:	4013      	ands	r3, r2
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_ADC_ConfigChannel+0x360>)
 800156a:	0019      	movs	r1, r3
 800156c:	0010      	movs	r0, r2
 800156e:	f7ff fbbb 	bl	8000ce8 <LL_ADC_SetCommonPathInternalCh>
 8001572:	e02b      	b.n	80015cc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <HAL_ADC_ConfigChannel+0x374>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d126      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <HAL_ADC_ConfigChannel+0x380>)
 8001582:	4013      	ands	r3, r2
 8001584:	4a03      	ldr	r2, [pc, #12]	; (8001594 <HAL_ADC_ConfigChannel+0x360>)
 8001586:	0019      	movs	r1, r3
 8001588:	0010      	movs	r0, r2
 800158a:	f7ff fbad 	bl	8000ce8 <LL_ADC_SetCommonPathInternalCh>
 800158e:	e01d      	b.n	80015cc <HAL_ADC_ConfigChannel+0x398>
 8001590:	80000004 	.word	0x80000004
 8001594:	40012708 	.word	0x40012708
 8001598:	b0001000 	.word	0xb0001000
 800159c:	20000000 	.word	0x20000000
 80015a0:	00030d40 	.word	0x00030d40
 80015a4:	b8004000 	.word	0xb8004000
 80015a8:	b4002000 	.word	0xb4002000
 80015ac:	ff7fffff 	.word	0xff7fffff
 80015b0:	feffffff 	.word	0xfeffffff
 80015b4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	2220      	movs	r2, #32
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015c4:	2317      	movs	r3, #23
 80015c6:	18fb      	adds	r3, r7, r3
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2254      	movs	r2, #84	; 0x54
 80015d0:	2100      	movs	r1, #0
 80015d2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80015d4:	2317      	movs	r3, #23
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	781b      	ldrb	r3, [r3, #0]
}
 80015da:	0018      	movs	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	b006      	add	sp, #24
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)

080015e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	0002      	movs	r2, r0
 80015ec:	1dfb      	adds	r3, r7, #7
 80015ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	1dfb      	adds	r3, r7, #7
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b7f      	cmp	r3, #127	; 0x7f
 80015f6:	d809      	bhi.n	800160c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f8:	1dfb      	adds	r3, r7, #7
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	001a      	movs	r2, r3
 80015fe:	231f      	movs	r3, #31
 8001600:	401a      	ands	r2, r3
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__NVIC_EnableIRQ+0x30>)
 8001604:	2101      	movs	r1, #1
 8001606:	4091      	lsls	r1, r2
 8001608:	000a      	movs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b002      	add	sp, #8
 8001612:	bd80      	pop	{r7, pc}
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	0002      	movs	r2, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b7f      	cmp	r3, #127	; 0x7f
 800162c:	d828      	bhi.n	8001680 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800162e:	4a2f      	ldr	r2, [pc, #188]	; (80016ec <__NVIC_SetPriority+0xd4>)
 8001630:	1dfb      	adds	r3, r7, #7
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b25b      	sxtb	r3, r3
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	33c0      	adds	r3, #192	; 0xc0
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	589b      	ldr	r3, [r3, r2]
 800163e:	1dfa      	adds	r2, r7, #7
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	0011      	movs	r1, r2
 8001644:	2203      	movs	r2, #3
 8001646:	400a      	ands	r2, r1
 8001648:	00d2      	lsls	r2, r2, #3
 800164a:	21ff      	movs	r1, #255	; 0xff
 800164c:	4091      	lsls	r1, r2
 800164e:	000a      	movs	r2, r1
 8001650:	43d2      	mvns	r2, r2
 8001652:	401a      	ands	r2, r3
 8001654:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	019b      	lsls	r3, r3, #6
 800165a:	22ff      	movs	r2, #255	; 0xff
 800165c:	401a      	ands	r2, r3
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	0018      	movs	r0, r3
 8001664:	2303      	movs	r3, #3
 8001666:	4003      	ands	r3, r0
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800166c:	481f      	ldr	r0, [pc, #124]	; (80016ec <__NVIC_SetPriority+0xd4>)
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b25b      	sxtb	r3, r3
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	430a      	orrs	r2, r1
 8001678:	33c0      	adds	r3, #192	; 0xc0
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800167e:	e031      	b.n	80016e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <__NVIC_SetPriority+0xd8>)
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	0019      	movs	r1, r3
 8001688:	230f      	movs	r3, #15
 800168a:	400b      	ands	r3, r1
 800168c:	3b08      	subs	r3, #8
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3306      	adds	r3, #6
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	18d3      	adds	r3, r2, r3
 8001696:	3304      	adds	r3, #4
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	1dfa      	adds	r2, r7, #7
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	0011      	movs	r1, r2
 80016a0:	2203      	movs	r2, #3
 80016a2:	400a      	ands	r2, r1
 80016a4:	00d2      	lsls	r2, r2, #3
 80016a6:	21ff      	movs	r1, #255	; 0xff
 80016a8:	4091      	lsls	r1, r2
 80016aa:	000a      	movs	r2, r1
 80016ac:	43d2      	mvns	r2, r2
 80016ae:	401a      	ands	r2, r3
 80016b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	22ff      	movs	r2, #255	; 0xff
 80016b8:	401a      	ands	r2, r3
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	0018      	movs	r0, r3
 80016c0:	2303      	movs	r3, #3
 80016c2:	4003      	ands	r3, r0
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c8:	4809      	ldr	r0, [pc, #36]	; (80016f0 <__NVIC_SetPriority+0xd8>)
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	001c      	movs	r4, r3
 80016d0:	230f      	movs	r3, #15
 80016d2:	4023      	ands	r3, r4
 80016d4:	3b08      	subs	r3, #8
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	430a      	orrs	r2, r1
 80016da:	3306      	adds	r3, #6
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	18c3      	adds	r3, r0, r3
 80016e0:	3304      	adds	r3, #4
 80016e2:	601a      	str	r2, [r3, #0]
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b003      	add	sp, #12
 80016ea:	bd90      	pop	{r4, r7, pc}
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	1e5a      	subs	r2, r3, #1
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	045b      	lsls	r3, r3, #17
 8001704:	429a      	cmp	r2, r3
 8001706:	d301      	bcc.n	800170c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001708:	2301      	movs	r3, #1
 800170a:	e010      	b.n	800172e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <SysTick_Config+0x44>)
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	3a01      	subs	r2, #1
 8001712:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001714:	2301      	movs	r3, #1
 8001716:	425b      	negs	r3, r3
 8001718:	2103      	movs	r1, #3
 800171a:	0018      	movs	r0, r3
 800171c:	f7ff ff7c 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <SysTick_Config+0x44>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <SysTick_Config+0x44>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800172c:	2300      	movs	r3, #0
}
 800172e:	0018      	movs	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	e000e010 	.word	0xe000e010

0800173c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	210f      	movs	r1, #15
 8001748:	187b      	adds	r3, r7, r1
 800174a:	1c02      	adds	r2, r0, #0
 800174c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	187b      	adds	r3, r7, r1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b25b      	sxtb	r3, r3
 8001756:	0011      	movs	r1, r2
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff ff5d 	bl	8001618 <__NVIC_SetPriority>
}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	b004      	add	sp, #16
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	0002      	movs	r2, r0
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001772:	1dfb      	adds	r3, r7, #7
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b25b      	sxtb	r3, r3
 8001778:	0018      	movs	r0, r3
 800177a:	f7ff ff33 	bl	80015e4 <__NVIC_EnableIRQ>
}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	46bd      	mov	sp, r7
 8001782:	b002      	add	sp, #8
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	0018      	movs	r0, r3
 8001792:	f7ff ffaf 	bl	80016f4 <SysTick_Config>
 8001796:	0003      	movs	r3, r0
}
 8001798:	0018      	movs	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	b002      	add	sp, #8
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e056      	b.n	8001860 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7f5b      	ldrb	r3, [r3, #29]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d106      	bne.n	80017ca <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7ff f885 	bl	80008d4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2202      	movs	r2, #2
 80017ce:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	791b      	ldrb	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10c      	bne.n	80017f2 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a22      	ldr	r2, [pc, #136]	; (8001868 <HAL_CRC_Init+0xc8>)
 80017de:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2118      	movs	r1, #24
 80017ec:	438a      	bics	r2, r1
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	e00b      	b.n	800180a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6899      	ldr	r1, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	0018      	movs	r0, r3
 80017fe:	f000 f835 	bl	800186c <HAL_CRCEx_Polynomial_Set>
 8001802:	1e03      	subs	r3, r0, #0
 8001804:	d001      	beq.n	800180a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e02a      	b.n	8001860 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	795b      	ldrb	r3, [r3, #5]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d105      	bne.n	800181e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2201      	movs	r2, #1
 8001818:	4252      	negs	r2, r2
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	e004      	b.n	8001828 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6912      	ldr	r2, [r2, #16]
 8001826:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2260      	movs	r2, #96	; 0x60
 8001830:	4393      	bics	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	4393      	bics	r3, r2
 800184a:	0019      	movs	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699a      	ldr	r2, [r3, #24]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	0018      	movs	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	b002      	add	sp, #8
 8001866:	bd80      	pop	{r7, pc}
 8001868:	04c11db7 	.word	0x04c11db7

0800186c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001878:	2317      	movs	r3, #23
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001880:	231f      	movs	r3, #31
 8001882:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1e5a      	subs	r2, r3, #1
 800188a:	613a      	str	r2, [r7, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_CRCEx_Polynomial_Set+0x36>
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	221f      	movs	r2, #31
 8001894:	4013      	ands	r3, r2
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	40da      	lsrs	r2, r3
 800189a:	0013      	movs	r3, r2
 800189c:	2201      	movs	r2, #1
 800189e:	4013      	ands	r3, r2
 80018a0:	d0f1      	beq.n	8001886 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b18      	cmp	r3, #24
 80018a6:	d00f      	beq.n	80018c8 <HAL_CRCEx_Polynomial_Set+0x5c>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b18      	cmp	r3, #24
 80018ac:	d824      	bhi.n	80018f8 <HAL_CRCEx_Polynomial_Set+0x8c>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b10      	cmp	r3, #16
 80018b2:	d011      	beq.n	80018d8 <HAL_CRCEx_Polynomial_Set+0x6c>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d81e      	bhi.n	80018f8 <HAL_CRCEx_Polynomial_Set+0x8c>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d020      	beq.n	8001902 <HAL_CRCEx_Polynomial_Set+0x96>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d010      	beq.n	80018e8 <HAL_CRCEx_Polynomial_Set+0x7c>
 80018c6:	e017      	b.n	80018f8 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d91b      	bls.n	8001906 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 80018ce:	2317      	movs	r3, #23
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80018d6:	e016      	b.n	8001906 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b07      	cmp	r3, #7
 80018dc:	d915      	bls.n	800190a <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 80018de:	2317      	movs	r3, #23
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80018e6:	e010      	b.n	800190a <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	2b0f      	cmp	r3, #15
 80018ec:	d90f      	bls.n	800190e <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 80018ee:	2317      	movs	r3, #23
 80018f0:	18fb      	adds	r3, r7, r3
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80018f6:	e00a      	b.n	800190e <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80018f8:	2317      	movs	r3, #23
 80018fa:	18fb      	adds	r3, r7, r3
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
      break;
 8001900:	e006      	b.n	8001910 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	e004      	b.n	8001910 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	e002      	b.n	8001910 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	e000      	b.n	8001910 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800190e:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8001910:	2317      	movs	r3, #23
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10e      	bne.n	8001938 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2218      	movs	r2, #24
 800192a:	4393      	bics	r3, r2
 800192c:	0019      	movs	r1, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	430a      	orrs	r2, r1
 8001936:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001938:	2317      	movs	r3, #23
 800193a:	18fb      	adds	r3, r7, r3
 800193c:	781b      	ldrb	r3, [r3, #0]
}
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b006      	add	sp, #24
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e077      	b.n	8001a4a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a3d      	ldr	r2, [pc, #244]	; (8001a54 <HAL_DMA_Init+0x10c>)
 8001960:	4694      	mov	ip, r2
 8001962:	4463      	add	r3, ip
 8001964:	2114      	movs	r1, #20
 8001966:	0018      	movs	r0, r3
 8001968:	f7fe fbcc 	bl	8000104 <__udivsi3>
 800196c:	0003      	movs	r3, r0
 800196e:	009a      	lsls	r2, r3, #2
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2225      	movs	r2, #37	; 0x25
 8001978:	2102      	movs	r1, #2
 800197a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4934      	ldr	r1, [pc, #208]	; (8001a58 <HAL_DMA_Init+0x110>)
 8001988:	400a      	ands	r2, r1
 800198a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6819      	ldr	r1, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 f971 	bl	8001cac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	01db      	lsls	r3, r3, #7
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d102      	bne.n	80019dc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	213f      	movs	r1, #63	; 0x3f
 80019e6:	400a      	ands	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80019f2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d011      	beq.n	8001a20 <HAL_DMA_Init+0xd8>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d80d      	bhi.n	8001a20 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	0018      	movs	r0, r3
 8001a08:	f000 f97c 	bl	8001d04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	e008      	b.n	8001a32 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2225      	movs	r2, #37	; 0x25
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2224      	movs	r2, #36	; 0x24
 8001a44:	2100      	movs	r1, #0
 8001a46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b002      	add	sp, #8
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	bffdfff8 	.word	0xbffdfff8
 8001a58:	ffff800f 	.word	0xffff800f

08001a5c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a64:	210f      	movs	r1, #15
 8001a66:	187b      	adds	r3, r7, r1
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2225      	movs	r2, #37	; 0x25
 8001a70:	5c9b      	ldrb	r3, [r3, r2]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d006      	beq.n	8001a86 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a7e:	187b      	adds	r3, r7, r1
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	e049      	b.n	8001b1a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	210e      	movs	r1, #14
 8001a92:	438a      	bics	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	438a      	bics	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	491d      	ldr	r1, [pc, #116]	; (8001b28 <HAL_DMA_Abort_IT+0xcc>)
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_DMA_Abort_IT+0xd0>)
 8001ab8:	6859      	ldr	r1, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	221c      	movs	r2, #28
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_DMA_Abort_IT+0xd0>)
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ad4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00c      	beq.n	8001af8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae8:	490f      	ldr	r1, [pc, #60]	; (8001b28 <HAL_DMA_Abort_IT+0xcc>)
 8001aea:	400a      	ands	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001af6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2225      	movs	r2, #37	; 0x25
 8001afc:	2101      	movs	r1, #1
 8001afe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2224      	movs	r2, #36	; 0x24
 8001b04:	2100      	movs	r1, #0
 8001b06:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d004      	beq.n	8001b1a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	0010      	movs	r0, r2
 8001b18:	4798      	blx	r3
    }
  }
  return status;
 8001b1a:	230f      	movs	r3, #15
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	781b      	ldrb	r3, [r3, #0]
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b004      	add	sp, #16
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	fffffeff 	.word	0xfffffeff
 8001b2c:	40020000 	.word	0x40020000

08001b30 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001b38:	4b55      	ldr	r3, [pc, #340]	; (8001c90 <HAL_DMA_IRQHandler+0x160>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	221c      	movs	r2, #28
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2204      	movs	r2, #4
 8001b50:	409a      	lsls	r2, r3
 8001b52:	0013      	movs	r3, r2
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4013      	ands	r3, r2
 8001b58:	d027      	beq.n	8001baa <HAL_DMA_IRQHandler+0x7a>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d023      	beq.n	8001baa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d107      	bne.n	8001b7e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2104      	movs	r1, #4
 8001b7a:	438a      	bics	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001b7e:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <HAL_DMA_IRQHandler+0x160>)
 8001b80:	6859      	ldr	r1, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	221c      	movs	r2, #28
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_DMA_IRQHandler+0x160>)
 8001b90:	430a      	orrs	r2, r1
 8001b92:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d100      	bne.n	8001b9e <HAL_DMA_IRQHandler+0x6e>
 8001b9c:	e073      	b.n	8001c86 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	0010      	movs	r0, r2
 8001ba6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001ba8:	e06d      	b.n	8001c86 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	221c      	movs	r2, #28
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	0013      	movs	r3, r2
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d02e      	beq.n	8001c1c <HAL_DMA_IRQHandler+0xec>
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d02a      	beq.n	8001c1c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d10b      	bne.n	8001bea <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	210a      	movs	r1, #10
 8001bde:	438a      	bics	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2225      	movs	r2, #37	; 0x25
 8001be6:	2101      	movs	r1, #1
 8001be8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001bea:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <HAL_DMA_IRQHandler+0x160>)
 8001bec:	6859      	ldr	r1, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	221c      	movs	r2, #28
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <HAL_DMA_IRQHandler+0x160>)
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2224      	movs	r2, #36	; 0x24
 8001c04:	2100      	movs	r1, #0
 8001c06:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d03a      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	0010      	movs	r0, r2
 8001c18:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001c1a:	e034      	b.n	8001c86 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	221c      	movs	r2, #28
 8001c22:	4013      	ands	r3, r2
 8001c24:	2208      	movs	r2, #8
 8001c26:	409a      	lsls	r2, r3
 8001c28:	0013      	movs	r3, r2
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d02b      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x158>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2208      	movs	r2, #8
 8001c34:	4013      	ands	r3, r2
 8001c36:	d027      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	210e      	movs	r1, #14
 8001c44:	438a      	bics	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HAL_DMA_IRQHandler+0x160>)
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	221c      	movs	r2, #28
 8001c52:	4013      	ands	r3, r2
 8001c54:	2201      	movs	r2, #1
 8001c56:	409a      	lsls	r2, r3
 8001c58:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HAL_DMA_IRQHandler+0x160>)
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2225      	movs	r2, #37	; 0x25
 8001c68:	2101      	movs	r1, #1
 8001c6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2224      	movs	r2, #36	; 0x24
 8001c70:	2100      	movs	r1, #0
 8001c72:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	0010      	movs	r0, r2
 8001c84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	46c0      	nop			; (mov r8, r8)
}
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b004      	add	sp, #16
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40020000 	.word	0x40020000

08001c94 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2225      	movs	r2, #37	; 0x25
 8001ca0:	5c9b      	ldrb	r3, [r3, r2]
 8001ca2:	b2db      	uxtb	r3, r3
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b002      	add	sp, #8
 8001caa:	bd80      	pop	{r7, pc}

08001cac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001cbc:	4694      	mov	ip, r2
 8001cbe:	4463      	add	r3, ip
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	001a      	movs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	001a      	movs	r2, r3
 8001cce:	23ff      	movs	r3, #255	; 0xff
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	3b08      	subs	r3, #8
 8001cd4:	2114      	movs	r1, #20
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f7fe fa14 	bl	8000104 <__udivsi3>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001ce4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	221f      	movs	r2, #31
 8001cea:	4013      	ands	r3, r2
 8001cec:	2201      	movs	r2, #1
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b004      	add	sp, #16
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	10008200 	.word	0x10008200
 8001d00:	40020880 	.word	0x40020880

08001d04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	223f      	movs	r2, #63	; 0x3f
 8001d12:	4013      	ands	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d1a:	4694      	mov	ip, r2
 8001d1c:	4463      	add	r3, ip
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	001a      	movs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001d2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	4013      	ands	r3, r2
 8001d34:	2201      	movs	r2, #1
 8001d36:	409a      	lsls	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b004      	add	sp, #16
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	1000823f 	.word	0x1000823f
 8001d48:	40020940 	.word	0x40020940

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5a:	e147      	b.n	8001fec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	4091      	lsls	r1, r2
 8001d66:	000a      	movs	r2, r1
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d100      	bne.n	8001d74 <HAL_GPIO_Init+0x28>
 8001d72:	e138      	b.n	8001fe6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d005      	beq.n	8001d8c <HAL_GPIO_Init+0x40>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2203      	movs	r2, #3
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d130      	bne.n	8001dee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	0013      	movs	r3, r2
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	409a      	lsls	r2, r3
 8001dae:	0013      	movs	r3, r2
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	2201      	movs	r2, #1
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
 8001de0:	0013      	movs	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2203      	movs	r2, #3
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d017      	beq.n	8001e2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	409a      	lsls	r2, r3
 8001e08:	0013      	movs	r3, r2
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2203      	movs	r2, #3
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d123      	bne.n	8001e7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	58d3      	ldr	r3, [r2, r3]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2207      	movs	r2, #7
 8001e48:	4013      	ands	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	0013      	movs	r3, r2
 8001e52:	43da      	mvns	r2, r3
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2107      	movs	r1, #7
 8001e62:	400b      	ands	r3, r1
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	409a      	lsls	r2, r3
 8001e68:	0013      	movs	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	08da      	lsrs	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	0092      	lsls	r2, r2, #2
 8001e7a:	6939      	ldr	r1, [r7, #16]
 8001e7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	0013      	movs	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	23c0      	movs	r3, #192	; 0xc0
 8001eb8:	029b      	lsls	r3, r3, #10
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d100      	bne.n	8001ec0 <HAL_GPIO_Init+0x174>
 8001ebe:	e092      	b.n	8001fe6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ec0:	4a50      	ldr	r2, [pc, #320]	; (8002004 <HAL_GPIO_Init+0x2b8>)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3318      	adds	r3, #24
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	589b      	ldr	r3, [r3, r2]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	0013      	movs	r3, r2
 8001edc:	43da      	mvns	r2, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	23a0      	movs	r3, #160	; 0xa0
 8001ee8:	05db      	lsls	r3, r3, #23
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d013      	beq.n	8001f16 <HAL_GPIO_Init+0x1ca>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a45      	ldr	r2, [pc, #276]	; (8002008 <HAL_GPIO_Init+0x2bc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00d      	beq.n	8001f12 <HAL_GPIO_Init+0x1c6>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a44      	ldr	r2, [pc, #272]	; (800200c <HAL_GPIO_Init+0x2c0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d007      	beq.n	8001f0e <HAL_GPIO_Init+0x1c2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a43      	ldr	r2, [pc, #268]	; (8002010 <HAL_GPIO_Init+0x2c4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_GPIO_Init+0x1be>
 8001f06:	2303      	movs	r3, #3
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x1cc>
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	e004      	b.n	8001f18 <HAL_GPIO_Init+0x1cc>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e002      	b.n	8001f18 <HAL_GPIO_Init+0x1cc>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_GPIO_Init+0x1cc>
 8001f16:	2300      	movs	r3, #0
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	2103      	movs	r1, #3
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	00d2      	lsls	r2, r2, #3
 8001f20:	4093      	lsls	r3, r2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f28:	4936      	ldr	r1, [pc, #216]	; (8002004 <HAL_GPIO_Init+0x2b8>)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3318      	adds	r3, #24
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f36:	4b33      	ldr	r3, [pc, #204]	; (8002004 <HAL_GPIO_Init+0x2b8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	035b      	lsls	r3, r3, #13
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <HAL_GPIO_Init+0x2b8>)
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f60:	4b28      	ldr	r3, [pc, #160]	; (8002004 <HAL_GPIO_Init+0x2b8>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	43da      	mvns	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	039b      	lsls	r3, r3, #14
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <HAL_GPIO_Init+0x2b8>)
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f8a:	4a1e      	ldr	r2, [pc, #120]	; (8002004 <HAL_GPIO_Init+0x2b8>)
 8001f8c:	2384      	movs	r3, #132	; 0x84
 8001f8e:	58d3      	ldr	r3, [r2, r3]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43da      	mvns	r2, r3
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	029b      	lsls	r3, r3, #10
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fb0:	4914      	ldr	r1, [pc, #80]	; (8002004 <HAL_GPIO_Init+0x2b8>)
 8001fb2:	2284      	movs	r2, #132	; 0x84
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001fb8:	4a12      	ldr	r2, [pc, #72]	; (8002004 <HAL_GPIO_Init+0x2b8>)
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	58d3      	ldr	r3, [r2, r3]
 8001fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	025b      	lsls	r3, r3, #9
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fde:	4909      	ldr	r1, [pc, #36]	; (8002004 <HAL_GPIO_Init+0x2b8>)
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	40da      	lsrs	r2, r3
 8001ff4:	1e13      	subs	r3, r2, #0
 8001ff6:	d000      	beq.n	8001ffa <HAL_GPIO_Init+0x2ae>
 8001ff8:	e6b0      	b.n	8001d5c <HAL_GPIO_Init+0x10>
  }
}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b006      	add	sp, #24
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021800 	.word	0x40021800
 8002008:	50000400 	.word	0x50000400
 800200c:	50000800 	.word	0x50000800
 8002010:	50000c00 	.word	0x50000c00

08002014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	0008      	movs	r0, r1
 800201e:	0011      	movs	r1, r2
 8002020:	1cbb      	adds	r3, r7, #2
 8002022:	1c02      	adds	r2, r0, #0
 8002024:	801a      	strh	r2, [r3, #0]
 8002026:	1c7b      	adds	r3, r7, #1
 8002028:	1c0a      	adds	r2, r1, #0
 800202a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800202c:	1c7b      	adds	r3, r7, #1
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d004      	beq.n	800203e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002034:	1cbb      	adds	r3, r7, #2
 8002036:	881a      	ldrh	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800203c:	e003      	b.n	8002046 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800203e:	1cbb      	adds	r3, r7, #2
 8002040:	881a      	ldrh	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	46bd      	mov	sp, r7
 800204a:	b002      	add	sp, #8
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	000a      	movs	r2, r1
 8002058:	1cbb      	adds	r3, r7, #2
 800205a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002062:	1cbb      	adds	r3, r7, #2
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4013      	ands	r3, r2
 800206a:	041a      	lsls	r2, r3, #16
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	43db      	mvns	r3, r3
 8002070:	1cb9      	adds	r1, r7, #2
 8002072:	8809      	ldrh	r1, [r1, #0]
 8002074:	400b      	ands	r3, r1
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	619a      	str	r2, [r3, #24]
}
 800207c:	46c0      	nop			; (mov r8, r8)
 800207e:	46bd      	mov	sp, r7
 8002080:	b004      	add	sp, #16
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e082      	b.n	800219c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2241      	movs	r2, #65	; 0x41
 800209a:	5c9b      	ldrb	r3, [r3, r2]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d107      	bne.n	80020b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2240      	movs	r2, #64	; 0x40
 80020a6:	2100      	movs	r1, #0
 80020a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7fe fc31 	bl	8000914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2241      	movs	r2, #65	; 0x41
 80020b6:	2124      	movs	r1, #36	; 0x24
 80020b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	438a      	bics	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4934      	ldr	r1, [pc, #208]	; (80021a4 <HAL_I2C_Init+0x120>)
 80020d4:	400a      	ands	r2, r1
 80020d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4931      	ldr	r1, [pc, #196]	; (80021a8 <HAL_I2C_Init+0x124>)
 80020e4:	400a      	ands	r2, r1
 80020e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d108      	bne.n	8002102 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	0209      	lsls	r1, r1, #8
 80020fc:	430a      	orrs	r2, r1
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	e007      	b.n	8002112 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2184      	movs	r1, #132	; 0x84
 800210c:	0209      	lsls	r1, r1, #8
 800210e:	430a      	orrs	r2, r1
 8002110:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d104      	bne.n	8002124 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	491f      	ldr	r1, [pc, #124]	; (80021ac <HAL_I2C_Init+0x128>)
 8002130:	430a      	orrs	r2, r1
 8002132:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	491a      	ldr	r1, [pc, #104]	; (80021a8 <HAL_I2C_Init+0x124>)
 8002140:	400a      	ands	r2, r1
 8002142:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	431a      	orrs	r2, r3
 800214e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69d9      	ldr	r1, [r3, #28]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1a      	ldr	r2, [r3, #32]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2101      	movs	r1, #1
 800217a:	430a      	orrs	r2, r1
 800217c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2241      	movs	r2, #65	; 0x41
 8002188:	2120      	movs	r1, #32
 800218a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2242      	movs	r2, #66	; 0x42
 8002196:	2100      	movs	r1, #0
 8002198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	f0ffffff 	.word	0xf0ffffff
 80021a8:	ffff7fff 	.word	0xffff7fff
 80021ac:	02008000 	.word	0x02008000

080021b0 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	1dbb      	adds	r3, r7, #6
 80021be:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2241      	movs	r2, #65	; 0x41
 80021c4:	5c9b      	ldrb	r3, [r3, r2]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	001a      	movs	r2, r3
 80021ca:	2328      	movs	r3, #40	; 0x28
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b28      	cmp	r3, #40	; 0x28
 80021d0:	d000      	beq.n	80021d4 <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 80021d2:	e08f      	b.n	80022f4 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 80021da:	1dbb      	adds	r3, r7, #6
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2280      	movs	r2, #128	; 0x80
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e083      	b.n	80022f6 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80021ee:	4a44      	ldr	r2, [pc, #272]	; (8002300 <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	0011      	movs	r1, r2
 80021f4:	0018      	movs	r0, r3
 80021f6:	f001 faad 	bl	8003754 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2240      	movs	r2, #64	; 0x40
 80021fe:	5c9b      	ldrb	r3, [r3, r2]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 8002204:	2302      	movs	r3, #2
 8002206:	e076      	b.n	80022f6 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2240      	movs	r2, #64	; 0x40
 800220c:	2101      	movs	r1, #1
 800220e:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2241      	movs	r2, #65	; 0x41
 8002214:	5c9b      	ldrb	r3, [r3, r2]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b2a      	cmp	r3, #42	; 0x2a
 800221a:	d12c      	bne.n	8002276 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2102      	movs	r1, #2
 8002220:	0018      	movs	r0, r3
 8002222:	f001 fa97 	bl	8003754 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	401a      	ands	r2, r3
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	429a      	cmp	r2, r3
 8002238:	d11d      	bne.n	8002276 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	492f      	ldr	r1, [pc, #188]	; (8002304 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 8002246:	400a      	ands	r2, r1
 8002248:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	2b00      	cmp	r3, #0
 8002250:	d011      	beq.n	8002276 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002256:	4a2c      	ldr	r2, [pc, #176]	; (8002308 <HAL_I2C_Slave_Seq_Transmit_IT+0x158>)
 8002258:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	0018      	movs	r0, r3
 8002260:	f7ff fbfc 	bl	8001a5c <HAL_DMA_Abort_IT>
 8002264:	1e03      	subs	r3, r0, #0
 8002266:	d006      	beq.n	8002276 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	0018      	movs	r0, r3
 8002274:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2241      	movs	r2, #65	; 0x41
 800227a:	2129      	movs	r1, #41	; 0x29
 800227c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2242      	movs	r2, #66	; 0x42
 8002282:	2120      	movs	r1, #32
 8002284:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	491b      	ldr	r1, [pc, #108]	; (8002304 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 8002298:	400a      	ands	r2, r1
 800229a:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1dba      	adds	r2, r7, #6
 80022a6:	8812      	ldrh	r2, [r2, #0]
 80022a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4a13      	ldr	r2, [pc, #76]	; (800230c <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 80022be:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	0c1b      	lsrs	r3, r3, #16
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2201      	movs	r2, #1
 80022cc:	4013      	ands	r3, r2
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d103      	bne.n	80022dc <HAL_I2C_Slave_Seq_Transmit_IT+0x12c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2208      	movs	r2, #8
 80022da:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2240      	movs	r2, #64	; 0x40
 80022e0:	2100      	movs	r1, #0
 80022e2:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80022e4:	4a06      	ldr	r2, [pc, #24]	; (8002300 <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	0011      	movs	r1, r2
 80022ea:	0018      	movs	r0, r3
 80022ec:	f001 f9ca 	bl	8003684 <I2C_Enable_IRQ>

    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e000      	b.n	80022f6 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
  }
  else
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
  }
}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b004      	add	sp, #16
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	00008001 	.word	0x00008001
 8002304:	ffff7fff 	.word	0xffff7fff
 8002308:	080035d3 	.word	0x080035d3
 800230c:	08002615 	.word	0x08002615

08002310 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	1dbb      	adds	r3, r7, #6
 800231e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2241      	movs	r2, #65	; 0x41
 8002324:	5c9b      	ldrb	r3, [r3, r2]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	001a      	movs	r2, r3
 800232a:	2328      	movs	r3, #40	; 0x28
 800232c:	4013      	ands	r3, r2
 800232e:	2b28      	cmp	r3, #40	; 0x28
 8002330:	d000      	beq.n	8002334 <HAL_I2C_Slave_Seq_Receive_IT+0x24>
 8002332:	e08f      	b.n	8002454 <HAL_I2C_Slave_Seq_Receive_IT+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_I2C_Slave_Seq_Receive_IT+0x32>
 800233a:	1dbb      	adds	r3, r7, #6
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d105      	bne.n	800234e <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2280      	movs	r2, #128	; 0x80
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e083      	b.n	8002456 <HAL_I2C_Slave_Seq_Receive_IT+0x146>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800234e:	4a44      	ldr	r2, [pc, #272]	; (8002460 <HAL_I2C_Slave_Seq_Receive_IT+0x150>)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	0011      	movs	r1, r2
 8002354:	0018      	movs	r0, r3
 8002356:	f001 f9fd 	bl	8003754 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2240      	movs	r2, #64	; 0x40
 800235e:	5c9b      	ldrb	r3, [r3, r2]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_I2C_Slave_Seq_Receive_IT+0x58>
 8002364:	2302      	movs	r3, #2
 8002366:	e076      	b.n	8002456 <HAL_I2C_Slave_Seq_Receive_IT+0x146>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2240      	movs	r2, #64	; 0x40
 800236c:	2101      	movs	r1, #1
 800236e:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2241      	movs	r2, #65	; 0x41
 8002374:	5c9b      	ldrb	r3, [r3, r2]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b29      	cmp	r3, #41	; 0x29
 800237a:	d12c      	bne.n	80023d6 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2101      	movs	r1, #1
 8002380:	0018      	movs	r0, r3
 8002382:	f001 f9e7 	bl	8003754 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	01db      	lsls	r3, r3, #7
 8002390:	401a      	ands	r2, r3
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	01db      	lsls	r3, r3, #7
 8002396:	429a      	cmp	r2, r3
 8002398:	d11d      	bne.n	80023d6 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	492f      	ldr	r1, [pc, #188]	; (8002464 <HAL_I2C_Slave_Seq_Receive_IT+0x154>)
 80023a6:	400a      	ands	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d011      	beq.n	80023d6 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	4a2c      	ldr	r2, [pc, #176]	; (8002468 <HAL_I2C_Slave_Seq_Receive_IT+0x158>)
 80023b8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	0018      	movs	r0, r3
 80023c0:	f7ff fb4c 	bl	8001a5c <HAL_DMA_Abort_IT>
 80023c4:	1e03      	subs	r3, r0, #0
 80023c6:	d006      	beq.n	80023d6 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d2:	0018      	movs	r0, r3
 80023d4:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2241      	movs	r2, #65	; 0x41
 80023da:	212a      	movs	r1, #42	; 0x2a
 80023dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2242      	movs	r2, #66	; 0x42
 80023e2:	2120      	movs	r1, #32
 80023e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	491d      	ldr	r1, [pc, #116]	; (800246c <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 80023f8:	400a      	ands	r2, r1
 80023fa:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1dba      	adds	r2, r7, #6
 8002406:	8812      	ldrh	r2, [r2, #0]
 8002408:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4a14      	ldr	r2, [pc, #80]	; (8002470 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 800241e:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	0c1b      	lsrs	r3, r3, #16
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2201      	movs	r2, #1
 800242c:	4013      	ands	r3, r2
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d103      	bne.n	800243c <HAL_I2C_Slave_Seq_Receive_IT+0x12c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2208      	movs	r2, #8
 800243a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2240      	movs	r2, #64	; 0x40
 8002440:	2100      	movs	r1, #0
 8002442:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002444:	4a06      	ldr	r2, [pc, #24]	; (8002460 <HAL_I2C_Slave_Seq_Receive_IT+0x150>)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	0011      	movs	r1, r2
 800244a:	0018      	movs	r0, r3
 800244c:	f001 f91a 	bl	8003684 <I2C_Enable_IRQ>

    return HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	e000      	b.n	8002456 <HAL_I2C_Slave_Seq_Receive_IT+0x146>
  }
  else
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
  }
}
 8002456:	0018      	movs	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	b004      	add	sp, #16
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	00008002 	.word	0x00008002
 8002464:	ffffbfff 	.word	0xffffbfff
 8002468:	080035d3 	.word	0x080035d3
 800246c:	ffff7fff 	.word	0xffff7fff
 8002470:	08002615 	.word	0x08002615

08002474 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2241      	movs	r2, #65	; 0x41
 8002480:	5c9b      	ldrb	r3, [r3, r2]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b20      	cmp	r3, #32
 8002486:	d10f      	bne.n	80024a8 <HAL_I2C_EnableListen_IT+0x34>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2241      	movs	r2, #65	; 0x41
 800248c:	2128      	movs	r1, #40	; 0x28
 800248e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a08      	ldr	r2, [pc, #32]	; (80024b4 <HAL_I2C_EnableListen_IT+0x40>)
 8002494:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	021a      	lsls	r2, r3, #8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	0011      	movs	r1, r2
 800249e:	0018      	movs	r0, r3
 80024a0:	f001 f8f0 	bl	8003684 <I2C_Enable_IRQ>

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <HAL_I2C_EnableListen_IT+0x36>
  }
  else
  {
    return HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
  }
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	08002615 	.word	0x08002615

080024b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	68f9      	ldr	r1, [r7, #12]
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	4798      	blx	r3
  }
}
 80024e4:	46c0      	nop			; (mov r8, r8)
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b004      	add	sp, #16
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	001a      	movs	r2, r3
 800250a:	2301      	movs	r3, #1
 800250c:	4013      	ands	r3, r2
 800250e:	d010      	beq.n	8002532 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	09db      	lsrs	r3, r3, #7
 8002514:	001a      	movs	r2, r3
 8002516:	2301      	movs	r3, #1
 8002518:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800251a:	d00a      	beq.n	8002532 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002520:	2201      	movs	r2, #1
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	0052      	lsls	r2, r2, #1
 8002530:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	0a9b      	lsrs	r3, r3, #10
 8002536:	001a      	movs	r2, r3
 8002538:	2301      	movs	r3, #1
 800253a:	4013      	ands	r3, r2
 800253c:	d010      	beq.n	8002560 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	09db      	lsrs	r3, r3, #7
 8002542:	001a      	movs	r2, r3
 8002544:	2301      	movs	r3, #1
 8002546:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002548:	d00a      	beq.n	8002560 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	2208      	movs	r2, #8
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2280      	movs	r2, #128	; 0x80
 800255c:	00d2      	lsls	r2, r2, #3
 800255e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	0a5b      	lsrs	r3, r3, #9
 8002564:	001a      	movs	r2, r3
 8002566:	2301      	movs	r3, #1
 8002568:	4013      	ands	r3, r2
 800256a:	d010      	beq.n	800258e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	09db      	lsrs	r3, r3, #7
 8002570:	001a      	movs	r2, r3
 8002572:	2301      	movs	r3, #1
 8002574:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002576:	d00a      	beq.n	800258e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	2202      	movs	r2, #2
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2280      	movs	r2, #128	; 0x80
 800258a:	0092      	lsls	r2, r2, #2
 800258c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	220b      	movs	r2, #11
 8002598:	4013      	ands	r3, r2
 800259a:	d005      	beq.n	80025a8 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	0011      	movs	r1, r2
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 fee8 	bl	8003378 <I2C_ITError>
  }
}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b006      	add	sp, #24
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b002      	add	sp, #8
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b002      	add	sp, #8
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	b002      	add	sp, #8
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b002      	add	sp, #8
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b002      	add	sp, #8
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}

08002614 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2240      	movs	r2, #64	; 0x40
 800262e:	5c9b      	ldrb	r3, [r3, r2]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <I2C_Slave_ISR_IT+0x24>
 8002634:	2302      	movs	r3, #2
 8002636:	e0fa      	b.n	800282e <I2C_Slave_ISR_IT+0x21a>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2240      	movs	r2, #64	; 0x40
 800263c:	2101      	movs	r1, #1
 800263e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	001a      	movs	r2, r3
 8002646:	2301      	movs	r3, #1
 8002648:	4013      	ands	r3, r2
 800264a:	d00b      	beq.n	8002664 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	001a      	movs	r2, r3
 8002652:	2301      	movs	r3, #1
 8002654:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002656:	d005      	beq.n	8002664 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	0011      	movs	r1, r2
 800265e:	0018      	movs	r0, r3
 8002660:	f000 fd0c 	bl	800307c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	001a      	movs	r2, r3
 800266a:	2301      	movs	r3, #1
 800266c:	4013      	ands	r3, r2
 800266e:	d054      	beq.n	800271a <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	001a      	movs	r2, r3
 8002676:	2301      	movs	r3, #1
 8002678:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800267a:	d04e      	beq.n	800271a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d12d      	bne.n	80026e2 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2241      	movs	r2, #65	; 0x41
 800268a:	5c9b      	ldrb	r3, [r3, r2]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b28      	cmp	r3, #40	; 0x28
 8002690:	d10b      	bne.n	80026aa <I2C_Slave_ISR_IT+0x96>
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	049b      	lsls	r3, r3, #18
 8002698:	429a      	cmp	r2, r3
 800269a:	d106      	bne.n	80026aa <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	0011      	movs	r1, r2
 80026a2:	0018      	movs	r0, r3
 80026a4:	f000 fe0e 	bl	80032c4 <I2C_ITListenCplt>
 80026a8:	e036      	b.n	8002718 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2241      	movs	r2, #65	; 0x41
 80026ae:	5c9b      	ldrb	r3, [r3, r2]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b29      	cmp	r3, #41	; 0x29
 80026b4:	d110      	bne.n	80026d8 <I2C_Slave_ISR_IT+0xc4>
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	4a5f      	ldr	r2, [pc, #380]	; (8002838 <I2C_Slave_ISR_IT+0x224>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00c      	beq.n	80026d8 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2210      	movs	r2, #16
 80026c4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 ff60 	bl	800358e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	0018      	movs	r0, r3
 80026d2:	f000 fb9b 	bl	8002e0c <I2C_ITSlaveSeqCplt>
 80026d6:	e01f      	b.n	8002718 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2210      	movs	r2, #16
 80026de:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80026e0:	e09d      	b.n	800281e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2210      	movs	r2, #16
 80026e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	2204      	movs	r2, #4
 80026f0:	431a      	orrs	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <I2C_Slave_ISR_IT+0xf4>
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	045b      	lsls	r3, r3, #17
 8002702:	429a      	cmp	r2, r3
 8002704:	d000      	beq.n	8002708 <I2C_Slave_ISR_IT+0xf4>
 8002706:	e08a      	b.n	800281e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	0011      	movs	r1, r2
 8002710:	0018      	movs	r0, r3
 8002712:	f000 fe31 	bl	8003378 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002716:	e082      	b.n	800281e <I2C_Slave_ISR_IT+0x20a>
 8002718:	e081      	b.n	800281e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	001a      	movs	r2, r3
 8002720:	2301      	movs	r3, #1
 8002722:	4013      	ands	r3, r2
 8002724:	d031      	beq.n	800278a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	001a      	movs	r2, r3
 800272c:	2301      	movs	r3, #1
 800272e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002730:	d02b      	beq.n	800278a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d018      	beq.n	800276e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d154      	bne.n	8002822 <I2C_Slave_ISR_IT+0x20e>
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	4a2f      	ldr	r2, [pc, #188]	; (8002838 <I2C_Slave_ISR_IT+0x224>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d050      	beq.n	8002822 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	0018      	movs	r0, r3
 8002784:	f000 fb42 	bl	8002e0c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002788:	e04b      	b.n	8002822 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	08db      	lsrs	r3, r3, #3
 800278e:	001a      	movs	r2, r3
 8002790:	2301      	movs	r3, #1
 8002792:	4013      	ands	r3, r2
 8002794:	d00c      	beq.n	80027b0 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	08db      	lsrs	r3, r3, #3
 800279a:	001a      	movs	r2, r3
 800279c:	2301      	movs	r3, #1
 800279e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80027a0:	d006      	beq.n	80027b0 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	0011      	movs	r1, r2
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 fa49 	bl	8002c40 <I2C_ITAddrCplt>
 80027ae:	e039      	b.n	8002824 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	001a      	movs	r2, r3
 80027b6:	2301      	movs	r3, #1
 80027b8:	4013      	ands	r3, r2
 80027ba:	d033      	beq.n	8002824 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	001a      	movs	r2, r3
 80027c2:	2301      	movs	r3, #1
 80027c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80027c6:	d02d      	beq.n	8002824 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d018      	beq.n	8002804 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	781a      	ldrb	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	851a      	strh	r2, [r3, #40]	; 0x28
 8002802:	e00f      	b.n	8002824 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	045b      	lsls	r3, r3, #17
 800280a:	429a      	cmp	r2, r3
 800280c:	d002      	beq.n	8002814 <I2C_Slave_ISR_IT+0x200>
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d107      	bne.n	8002824 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	0018      	movs	r0, r3
 8002818:	f000 faf8 	bl	8002e0c <I2C_ITSlaveSeqCplt>
 800281c:	e002      	b.n	8002824 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	e000      	b.n	8002824 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8002822:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2240      	movs	r2, #64	; 0x40
 8002828:	2100      	movs	r1, #0
 800282a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	0018      	movs	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	b006      	add	sp, #24
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	ffff0000 	.word	0xffff0000

0800283c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b089      	sub	sp, #36	; 0x24
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2240      	movs	r2, #64	; 0x40
 800284c:	5c9b      	ldrb	r3, [r3, r2]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <I2C_Master_ISR_DMA+0x1a>
 8002852:	2302      	movs	r3, #2
 8002854:	e0f7      	b.n	8002a46 <I2C_Master_ISR_DMA+0x20a>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2240      	movs	r2, #64	; 0x40
 800285a:	2101      	movs	r1, #1
 800285c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	001a      	movs	r2, r3
 8002864:	2301      	movs	r3, #1
 8002866:	4013      	ands	r3, r2
 8002868:	d019      	beq.n	800289e <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	001a      	movs	r2, r3
 8002870:	2301      	movs	r3, #1
 8002872:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002874:	d013      	beq.n	800289e <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2210      	movs	r2, #16
 800287c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	2204      	movs	r2, #4
 8002884:	431a      	orrs	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2120      	movs	r1, #32
 800288e:	0018      	movs	r0, r3
 8002890:	f000 fef8 	bl	8003684 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	0018      	movs	r0, r3
 8002898:	f000 fe79 	bl	800358e <I2C_Flush_TXDR>
 800289c:	e0ce      	b.n	8002a3c <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	09db      	lsrs	r3, r3, #7
 80028a2:	001a      	movs	r2, r3
 80028a4:	2301      	movs	r3, #1
 80028a6:	4013      	ands	r3, r2
 80028a8:	d100      	bne.n	80028ac <I2C_Master_ISR_DMA+0x70>
 80028aa:	e07e      	b.n	80029aa <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	099b      	lsrs	r3, r3, #6
 80028b0:	001a      	movs	r2, r3
 80028b2:	2301      	movs	r3, #1
 80028b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80028b6:	d100      	bne.n	80028ba <I2C_Master_ISR_DMA+0x7e>
 80028b8:	e077      	b.n	80029aa <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2140      	movs	r1, #64	; 0x40
 80028c6:	438a      	bics	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d055      	beq.n	8002980 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	b29a      	uxth	r2, r3
 80028dc:	2312      	movs	r3, #18
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	0592      	lsls	r2, r2, #22
 80028e2:	0d92      	lsrs	r2, r2, #22
 80028e4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2bff      	cmp	r3, #255	; 0xff
 80028ee:	d906      	bls.n	80028fe <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	22ff      	movs	r2, #255	; 0xff
 80028f4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	045b      	lsls	r3, r3, #17
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	e010      	b.n	8002920 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	4a50      	ldr	r2, [pc, #320]	; (8002a50 <I2C_Master_ISR_DMA+0x214>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d003      	beq.n	800291a <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	e002      	b.n	8002920 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	049b      	lsls	r3, r3, #18
 800291e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	b2da      	uxtb	r2, r3
 8002926:	697c      	ldr	r4, [r7, #20]
 8002928:	2312      	movs	r3, #18
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	8819      	ldrh	r1, [r3, #0]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	2300      	movs	r3, #0
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	0023      	movs	r3, r4
 8002936:	f000 fe6b 	bl	8003610 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2241      	movs	r2, #65	; 0x41
 8002950:	5c9b      	ldrb	r3, [r3, r2]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b22      	cmp	r3, #34	; 0x22
 8002956:	d109      	bne.n	800296c <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2180      	movs	r1, #128	; 0x80
 8002964:	0209      	lsls	r1, r1, #8
 8002966:	430a      	orrs	r2, r1
 8002968:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800296a:	e067      	b.n	8002a3c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2180      	movs	r1, #128	; 0x80
 8002978:	01c9      	lsls	r1, r1, #7
 800297a:	430a      	orrs	r2, r1
 800297c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800297e:	e05d      	b.n	8002a3c <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	049b      	lsls	r3, r3, #18
 800298a:	401a      	ands	r2, r3
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	049b      	lsls	r3, r3, #18
 8002990:	429a      	cmp	r2, r3
 8002992:	d004      	beq.n	800299e <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	0018      	movs	r0, r3
 8002998:	f000 f9f6 	bl	8002d88 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800299c:	e04e      	b.n	8002a3c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2140      	movs	r1, #64	; 0x40
 80029a2:	0018      	movs	r0, r3
 80029a4:	f000 fce8 	bl	8003378 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80029a8:	e048      	b.n	8002a3c <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	001a      	movs	r2, r3
 80029b0:	2301      	movs	r3, #1
 80029b2:	4013      	ands	r3, r2
 80029b4:	d02e      	beq.n	8002a14 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	001a      	movs	r2, r3
 80029bc:	2301      	movs	r3, #1
 80029be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80029c0:	d028      	beq.n	8002a14 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d11d      	bne.n	8002a08 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	049b      	lsls	r3, r3, #18
 80029d6:	401a      	ands	r2, r3
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	049b      	lsls	r3, r3, #18
 80029dc:	429a      	cmp	r2, r3
 80029de:	d02c      	beq.n	8002a3a <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <I2C_Master_ISR_DMA+0x214>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d109      	bne.n	80029fe <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2180      	movs	r1, #128	; 0x80
 80029f6:	01c9      	lsls	r1, r1, #7
 80029f8:	430a      	orrs	r2, r1
 80029fa:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80029fc:	e01d      	b.n	8002a3a <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 f9c1 	bl	8002d88 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002a06:	e018      	b.n	8002a3a <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2140      	movs	r1, #64	; 0x40
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f000 fcb3 	bl	8003378 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002a12:	e012      	b.n	8002a3a <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	001a      	movs	r2, r3
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d00d      	beq.n	8002a3c <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	001a      	movs	r2, r3
 8002a26:	2301      	movs	r3, #1
 8002a28:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a2a:	d007      	beq.n	8002a3c <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	0011      	movs	r1, r2
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 fa50 	bl	8002ed8 <I2C_ITMasterCplt>
 8002a38:	e000      	b.n	8002a3c <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8002a3a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2240      	movs	r2, #64	; 0x40
 8002a40:	2100      	movs	r1, #0
 8002a42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b007      	add	sp, #28
 8002a4c:	bd90      	pop	{r4, r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	ffff0000 	.word	0xffff0000

08002a54 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2240      	movs	r2, #64	; 0x40
 8002a6e:	5c9b      	ldrb	r3, [r3, r2]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <I2C_Slave_ISR_DMA+0x24>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e0dd      	b.n	8002c34 <I2C_Slave_ISR_DMA+0x1e0>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	001a      	movs	r2, r3
 8002a86:	2301      	movs	r3, #1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d00b      	beq.n	8002aa4 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	001a      	movs	r2, r3
 8002a92:	2301      	movs	r3, #1
 8002a94:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a96:	d005      	beq.n	8002aa4 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	0011      	movs	r1, r2
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 faec 	bl	800307c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	001a      	movs	r2, r3
 8002aaa:	2301      	movs	r3, #1
 8002aac:	4013      	ands	r3, r2
 8002aae:	d100      	bne.n	8002ab2 <I2C_Slave_ISR_DMA+0x5e>
 8002ab0:	e0a9      	b.n	8002c06 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	2301      	movs	r3, #1
 8002aba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002abc:	d100      	bne.n	8002ac0 <I2C_Slave_ISR_DMA+0x6c>
 8002abe:	e0a2      	b.n	8002c06 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	0b9b      	lsrs	r3, r3, #14
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d106      	bne.n	8002ada <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	0bdb      	lsrs	r3, r3, #15
 8002ad0:	001a      	movs	r2, r3
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ad6:	d100      	bne.n	8002ada <I2C_Slave_ISR_DMA+0x86>
 8002ad8:	e08e      	b.n	8002bf8 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00d      	beq.n	8002afe <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0bdb      	lsrs	r3, r3, #15
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	2301      	movs	r3, #1
 8002aea:	4013      	ands	r3, r2
 8002aec:	d007      	beq.n	8002afe <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8002afa:	2301      	movs	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	0b9b      	lsrs	r3, r3, #14
 8002b0a:	001a      	movs	r2, r3
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d007      	beq.n	8002b22 <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d12d      	bne.n	8002b84 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2241      	movs	r2, #65	; 0x41
 8002b2c:	5c9b      	ldrb	r3, [r3, r2]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b28      	cmp	r3, #40	; 0x28
 8002b32:	d10b      	bne.n	8002b4c <I2C_Slave_ISR_DMA+0xf8>
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	049b      	lsls	r3, r3, #18
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d106      	bne.n	8002b4c <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	0011      	movs	r1, r2
 8002b44:	0018      	movs	r0, r3
 8002b46:	f000 fbbd 	bl	80032c4 <I2C_ITListenCplt>
 8002b4a:	e054      	b.n	8002bf6 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2241      	movs	r2, #65	; 0x41
 8002b50:	5c9b      	ldrb	r3, [r3, r2]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b29      	cmp	r3, #41	; 0x29
 8002b56:	d110      	bne.n	8002b7a <I2C_Slave_ISR_DMA+0x126>
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	4a38      	ldr	r2, [pc, #224]	; (8002c3c <I2C_Slave_ISR_DMA+0x1e8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00c      	beq.n	8002b7a <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2210      	movs	r2, #16
 8002b66:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 fd0f 	bl	800358e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	0018      	movs	r0, r3
 8002b74:	f000 f94a 	bl	8002e0c <I2C_ITSlaveSeqCplt>
 8002b78:	e03d      	b.n	8002bf6 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2210      	movs	r2, #16
 8002b80:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002b82:	e03e      	b.n	8002c02 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2210      	movs	r2, #16
 8002b8a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	2204      	movs	r2, #4
 8002b92:	431a      	orrs	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002b98:	2317      	movs	r3, #23
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	2141      	movs	r1, #65	; 0x41
 8002ba0:	5c52      	ldrb	r2, [r2, r1]
 8002ba2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d004      	beq.n	8002bb4 <I2C_Slave_ISR_DMA+0x160>
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	045b      	lsls	r3, r3, #17
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d126      	bne.n	8002c02 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bb4:	2217      	movs	r2, #23
 8002bb6:	18bb      	adds	r3, r7, r2
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b21      	cmp	r3, #33	; 0x21
 8002bbc:	d003      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x172>
 8002bbe:	18bb      	adds	r3, r7, r2
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b29      	cmp	r3, #41	; 0x29
 8002bc4:	d103      	bne.n	8002bce <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2221      	movs	r2, #33	; 0x21
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
 8002bcc:	e00b      	b.n	8002be6 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002bce:	2217      	movs	r2, #23
 8002bd0:	18bb      	adds	r3, r7, r2
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b22      	cmp	r3, #34	; 0x22
 8002bd6:	d003      	beq.n	8002be0 <I2C_Slave_ISR_DMA+0x18c>
 8002bd8:	18bb      	adds	r3, r7, r2
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8002bde:	d102      	bne.n	8002be6 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2222      	movs	r2, #34	; 0x22
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	0011      	movs	r1, r2
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 fbc2 	bl	8003378 <I2C_ITError>
      if (treatdmanack == 1U)
 8002bf4:	e005      	b.n	8002c02 <I2C_Slave_ISR_DMA+0x1ae>
 8002bf6:	e004      	b.n	8002c02 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c00:	e013      	b.n	8002c2a <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8002c02:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c04:	e011      	b.n	8002c2a <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	08db      	lsrs	r3, r3, #3
 8002c0a:	001a      	movs	r2, r3
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d00b      	beq.n	8002c2a <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	08db      	lsrs	r3, r3, #3
 8002c16:	001a      	movs	r2, r3
 8002c18:	2301      	movs	r3, #1
 8002c1a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c1c:	d005      	beq.n	8002c2a <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	0011      	movs	r1, r2
 8002c24:	0018      	movs	r0, r3
 8002c26:	f000 f80b 	bl	8002c40 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2240      	movs	r2, #64	; 0x40
 8002c2e:	2100      	movs	r1, #0
 8002c30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b008      	add	sp, #32
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	ffff0000 	.word	0xffff0000

08002c40 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c40:	b5b0      	push	{r4, r5, r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2241      	movs	r2, #65	; 0x41
 8002c4e:	5c9b      	ldrb	r3, [r3, r2]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	001a      	movs	r2, r3
 8002c54:	2328      	movs	r3, #40	; 0x28
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b28      	cmp	r3, #40	; 0x28
 8002c5a:	d000      	beq.n	8002c5e <I2C_ITAddrCplt+0x1e>
 8002c5c:	e088      	b.n	8002d70 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	250f      	movs	r5, #15
 8002c6a:	197b      	adds	r3, r7, r5
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	400a      	ands	r2, r1
 8002c70:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	0c1b      	lsrs	r3, r3, #16
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	200c      	movs	r0, #12
 8002c7e:	183b      	adds	r3, r7, r0
 8002c80:	21fe      	movs	r1, #254	; 0xfe
 8002c82:	400a      	ands	r2, r1
 8002c84:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	240a      	movs	r4, #10
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	0592      	lsls	r2, r2, #22
 8002c94:	0d92      	lsrs	r2, r2, #22
 8002c96:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	21fe      	movs	r1, #254	; 0xfe
 8002ca6:	400a      	ands	r2, r1
 8002ca8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d148      	bne.n	8002d44 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002cb2:	0021      	movs	r1, r4
 8002cb4:	187b      	adds	r3, r7, r1
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	09db      	lsrs	r3, r3, #7
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	183b      	adds	r3, r7, r0
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	4053      	eors	r3, r2
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	001a      	movs	r2, r3
 8002cc6:	2306      	movs	r3, #6
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d120      	bne.n	8002d0e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002ccc:	183b      	adds	r3, r7, r0
 8002cce:	187a      	adds	r2, r7, r1
 8002cd0:	8812      	ldrh	r2, [r2, #0]
 8002cd2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d14c      	bne.n	8002d80 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2240      	movs	r2, #64	; 0x40
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cfc:	183b      	adds	r3, r7, r0
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	197b      	adds	r3, r7, r5
 8002d02:	7819      	ldrb	r1, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	0018      	movs	r0, r3
 8002d08:	f7fd fcf6 	bl	80006f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d0c:	e038      	b.n	8002d80 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8002d0e:	240c      	movs	r4, #12
 8002d10:	193b      	adds	r3, r7, r4
 8002d12:	2208      	movs	r2, #8
 8002d14:	18ba      	adds	r2, r7, r2
 8002d16:	8812      	ldrh	r2, [r2, #0]
 8002d18:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	021a      	lsls	r2, r3, #8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0011      	movs	r1, r2
 8002d22:	0018      	movs	r0, r3
 8002d24:	f000 fd16 	bl	8003754 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2240      	movs	r2, #64	; 0x40
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d30:	193b      	adds	r3, r7, r4
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	230f      	movs	r3, #15
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	7819      	ldrb	r1, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7fd fcdb 	bl	80006f8 <HAL_I2C_AddrCallback>
}
 8002d42:	e01d      	b.n	8002d80 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	021a      	lsls	r2, r3, #8
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f000 fd01 	bl	8003754 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2240      	movs	r2, #64	; 0x40
 8002d56:	2100      	movs	r1, #0
 8002d58:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d5a:	230c      	movs	r3, #12
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	881a      	ldrh	r2, [r3, #0]
 8002d60:	230f      	movs	r3, #15
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	7819      	ldrb	r1, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7fd fcc5 	bl	80006f8 <HAL_I2C_AddrCallback>
}
 8002d6e:	e007      	b.n	8002d80 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2208      	movs	r2, #8
 8002d76:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2240      	movs	r2, #64	; 0x40
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	5499      	strb	r1, [r3, r2]
}
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b004      	add	sp, #16
 8002d86:	bdb0      	pop	{r4, r5, r7, pc}

08002d88 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2242      	movs	r2, #66	; 0x42
 8002d94:	2100      	movs	r1, #0
 8002d96:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2241      	movs	r2, #65	; 0x41
 8002d9c:	5c9b      	ldrb	r3, [r3, r2]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b21      	cmp	r3, #33	; 0x21
 8002da2:	d117      	bne.n	8002dd4 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2241      	movs	r2, #65	; 0x41
 8002da8:	2120      	movs	r1, #32
 8002daa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2211      	movs	r2, #17
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2101      	movs	r1, #1
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f000 fcc9 	bl	8003754 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2240      	movs	r2, #64	; 0x40
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7ff fbef 	bl	80025b0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002dd2:	e016      	b.n	8002e02 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2241      	movs	r2, #65	; 0x41
 8002dd8:	2120      	movs	r1, #32
 8002dda:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2212      	movs	r2, #18
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2102      	movs	r1, #2
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 fcb1 	bl	8003754 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2240      	movs	r2, #64	; 0x40
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7ff fbdf 	bl	80025c0 <HAL_I2C_MasterRxCpltCallback>
}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b002      	add	sp, #8
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2242      	movs	r2, #66	; 0x42
 8002e20:	2100      	movs	r1, #0
 8002e22:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	0b9b      	lsrs	r3, r3, #14
 8002e28:	001a      	movs	r2, r3
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d008      	beq.n	8002e42 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4925      	ldr	r1, [pc, #148]	; (8002ed0 <I2C_ITSlaveSeqCplt+0xc4>)
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	e00d      	b.n	8002e5e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	0bdb      	lsrs	r3, r3, #15
 8002e46:	001a      	movs	r2, r3
 8002e48:	2301      	movs	r3, #1
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d007      	beq.n	8002e5e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	491e      	ldr	r1, [pc, #120]	; (8002ed4 <I2C_ITSlaveSeqCplt+0xc8>)
 8002e5a:	400a      	ands	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2241      	movs	r2, #65	; 0x41
 8002e62:	5c9b      	ldrb	r3, [r3, r2]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b29      	cmp	r3, #41	; 0x29
 8002e68:	d114      	bne.n	8002e94 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2241      	movs	r2, #65	; 0x41
 8002e6e:	2128      	movs	r1, #40	; 0x28
 8002e70:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2221      	movs	r2, #33	; 0x21
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f000 fc69 	bl	8003754 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2240      	movs	r2, #64	; 0x40
 8002e86:	2100      	movs	r1, #0
 8002e88:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7fd fbfb 	bl	8000688 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e92:	e019      	b.n	8002ec8 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2241      	movs	r2, #65	; 0x41
 8002e98:	5c9b      	ldrb	r3, [r3, r2]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e9e:	d113      	bne.n	8002ec8 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2241      	movs	r2, #65	; 0x41
 8002ea4:	2128      	movs	r1, #40	; 0x28
 8002ea6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2222      	movs	r2, #34	; 0x22
 8002eac:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f000 fc4e 	bl	8003754 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2240      	movs	r2, #64	; 0x40
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f7fd fbf6 	bl	80006b4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b004      	add	sp, #16
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	ffffbfff 	.word	0xffffbfff
 8002ed4:	ffff7fff 	.word	0xffff7fff

08002ed8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2220      	movs	r2, #32
 8002eec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2241      	movs	r2, #65	; 0x41
 8002ef2:	5c9b      	ldrb	r3, [r3, r2]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b21      	cmp	r3, #33	; 0x21
 8002ef8:	d108      	bne.n	8002f0c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2101      	movs	r1, #1
 8002efe:	0018      	movs	r0, r3
 8002f00:	f000 fc28 	bl	8003754 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2211      	movs	r2, #17
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
 8002f0a:	e00d      	b.n	8002f28 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2241      	movs	r2, #65	; 0x41
 8002f10:	5c9b      	ldrb	r3, [r3, r2]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b22      	cmp	r3, #34	; 0x22
 8002f16:	d107      	bne.n	8002f28 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f000 fc19 	bl	8003754 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2212      	movs	r2, #18
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4950      	ldr	r1, [pc, #320]	; (8003074 <I2C_ITMasterCplt+0x19c>)
 8002f34:	400a      	ands	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4d      	ldr	r2, [pc, #308]	; (8003078 <I2C_ITMasterCplt+0x1a0>)
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	001a      	movs	r2, r3
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2210      	movs	r2, #16
 8002f56:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2241      	movs	r2, #65	; 0x41
 8002f68:	5c9b      	ldrb	r3, [r3, r2]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b60      	cmp	r3, #96	; 0x60
 8002f6e:	d10b      	bne.n	8002f88 <I2C_ITMasterCplt+0xb0>
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	001a      	movs	r2, r3
 8002f76:	2301      	movs	r3, #1
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d005      	beq.n	8002f88 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002f86:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f000 faff 	bl	800358e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2241      	movs	r2, #65	; 0x41
 8002f9a:	5c9b      	ldrb	r3, [r3, r2]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b60      	cmp	r3, #96	; 0x60
 8002fa0:	d002      	beq.n	8002fa8 <I2C_ITMasterCplt+0xd0>
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	0011      	movs	r1, r2
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 f9e1 	bl	8003378 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002fb6:	e058      	b.n	800306a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2241      	movs	r2, #65	; 0x41
 8002fbc:	5c9b      	ldrb	r3, [r3, r2]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b21      	cmp	r3, #33	; 0x21
 8002fc2:	d126      	bne.n	8003012 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2241      	movs	r2, #65	; 0x41
 8002fc8:	2120      	movs	r1, #32
 8002fca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2242      	movs	r2, #66	; 0x42
 8002fd6:	5c9b      	ldrb	r3, [r3, r2]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b40      	cmp	r3, #64	; 0x40
 8002fdc:	d10c      	bne.n	8002ff8 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2242      	movs	r2, #66	; 0x42
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2240      	movs	r2, #64	; 0x40
 8002fea:	2100      	movs	r1, #0
 8002fec:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7ff faed 	bl	80025d0 <HAL_I2C_MemTxCpltCallback>
}
 8002ff6:	e038      	b.n	800306a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2242      	movs	r2, #66	; 0x42
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2240      	movs	r2, #64	; 0x40
 8003004:	2100      	movs	r1, #0
 8003006:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	0018      	movs	r0, r3
 800300c:	f7ff fad0 	bl	80025b0 <HAL_I2C_MasterTxCpltCallback>
}
 8003010:	e02b      	b.n	800306a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2241      	movs	r2, #65	; 0x41
 8003016:	5c9b      	ldrb	r3, [r3, r2]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b22      	cmp	r3, #34	; 0x22
 800301c:	d125      	bne.n	800306a <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2241      	movs	r2, #65	; 0x41
 8003022:	2120      	movs	r1, #32
 8003024:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2242      	movs	r2, #66	; 0x42
 8003030:	5c9b      	ldrb	r3, [r3, r2]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d10c      	bne.n	8003052 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2242      	movs	r2, #66	; 0x42
 800303c:	2100      	movs	r1, #0
 800303e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2240      	movs	r2, #64	; 0x40
 8003044:	2100      	movs	r1, #0
 8003046:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	0018      	movs	r0, r3
 800304c:	f7ff fac8 	bl	80025e0 <HAL_I2C_MemRxCpltCallback>
}
 8003050:	e00b      	b.n	800306a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2242      	movs	r2, #66	; 0x42
 8003056:	2100      	movs	r1, #0
 8003058:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2240      	movs	r2, #64	; 0x40
 800305e:	2100      	movs	r1, #0
 8003060:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	0018      	movs	r0, r3
 8003066:	f7ff faab 	bl	80025c0 <HAL_I2C_MasterRxCpltCallback>
}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	46bd      	mov	sp, r7
 800306e:	b006      	add	sp, #24
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	fe00e800 	.word	0xfe00e800
 8003078:	ffff0000 	.word	0xffff0000

0800307c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003092:	200f      	movs	r0, #15
 8003094:	183b      	adds	r3, r7, r0
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	2141      	movs	r1, #65	; 0x41
 800309a:	5c52      	ldrb	r2, [r2, r1]
 800309c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2220      	movs	r2, #32
 80030a4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030a6:	183b      	adds	r3, r7, r0
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b21      	cmp	r3, #33	; 0x21
 80030ac:	d003      	beq.n	80030b6 <I2C_ITSlaveCplt+0x3a>
 80030ae:	183b      	adds	r3, r7, r0
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b29      	cmp	r3, #41	; 0x29
 80030b4:	d109      	bne.n	80030ca <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80030b6:	4a7d      	ldr	r2, [pc, #500]	; (80032ac <I2C_ITSlaveCplt+0x230>)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	0011      	movs	r1, r2
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 fb49 	bl	8003754 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2221      	movs	r2, #33	; 0x21
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
 80030c8:	e011      	b.n	80030ee <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030ca:	220f      	movs	r2, #15
 80030cc:	18bb      	adds	r3, r7, r2
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b22      	cmp	r3, #34	; 0x22
 80030d2:	d003      	beq.n	80030dc <I2C_ITSlaveCplt+0x60>
 80030d4:	18bb      	adds	r3, r7, r2
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b2a      	cmp	r3, #42	; 0x2a
 80030da:	d108      	bne.n	80030ee <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80030dc:	4a74      	ldr	r2, [pc, #464]	; (80032b0 <I2C_ITSlaveCplt+0x234>)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	0011      	movs	r1, r2
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 fb36 	bl	8003754 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2222      	movs	r2, #34	; 0x22
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2180      	movs	r1, #128	; 0x80
 80030fa:	0209      	lsls	r1, r1, #8
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	496a      	ldr	r1, [pc, #424]	; (80032b4 <I2C_ITSlaveCplt+0x238>)
 800310c:	400a      	ands	r2, r1
 800310e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	0018      	movs	r0, r3
 8003114:	f000 fa3b 	bl	800358e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	0b9b      	lsrs	r3, r3, #14
 800311c:	001a      	movs	r2, r3
 800311e:	2301      	movs	r3, #1
 8003120:	4013      	ands	r3, r2
 8003122:	d013      	beq.n	800314c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4962      	ldr	r1, [pc, #392]	; (80032b8 <I2C_ITSlaveCplt+0x23c>)
 8003130:	400a      	ands	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	2b00      	cmp	r3, #0
 800313a:	d020      	beq.n	800317e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	b29a      	uxth	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	855a      	strh	r2, [r3, #42]	; 0x2a
 800314a:	e018      	b.n	800317e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	0bdb      	lsrs	r3, r3, #15
 8003150:	001a      	movs	r2, r3
 8003152:	2301      	movs	r3, #1
 8003154:	4013      	ands	r3, r2
 8003156:	d012      	beq.n	800317e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4956      	ldr	r1, [pc, #344]	; (80032bc <I2C_ITSlaveCplt+0x240>)
 8003164:	400a      	ands	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	b29a      	uxth	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	089b      	lsrs	r3, r3, #2
 8003182:	001a      	movs	r2, r3
 8003184:	2301      	movs	r3, #1
 8003186:	4013      	ands	r3, r2
 8003188:	d020      	beq.n	80031cc <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2204      	movs	r2, #4
 800318e:	4393      	bics	r3, r2
 8003190:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00c      	beq.n	80031cc <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	2204      	movs	r2, #4
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2242      	movs	r2, #66	; 0x42
 80031e6:	2100      	movs	r1, #0
 80031e8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	0011      	movs	r1, r2
 8003200:	0018      	movs	r0, r3
 8003202:	f000 f8b9 	bl	8003378 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2241      	movs	r2, #65	; 0x41
 800320a:	5c9b      	ldrb	r3, [r3, r2]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b28      	cmp	r3, #40	; 0x28
 8003210:	d147      	bne.n	80032a2 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	0011      	movs	r1, r2
 8003218:	0018      	movs	r0, r3
 800321a:	f000 f853 	bl	80032c4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800321e:	e040      	b.n	80032a2 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	4a26      	ldr	r2, [pc, #152]	; (80032c0 <I2C_ITSlaveCplt+0x244>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d016      	beq.n	8003258 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0018      	movs	r0, r3
 800322e:	f7ff fded 	bl	8002e0c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <I2C_ITSlaveCplt+0x244>)
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2241      	movs	r2, #65	; 0x41
 800323c:	2120      	movs	r1, #32
 800323e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2240      	movs	r2, #64	; 0x40
 800324a:	2100      	movs	r1, #0
 800324c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	0018      	movs	r0, r3
 8003252:	f7fd fa95 	bl	8000780 <HAL_I2C_ListenCpltCallback>
}
 8003256:	e024      	b.n	80032a2 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2241      	movs	r2, #65	; 0x41
 800325c:	5c9b      	ldrb	r3, [r3, r2]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b22      	cmp	r3, #34	; 0x22
 8003262:	d10f      	bne.n	8003284 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2241      	movs	r2, #65	; 0x41
 8003268:	2120      	movs	r1, #32
 800326a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2240      	movs	r2, #64	; 0x40
 8003276:	2100      	movs	r1, #0
 8003278:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	0018      	movs	r0, r3
 800327e:	f7fd fa19 	bl	80006b4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003282:	e00e      	b.n	80032a2 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2241      	movs	r2, #65	; 0x41
 8003288:	2120      	movs	r1, #32
 800328a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2240      	movs	r2, #64	; 0x40
 8003296:	2100      	movs	r1, #0
 8003298:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	0018      	movs	r0, r3
 800329e:	f7fd f9f3 	bl	8000688 <HAL_I2C_SlaveTxCpltCallback>
}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b006      	add	sp, #24
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	00008001 	.word	0x00008001
 80032b0:	00008002 	.word	0x00008002
 80032b4:	fe00e800 	.word	0xfe00e800
 80032b8:	ffffbfff 	.word	0xffffbfff
 80032bc:	ffff7fff 	.word	0xffff7fff
 80032c0:	ffff0000 	.word	0xffff0000

080032c4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a27      	ldr	r2, [pc, #156]	; (8003370 <I2C_ITListenCplt+0xac>)
 80032d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2241      	movs	r2, #65	; 0x41
 80032de:	2120      	movs	r1, #32
 80032e0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2242      	movs	r2, #66	; 0x42
 80032e6:	2100      	movs	r1, #0
 80032e8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	001a      	movs	r2, r3
 80032f6:	2301      	movs	r3, #1
 80032f8:	4013      	ands	r3, r2
 80032fa:	d022      	beq.n	8003342 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	d012      	beq.n	8003342 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	2204      	movs	r2, #4
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003342:	4a0c      	ldr	r2, [pc, #48]	; (8003374 <I2C_ITListenCplt+0xb0>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	0011      	movs	r1, r2
 8003348:	0018      	movs	r0, r3
 800334a:	f000 fa03 	bl	8003754 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2210      	movs	r2, #16
 8003354:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2240      	movs	r2, #64	; 0x40
 800335a:	2100      	movs	r1, #0
 800335c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	0018      	movs	r0, r3
 8003362:	f7fd fa0d 	bl	8000780 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	46bd      	mov	sp, r7
 800336a:	b002      	add	sp, #8
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	ffff0000 	.word	0xffff0000
 8003374:	00008003 	.word	0x00008003

08003378 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003382:	200f      	movs	r0, #15
 8003384:	183b      	adds	r3, r7, r0
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	2141      	movs	r1, #65	; 0x41
 800338a:	5c52      	ldrb	r2, [r2, r1]
 800338c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2242      	movs	r2, #66	; 0x42
 8003392:	2100      	movs	r1, #0
 8003394:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a62      	ldr	r2, [pc, #392]	; (8003524 <I2C_ITError+0x1ac>)
 800339a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80033ae:	183b      	adds	r3, r7, r0
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b28      	cmp	r3, #40	; 0x28
 80033b4:	d007      	beq.n	80033c6 <I2C_ITError+0x4e>
 80033b6:	183b      	adds	r3, r7, r0
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b29      	cmp	r3, #41	; 0x29
 80033bc:	d003      	beq.n	80033c6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80033be:	183b      	adds	r3, r7, r0
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b2a      	cmp	r3, #42	; 0x2a
 80033c4:	d10c      	bne.n	80033e0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2103      	movs	r1, #3
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 f9c2 	bl	8003754 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2241      	movs	r2, #65	; 0x41
 80033d4:	2128      	movs	r1, #40	; 0x28
 80033d6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a53      	ldr	r2, [pc, #332]	; (8003528 <I2C_ITError+0x1b0>)
 80033dc:	635a      	str	r2, [r3, #52]	; 0x34
 80033de:	e012      	b.n	8003406 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033e0:	4a52      	ldr	r2, [pc, #328]	; (800352c <I2C_ITError+0x1b4>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0011      	movs	r1, r2
 80033e6:	0018      	movs	r0, r3
 80033e8:	f000 f9b4 	bl	8003754 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2241      	movs	r2, #65	; 0x41
 80033f0:	5c9b      	ldrb	r3, [r3, r2]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b60      	cmp	r3, #96	; 0x60
 80033f6:	d003      	beq.n	8003400 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2241      	movs	r2, #65	; 0x41
 80033fc:	2120      	movs	r1, #32
 80033fe:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	2b00      	cmp	r3, #0
 8003412:	d03b      	beq.n	800348c <I2C_ITError+0x114>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b11      	cmp	r3, #17
 8003418:	d002      	beq.n	8003420 <I2C_ITError+0xa8>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b21      	cmp	r3, #33	; 0x21
 800341e:	d135      	bne.n	800348c <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	01db      	lsls	r3, r3, #7
 800342a:	401a      	ands	r2, r3
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	01db      	lsls	r3, r3, #7
 8003430:	429a      	cmp	r2, r3
 8003432:	d107      	bne.n	8003444 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	493c      	ldr	r1, [pc, #240]	; (8003530 <I2C_ITError+0x1b8>)
 8003440:	400a      	ands	r2, r1
 8003442:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	0018      	movs	r0, r3
 800344a:	f7fe fc23 	bl	8001c94 <HAL_DMA_GetState>
 800344e:	0003      	movs	r3, r0
 8003450:	2b01      	cmp	r3, #1
 8003452:	d016      	beq.n	8003482 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	4a36      	ldr	r2, [pc, #216]	; (8003534 <I2C_ITError+0x1bc>)
 800345a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2240      	movs	r2, #64	; 0x40
 8003460:	2100      	movs	r1, #0
 8003462:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	0018      	movs	r0, r3
 800346a:	f7fe faf7 	bl	8001a5c <HAL_DMA_Abort_IT>
 800346e:	1e03      	subs	r3, r0, #0
 8003470:	d051      	beq.n	8003516 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	0018      	movs	r0, r3
 800347e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003480:	e049      	b.n	8003516 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	0018      	movs	r0, r3
 8003486:	f000 f859 	bl	800353c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800348a:	e044      	b.n	8003516 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d03b      	beq.n	800350c <I2C_ITError+0x194>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b12      	cmp	r3, #18
 8003498:	d002      	beq.n	80034a0 <I2C_ITError+0x128>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b22      	cmp	r3, #34	; 0x22
 800349e:	d135      	bne.n	800350c <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	2380      	movs	r3, #128	; 0x80
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	401a      	ands	r2, r3
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d107      	bne.n	80034c4 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	491e      	ldr	r1, [pc, #120]	; (8003538 <I2C_ITError+0x1c0>)
 80034c0:	400a      	ands	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7fe fbe3 	bl	8001c94 <HAL_DMA_GetState>
 80034ce:	0003      	movs	r3, r0
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d016      	beq.n	8003502 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <I2C_ITError+0x1bc>)
 80034da:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2240      	movs	r2, #64	; 0x40
 80034e0:	2100      	movs	r1, #0
 80034e2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7fe fab7 	bl	8001a5c <HAL_DMA_Abort_IT>
 80034ee:	1e03      	subs	r3, r0, #0
 80034f0:	d013      	beq.n	800351a <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fc:	0018      	movs	r0, r3
 80034fe:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003500:	e00b      	b.n	800351a <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	0018      	movs	r0, r3
 8003506:	f000 f819 	bl	800353c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800350a:	e006      	b.n	800351a <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	0018      	movs	r0, r3
 8003510:	f000 f814 	bl	800353c <I2C_TreatErrorCallback>
  }
}
 8003514:	e002      	b.n	800351c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	e000      	b.n	800351c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800351a:	46c0      	nop			; (mov r8, r8)
}
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	b004      	add	sp, #16
 8003522:	bd80      	pop	{r7, pc}
 8003524:	ffff0000 	.word	0xffff0000
 8003528:	08002615 	.word	0x08002615
 800352c:	00008003 	.word	0x00008003
 8003530:	ffffbfff 	.word	0xffffbfff
 8003534:	080035d3 	.word	0x080035d3
 8003538:	ffff7fff 	.word	0xffff7fff

0800353c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2241      	movs	r2, #65	; 0x41
 8003548:	5c9b      	ldrb	r3, [r3, r2]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b60      	cmp	r3, #96	; 0x60
 800354e:	d10f      	bne.n	8003570 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2241      	movs	r2, #65	; 0x41
 8003554:	2120      	movs	r1, #32
 8003556:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2240      	movs	r2, #64	; 0x40
 8003562:	2100      	movs	r1, #0
 8003564:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f7ff f841 	bl	80025f0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800356e:	e00a      	b.n	8003586 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2240      	movs	r2, #64	; 0x40
 800357a:	2100      	movs	r1, #0
 800357c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	0018      	movs	r0, r3
 8003582:	f7fd f905 	bl	8000790 <HAL_I2C_ErrorCallback>
}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	b002      	add	sp, #8
 800358c:	bd80      	pop	{r7, pc}

0800358e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2202      	movs	r2, #2
 800359e:	4013      	ands	r3, r2
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d103      	bne.n	80035ac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2200      	movs	r2, #0
 80035aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2201      	movs	r2, #1
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d007      	beq.n	80035ca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699a      	ldr	r2, [r3, #24]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2101      	movs	r1, #1
 80035c6:	430a      	orrs	r2, r1
 80035c8:	619a      	str	r2, [r3, #24]
  }
}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b002      	add	sp, #8
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	2200      	movs	r2, #0
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	2200      	movs	r2, #0
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	0018      	movs	r0, r3
 8003604:	f7ff ff9a 	bl	800353c <I2C_TreatErrorCallback>
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b004      	add	sp, #16
 800360e:	bd80      	pop	{r7, pc}

08003610 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	0008      	movs	r0, r1
 800361a:	0011      	movs	r1, r2
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	240a      	movs	r4, #10
 8003620:	193b      	adds	r3, r7, r4
 8003622:	1c02      	adds	r2, r0, #0
 8003624:	801a      	strh	r2, [r3, #0]
 8003626:	2009      	movs	r0, #9
 8003628:	183b      	adds	r3, r7, r0
 800362a:	1c0a      	adds	r2, r1, #0
 800362c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800362e:	193b      	adds	r3, r7, r4
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	059b      	lsls	r3, r3, #22
 8003634:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003636:	183b      	adds	r3, r7, r0
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	0419      	lsls	r1, r3, #16
 800363c:	23ff      	movs	r3, #255	; 0xff
 800363e:	041b      	lsls	r3, r3, #16
 8003640:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003642:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364a:	4313      	orrs	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800365a:	0d51      	lsrs	r1, r2, #21
 800365c:	2280      	movs	r2, #128	; 0x80
 800365e:	00d2      	lsls	r2, r2, #3
 8003660:	400a      	ands	r2, r1
 8003662:	4907      	ldr	r1, [pc, #28]	; (8003680 <I2C_TransferConfig+0x70>)
 8003664:	430a      	orrs	r2, r1
 8003666:	43d2      	mvns	r2, r2
 8003668:	401a      	ands	r2, r3
 800366a:	0011      	movs	r1, r2
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	46bd      	mov	sp, r7
 800367a:	b007      	add	sp, #28
 800367c:	bd90      	pop	{r4, r7, pc}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	03ff63ff 	.word	0x03ff63ff

08003684 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	000a      	movs	r2, r1
 800368e:	1cbb      	adds	r3, r7, #2
 8003690:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800369a:	4b2c      	ldr	r3, [pc, #176]	; (800374c <I2C_Enable_IRQ+0xc8>)
 800369c:	429a      	cmp	r2, r3
 800369e:	d004      	beq.n	80036aa <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80036a4:	4b2a      	ldr	r3, [pc, #168]	; (8003750 <I2C_Enable_IRQ+0xcc>)
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d121      	bne.n	80036ee <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036aa:	1cbb      	adds	r3, r7, #2
 80036ac:	2200      	movs	r2, #0
 80036ae:	5e9b      	ldrsh	r3, [r3, r2]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	da03      	bge.n	80036bc <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	22b8      	movs	r2, #184	; 0xb8
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80036bc:	1cbb      	adds	r3, r7, #2
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d103      	bne.n	80036cc <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2290      	movs	r2, #144	; 0x90
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036cc:	1cbb      	adds	r3, r7, #2
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d103      	bne.n	80036dc <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2260      	movs	r2, #96	; 0x60
 80036d8:	4313      	orrs	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80036dc:	1cbb      	adds	r3, r7, #2
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	2b40      	cmp	r3, #64	; 0x40
 80036e2:	d127      	bne.n	8003734 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2240      	movs	r2, #64	; 0x40
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80036ec:	e022      	b.n	8003734 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036ee:	1cbb      	adds	r3, r7, #2
 80036f0:	2200      	movs	r2, #0
 80036f2:	5e9b      	ldrsh	r3, [r3, r2]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	da03      	bge.n	8003700 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	22b8      	movs	r2, #184	; 0xb8
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003700:	1cbb      	adds	r3, r7, #2
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	2201      	movs	r2, #1
 8003706:	4013      	ands	r3, r2
 8003708:	d003      	beq.n	8003712 <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	22f2      	movs	r2, #242	; 0xf2
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003712:	1cbb      	adds	r3, r7, #2
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	2202      	movs	r2, #2
 8003718:	4013      	ands	r3, r2
 800371a:	d003      	beq.n	8003724 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	22f4      	movs	r2, #244	; 0xf4
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003724:	1cbb      	adds	r3, r7, #2
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	2b20      	cmp	r3, #32
 800372a:	d103      	bne.n	8003734 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	430a      	orrs	r2, r1
 8003742:	601a      	str	r2, [r3, #0]
}
 8003744:	46c0      	nop			; (mov r8, r8)
 8003746:	46bd      	mov	sp, r7
 8003748:	b004      	add	sp, #16
 800374a:	bd80      	pop	{r7, pc}
 800374c:	0800283d 	.word	0x0800283d
 8003750:	08002a55 	.word	0x08002a55

08003754 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	000a      	movs	r2, r1
 800375e:	1cbb      	adds	r3, r7, #2
 8003760:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003766:	1cbb      	adds	r3, r7, #2
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	2201      	movs	r2, #1
 800376c:	4013      	ands	r3, r2
 800376e:	d010      	beq.n	8003792 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2242      	movs	r2, #66	; 0x42
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2241      	movs	r2, #65	; 0x41
 800377c:	5c9b      	ldrb	r3, [r3, r2]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	001a      	movs	r2, r3
 8003782:	2328      	movs	r3, #40	; 0x28
 8003784:	4013      	ands	r3, r2
 8003786:	2b28      	cmp	r3, #40	; 0x28
 8003788:	d003      	beq.n	8003792 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	22b0      	movs	r2, #176	; 0xb0
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003792:	1cbb      	adds	r3, r7, #2
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	2202      	movs	r2, #2
 8003798:	4013      	ands	r3, r2
 800379a:	d010      	beq.n	80037be <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2244      	movs	r2, #68	; 0x44
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2241      	movs	r2, #65	; 0x41
 80037a8:	5c9b      	ldrb	r3, [r3, r2]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	001a      	movs	r2, r3
 80037ae:	2328      	movs	r3, #40	; 0x28
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b28      	cmp	r3, #40	; 0x28
 80037b4:	d003      	beq.n	80037be <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	22b0      	movs	r2, #176	; 0xb0
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80037be:	1cbb      	adds	r3, r7, #2
 80037c0:	2200      	movs	r2, #0
 80037c2:	5e9b      	ldrsh	r3, [r3, r2]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	da03      	bge.n	80037d0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	22b8      	movs	r2, #184	; 0xb8
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80037d0:	1cbb      	adds	r3, r7, #2
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d103      	bne.n	80037e0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2290      	movs	r2, #144	; 0x90
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037e0:	1cbb      	adds	r3, r7, #2
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d103      	bne.n	80037f0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80037f0:	1cbb      	adds	r3, r7, #2
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d103      	bne.n	8003800 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2240      	movs	r2, #64	; 0x40
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	43d9      	mvns	r1, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	400a      	ands	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	46bd      	mov	sp, r7
 8003816:	b004      	add	sp, #16
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2241      	movs	r2, #65	; 0x41
 800382a:	5c9b      	ldrb	r3, [r3, r2]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b20      	cmp	r3, #32
 8003830:	d138      	bne.n	80038a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2240      	movs	r2, #64	; 0x40
 8003836:	5c9b      	ldrb	r3, [r3, r2]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800383c:	2302      	movs	r3, #2
 800383e:	e032      	b.n	80038a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2240      	movs	r2, #64	; 0x40
 8003844:	2101      	movs	r1, #1
 8003846:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2241      	movs	r2, #65	; 0x41
 800384c:	2124      	movs	r1, #36	; 0x24
 800384e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2101      	movs	r1, #1
 800385c:	438a      	bics	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4911      	ldr	r1, [pc, #68]	; (80038b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800386c:	400a      	ands	r2, r1
 800386e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6819      	ldr	r1, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2101      	movs	r1, #1
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2241      	movs	r2, #65	; 0x41
 8003894:	2120      	movs	r1, #32
 8003896:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2240      	movs	r2, #64	; 0x40
 800389c:	2100      	movs	r1, #0
 800389e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	e000      	b.n	80038a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
  }
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b002      	add	sp, #8
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	ffffefff 	.word	0xffffefff

080038b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2241      	movs	r2, #65	; 0x41
 80038c2:	5c9b      	ldrb	r3, [r3, r2]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d139      	bne.n	800393e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2240      	movs	r2, #64	; 0x40
 80038ce:	5c9b      	ldrb	r3, [r3, r2]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e033      	b.n	8003940 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2240      	movs	r2, #64	; 0x40
 80038dc:	2101      	movs	r1, #1
 80038de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2241      	movs	r2, #65	; 0x41
 80038e4:	2124      	movs	r1, #36	; 0x24
 80038e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2101      	movs	r1, #1
 80038f4:	438a      	bics	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4a11      	ldr	r2, [pc, #68]	; (8003948 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003904:	4013      	ands	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2101      	movs	r1, #1
 8003926:	430a      	orrs	r2, r1
 8003928:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2241      	movs	r2, #65	; 0x41
 800392e:	2120      	movs	r1, #32
 8003930:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2240      	movs	r2, #64	; 0x40
 8003936:	2100      	movs	r1, #0
 8003938:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800393e:	2302      	movs	r3, #2
  }
}
 8003940:	0018      	movs	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	b004      	add	sp, #16
 8003946:	bd80      	pop	{r7, pc}
 8003948:	fffff0ff 	.word	0xfffff0ff

0800394c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003954:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a19      	ldr	r2, [pc, #100]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800395a:	4013      	ands	r3, r2
 800395c:	0019      	movs	r1, r3
 800395e:	4b17      	ldr	r3, [pc, #92]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	430a      	orrs	r2, r1
 8003964:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	2380      	movs	r3, #128	; 0x80
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	429a      	cmp	r2, r3
 800396e:	d11f      	bne.n	80039b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003970:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	0013      	movs	r3, r2
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	189b      	adds	r3, r3, r2
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	4912      	ldr	r1, [pc, #72]	; (80039c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800397e:	0018      	movs	r0, r3
 8003980:	f7fc fbc0 	bl	8000104 <__udivsi3>
 8003984:	0003      	movs	r3, r0
 8003986:	3301      	adds	r3, #1
 8003988:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800398a:	e008      	b.n	800399e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3b01      	subs	r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	e001      	b.n	800399e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e009      	b.n	80039b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800399e:	4b07      	ldr	r3, [pc, #28]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	2380      	movs	r3, #128	; 0x80
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	401a      	ands	r2, r3
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d0ed      	beq.n	800398c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	0018      	movs	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b004      	add	sp, #16
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	40007000 	.word	0x40007000
 80039c0:	fffff9ff 	.word	0xfffff9ff
 80039c4:	20000000 	.word	0x20000000
 80039c8:	000f4240 	.word	0x000f4240

080039cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e2fe      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2201      	movs	r2, #1
 80039e4:	4013      	ands	r3, r2
 80039e6:	d100      	bne.n	80039ea <HAL_RCC_OscConfig+0x1e>
 80039e8:	e07c      	b.n	8003ae4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ea:	4bc3      	ldr	r3, [pc, #780]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2238      	movs	r2, #56	; 0x38
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f4:	4bc0      	ldr	r3, [pc, #768]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2203      	movs	r2, #3
 80039fa:	4013      	ands	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2b10      	cmp	r3, #16
 8003a02:	d102      	bne.n	8003a0a <HAL_RCC_OscConfig+0x3e>
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d002      	beq.n	8003a10 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d10b      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	4bb9      	ldr	r3, [pc, #740]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	029b      	lsls	r3, r3, #10
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d062      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x116>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d15e      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e2d9      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	025b      	lsls	r3, r3, #9
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d107      	bne.n	8003a44 <HAL_RCC_OscConfig+0x78>
 8003a34:	4bb0      	ldr	r3, [pc, #704]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4baf      	ldr	r3, [pc, #700]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003a3a:	2180      	movs	r1, #128	; 0x80
 8003a3c:	0249      	lsls	r1, r1, #9
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e020      	b.n	8003a86 <HAL_RCC_OscConfig+0xba>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	23a0      	movs	r3, #160	; 0xa0
 8003a4a:	02db      	lsls	r3, r3, #11
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d10e      	bne.n	8003a6e <HAL_RCC_OscConfig+0xa2>
 8003a50:	4ba9      	ldr	r3, [pc, #676]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4ba8      	ldr	r3, [pc, #672]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003a56:	2180      	movs	r1, #128	; 0x80
 8003a58:	02c9      	lsls	r1, r1, #11
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	4ba6      	ldr	r3, [pc, #664]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4ba5      	ldr	r3, [pc, #660]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003a64:	2180      	movs	r1, #128	; 0x80
 8003a66:	0249      	lsls	r1, r1, #9
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	e00b      	b.n	8003a86 <HAL_RCC_OscConfig+0xba>
 8003a6e:	4ba2      	ldr	r3, [pc, #648]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4ba1      	ldr	r3, [pc, #644]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003a74:	49a1      	ldr	r1, [pc, #644]	; (8003cfc <HAL_RCC_OscConfig+0x330>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	4b9f      	ldr	r3, [pc, #636]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4b9e      	ldr	r3, [pc, #632]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003a80:	499f      	ldr	r1, [pc, #636]	; (8003d00 <HAL_RCC_OscConfig+0x334>)
 8003a82:	400a      	ands	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d014      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7fd f8ed 	bl	8000c6c <HAL_GetTick>
 8003a92:	0003      	movs	r3, r0
 8003a94:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fd f8e8 	bl	8000c6c <HAL_GetTick>
 8003a9c:	0002      	movs	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e298      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aaa:	4b93      	ldr	r3, [pc, #588]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	2380      	movs	r3, #128	; 0x80
 8003ab0:	029b      	lsls	r3, r3, #10
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0xcc>
 8003ab6:	e015      	b.n	8003ae4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd f8d8 	bl	8000c6c <HAL_GetTick>
 8003abc:	0003      	movs	r3, r0
 8003abe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac2:	f7fd f8d3 	bl	8000c6c <HAL_GetTick>
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b64      	cmp	r3, #100	; 0x64
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e283      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ad4:	4b88      	ldr	r3, [pc, #544]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	029b      	lsls	r3, r3, #10
 8003adc:	4013      	ands	r3, r2
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0xf6>
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	4013      	ands	r3, r2
 8003aec:	d100      	bne.n	8003af0 <HAL_RCC_OscConfig+0x124>
 8003aee:	e099      	b.n	8003c24 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af0:	4b81      	ldr	r3, [pc, #516]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2238      	movs	r2, #56	; 0x38
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003afa:	4b7f      	ldr	r3, [pc, #508]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2203      	movs	r2, #3
 8003b00:	4013      	ands	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b10      	cmp	r3, #16
 8003b08:	d102      	bne.n	8003b10 <HAL_RCC_OscConfig+0x144>
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d002      	beq.n	8003b16 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d135      	bne.n	8003b82 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b16:	4b78      	ldr	r3, [pc, #480]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d005      	beq.n	8003b2e <HAL_RCC_OscConfig+0x162>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e256      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2e:	4b72      	ldr	r3, [pc, #456]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	4a74      	ldr	r2, [pc, #464]	; (8003d04 <HAL_RCC_OscConfig+0x338>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	0019      	movs	r1, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	021a      	lsls	r2, r3, #8
 8003b3e:	4b6e      	ldr	r3, [pc, #440]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003b40:	430a      	orrs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d112      	bne.n	8003b70 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b4a:	4b6b      	ldr	r3, [pc, #428]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a6e      	ldr	r2, [pc, #440]	; (8003d08 <HAL_RCC_OscConfig+0x33c>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	0019      	movs	r1, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	4b67      	ldr	r3, [pc, #412]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003b5e:	4b66      	ldr	r3, [pc, #408]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	0adb      	lsrs	r3, r3, #11
 8003b64:	2207      	movs	r2, #7
 8003b66:	4013      	ands	r3, r2
 8003b68:	4a68      	ldr	r2, [pc, #416]	; (8003d0c <HAL_RCC_OscConfig+0x340>)
 8003b6a:	40da      	lsrs	r2, r3
 8003b6c:	4b68      	ldr	r3, [pc, #416]	; (8003d10 <HAL_RCC_OscConfig+0x344>)
 8003b6e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b70:	4b68      	ldr	r3, [pc, #416]	; (8003d14 <HAL_RCC_OscConfig+0x348>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	0018      	movs	r0, r3
 8003b76:	f7fd f81d 	bl	8000bb4 <HAL_InitTick>
 8003b7a:	1e03      	subs	r3, r0, #0
 8003b7c:	d051      	beq.n	8003c22 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e22c      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d030      	beq.n	8003bec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b8a:	4b5b      	ldr	r3, [pc, #364]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a5e      	ldr	r2, [pc, #376]	; (8003d08 <HAL_RCC_OscConfig+0x33c>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	4b57      	ldr	r3, [pc, #348]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003b9e:	4b56      	ldr	r3, [pc, #344]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4b55      	ldr	r3, [pc, #340]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003ba4:	2180      	movs	r1, #128	; 0x80
 8003ba6:	0049      	lsls	r1, r1, #1
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fd f85e 	bl	8000c6c <HAL_GetTick>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb6:	f7fd f859 	bl	8000c6c <HAL_GetTick>
 8003bba:	0002      	movs	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e209      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc8:	4b4b      	ldr	r3, [pc, #300]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd4:	4b48      	ldr	r3, [pc, #288]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	4a4a      	ldr	r2, [pc, #296]	; (8003d04 <HAL_RCC_OscConfig+0x338>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	0019      	movs	r1, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	021a      	lsls	r2, r3, #8
 8003be4:	4b44      	ldr	r3, [pc, #272]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	e01b      	b.n	8003c24 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003bec:	4b42      	ldr	r3, [pc, #264]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4b41      	ldr	r3, [pc, #260]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003bf2:	4949      	ldr	r1, [pc, #292]	; (8003d18 <HAL_RCC_OscConfig+0x34c>)
 8003bf4:	400a      	ands	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fd f838 	bl	8000c6c <HAL_GetTick>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c02:	f7fd f833 	bl	8000c6c <HAL_GetTick>
 8003c06:	0002      	movs	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e1e3      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c14:	4b38      	ldr	r3, [pc, #224]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d1f0      	bne.n	8003c02 <HAL_RCC_OscConfig+0x236>
 8003c20:	e000      	b.n	8003c24 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d047      	beq.n	8003cbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c2e:	4b32      	ldr	r3, [pc, #200]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2238      	movs	r2, #56	; 0x38
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b18      	cmp	r3, #24
 8003c38:	d10a      	bne.n	8003c50 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003c3a:	4b2f      	ldr	r3, [pc, #188]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c3e:	2202      	movs	r2, #2
 8003c40:	4013      	ands	r3, r2
 8003c42:	d03c      	beq.n	8003cbe <HAL_RCC_OscConfig+0x2f2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d138      	bne.n	8003cbe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e1c5      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d019      	beq.n	8003c8c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003c58:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003c5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c5c:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003c5e:	2101      	movs	r1, #1
 8003c60:	430a      	orrs	r2, r1
 8003c62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fd f802 	bl	8000c6c <HAL_GetTick>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6e:	f7fc fffd 	bl	8000c6c <HAL_GetTick>
 8003c72:	0002      	movs	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e1ad      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c80:	4b1d      	ldr	r3, [pc, #116]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c84:	2202      	movs	r2, #2
 8003c86:	4013      	ands	r3, r2
 8003c88:	d0f1      	beq.n	8003c6e <HAL_RCC_OscConfig+0x2a2>
 8003c8a:	e018      	b.n	8003cbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003c8c:	4b1a      	ldr	r3, [pc, #104]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003c8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c90:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003c92:	2101      	movs	r1, #1
 8003c94:	438a      	bics	r2, r1
 8003c96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fc ffe8 	bl	8000c6c <HAL_GetTick>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca2:	f7fc ffe3 	bl	8000c6c <HAL_GetTick>
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e193      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cb4:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb8:	2202      	movs	r2, #2
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d1f1      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d100      	bne.n	8003cca <HAL_RCC_OscConfig+0x2fe>
 8003cc8:	e0c6      	b.n	8003e58 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cca:	231f      	movs	r3, #31
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003cd2:	4b09      	ldr	r3, [pc, #36]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2238      	movs	r2, #56	; 0x38
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d11e      	bne.n	8003d1c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_RCC_OscConfig+0x32c>)
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d100      	bne.n	8003cea <HAL_RCC_OscConfig+0x31e>
 8003ce8:	e0b6      	b.n	8003e58 <HAL_RCC_OscConfig+0x48c>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d000      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x328>
 8003cf2:	e0b1      	b.n	8003e58 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e171      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	fffeffff 	.word	0xfffeffff
 8003d00:	fffbffff 	.word	0xfffbffff
 8003d04:	ffff80ff 	.word	0xffff80ff
 8003d08:	ffffc7ff 	.word	0xffffc7ff
 8003d0c:	00f42400 	.word	0x00f42400
 8003d10:	20000000 	.word	0x20000000
 8003d14:	20000004 	.word	0x20000004
 8003d18:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d1c:	4bb1      	ldr	r3, [pc, #708]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	055b      	lsls	r3, r3, #21
 8003d24:	4013      	ands	r3, r2
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_OscConfig+0x360>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x362>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d011      	beq.n	8003d56 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	4bac      	ldr	r3, [pc, #688]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d36:	4bab      	ldr	r3, [pc, #684]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003d38:	2180      	movs	r1, #128	; 0x80
 8003d3a:	0549      	lsls	r1, r1, #21
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d40:	4ba8      	ldr	r3, [pc, #672]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	055b      	lsls	r3, r3, #21
 8003d48:	4013      	ands	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003d4e:	231f      	movs	r3, #31
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	2201      	movs	r2, #1
 8003d54:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d56:	4ba4      	ldr	r3, [pc, #656]	; (8003fe8 <HAL_RCC_OscConfig+0x61c>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	2380      	movs	r3, #128	; 0x80
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d11a      	bne.n	8003d98 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d62:	4ba1      	ldr	r3, [pc, #644]	; (8003fe8 <HAL_RCC_OscConfig+0x61c>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4ba0      	ldr	r3, [pc, #640]	; (8003fe8 <HAL_RCC_OscConfig+0x61c>)
 8003d68:	2180      	movs	r1, #128	; 0x80
 8003d6a:	0049      	lsls	r1, r1, #1
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003d70:	f7fc ff7c 	bl	8000c6c <HAL_GetTick>
 8003d74:	0003      	movs	r3, r0
 8003d76:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7a:	f7fc ff77 	bl	8000c6c <HAL_GetTick>
 8003d7e:	0002      	movs	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e127      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8c:	4b96      	ldr	r3, [pc, #600]	; (8003fe8 <HAL_RCC_OscConfig+0x61c>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	4013      	ands	r3, r2
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d106      	bne.n	8003dae <HAL_RCC_OscConfig+0x3e2>
 8003da0:	4b90      	ldr	r3, [pc, #576]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003da2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003da4:	4b8f      	ldr	r3, [pc, #572]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003da6:	2101      	movs	r1, #1
 8003da8:	430a      	orrs	r2, r1
 8003daa:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dac:	e01c      	b.n	8003de8 <HAL_RCC_OscConfig+0x41c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x404>
 8003db6:	4b8b      	ldr	r3, [pc, #556]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003db8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dba:	4b8a      	ldr	r3, [pc, #552]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003dbc:	2104      	movs	r1, #4
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dc2:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003dc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dc6:	4b87      	ldr	r3, [pc, #540]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003dc8:	2101      	movs	r1, #1
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0x41c>
 8003dd0:	4b84      	ldr	r3, [pc, #528]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003dd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dd4:	4b83      	ldr	r3, [pc, #524]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	438a      	bics	r2, r1
 8003dda:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ddc:	4b81      	ldr	r3, [pc, #516]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003dde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003de0:	4b80      	ldr	r3, [pc, #512]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003de2:	2104      	movs	r1, #4
 8003de4:	438a      	bics	r2, r1
 8003de6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d014      	beq.n	8003e1a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fc ff3c 	bl	8000c6c <HAL_GetTick>
 8003df4:	0003      	movs	r3, r0
 8003df6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df8:	e009      	b.n	8003e0e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fc ff37 	bl	8000c6c <HAL_GetTick>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	4a79      	ldr	r2, [pc, #484]	; (8003fec <HAL_RCC_OscConfig+0x620>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0e6      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e0e:	4b75      	ldr	r3, [pc, #468]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e12:	2202      	movs	r2, #2
 8003e14:	4013      	ands	r3, r2
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x42e>
 8003e18:	e013      	b.n	8003e42 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1a:	f7fc ff27 	bl	8000c6c <HAL_GetTick>
 8003e1e:	0003      	movs	r3, r0
 8003e20:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e22:	e009      	b.n	8003e38 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e24:	f7fc ff22 	bl	8000c6c <HAL_GetTick>
 8003e28:	0002      	movs	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	4a6f      	ldr	r2, [pc, #444]	; (8003fec <HAL_RCC_OscConfig+0x620>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e0d1      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e38:	4b6a      	ldr	r3, [pc, #424]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e42:	231f      	movs	r3, #31
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d105      	bne.n	8003e58 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e4c:	4b65      	ldr	r3, [pc, #404]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e50:	4b64      	ldr	r3, [pc, #400]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003e52:	4967      	ldr	r1, [pc, #412]	; (8003ff0 <HAL_RCC_OscConfig+0x624>)
 8003e54:	400a      	ands	r2, r1
 8003e56:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d100      	bne.n	8003e62 <HAL_RCC_OscConfig+0x496>
 8003e60:	e0bb      	b.n	8003fda <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e62:	4b60      	ldr	r3, [pc, #384]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2238      	movs	r2, #56	; 0x38
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b10      	cmp	r3, #16
 8003e6c:	d100      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4a4>
 8003e6e:	e07b      	b.n	8003f68 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d156      	bne.n	8003f26 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e78:	4b5a      	ldr	r3, [pc, #360]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4b59      	ldr	r3, [pc, #356]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003e7e:	495d      	ldr	r1, [pc, #372]	; (8003ff4 <HAL_RCC_OscConfig+0x628>)
 8003e80:	400a      	ands	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fc fef2 	bl	8000c6c <HAL_GetTick>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8e:	f7fc feed 	bl	8000c6c <HAL_GetTick>
 8003e92:	0002      	movs	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e09d      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea0:	4b50      	ldr	r3, [pc, #320]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	049b      	lsls	r3, r3, #18
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d1f0      	bne.n	8003e8e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eac:	4b4d      	ldr	r3, [pc, #308]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4a51      	ldr	r2, [pc, #324]	; (8003ff8 <HAL_RCC_OscConfig+0x62c>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1a      	ldr	r2, [r3, #32]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	021b      	lsls	r3, r3, #8
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	4b42      	ldr	r3, [pc, #264]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003edc:	430a      	orrs	r2, r1
 8003ede:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee0:	4b40      	ldr	r3, [pc, #256]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b3f      	ldr	r3, [pc, #252]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003ee6:	2180      	movs	r1, #128	; 0x80
 8003ee8:	0449      	lsls	r1, r1, #17
 8003eea:	430a      	orrs	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003eee:	4b3d      	ldr	r3, [pc, #244]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	4b3c      	ldr	r3, [pc, #240]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003ef4:	2180      	movs	r1, #128	; 0x80
 8003ef6:	0549      	lsls	r1, r1, #21
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fc feb6 	bl	8000c6c <HAL_GetTick>
 8003f00:	0003      	movs	r3, r0
 8003f02:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f06:	f7fc feb1 	bl	8000c6c <HAL_GetTick>
 8003f0a:	0002      	movs	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e061      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f18:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	049b      	lsls	r3, r3, #18
 8003f20:	4013      	ands	r3, r2
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x53a>
 8003f24:	e059      	b.n	8003fda <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f26:	4b2f      	ldr	r3, [pc, #188]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b2e      	ldr	r3, [pc, #184]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003f2c:	4931      	ldr	r1, [pc, #196]	; (8003ff4 <HAL_RCC_OscConfig+0x628>)
 8003f2e:	400a      	ands	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f32:	f7fc fe9b 	bl	8000c6c <HAL_GetTick>
 8003f36:	0003      	movs	r3, r0
 8003f38:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fc fe96 	bl	8000c6c <HAL_GetTick>
 8003f40:	0002      	movs	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e046      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4e:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	049b      	lsls	r3, r3, #18
 8003f56:	4013      	ands	r3, r2
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003f5a:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	4b21      	ldr	r3, [pc, #132]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003f60:	4926      	ldr	r1, [pc, #152]	; (8003ffc <HAL_RCC_OscConfig+0x630>)
 8003f62:	400a      	ands	r2, r1
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	e038      	b.n	8003fda <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e033      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003f74:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <HAL_RCC_OscConfig+0x618>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	401a      	ands	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d126      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2270      	movs	r2, #112	; 0x70
 8003f8c:	401a      	ands	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d11f      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	23fe      	movs	r3, #254	; 0xfe
 8003f9a:	01db      	lsls	r3, r3, #7
 8003f9c:	401a      	ands	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d116      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	23f8      	movs	r3, #248	; 0xf8
 8003fac:	039b      	lsls	r3, r3, #14
 8003fae:	401a      	ands	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d10e      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	23e0      	movs	r3, #224	; 0xe0
 8003fbc:	051b      	lsls	r3, r3, #20
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d106      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	0f5b      	lsrs	r3, r3, #29
 8003fcc:	075a      	lsls	r2, r3, #29
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d001      	beq.n	8003fda <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	0018      	movs	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b008      	add	sp, #32
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	00001388 	.word	0x00001388
 8003ff0:	efffffff 	.word	0xefffffff
 8003ff4:	feffffff 	.word	0xfeffffff
 8003ff8:	11c1808c 	.word	0x11c1808c
 8003ffc:	eefefffc 	.word	0xeefefffc

08004000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0e9      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004014:	4b76      	ldr	r3, [pc, #472]	; (80041f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2207      	movs	r2, #7
 800401a:	4013      	ands	r3, r2
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d91e      	bls.n	8004060 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b73      	ldr	r3, [pc, #460]	; (80041f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2207      	movs	r2, #7
 8004028:	4393      	bics	r3, r2
 800402a:	0019      	movs	r1, r3
 800402c:	4b70      	ldr	r3, [pc, #448]	; (80041f0 <HAL_RCC_ClockConfig+0x1f0>)
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004034:	f7fc fe1a 	bl	8000c6c <HAL_GetTick>
 8004038:	0003      	movs	r3, r0
 800403a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800403c:	e009      	b.n	8004052 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403e:	f7fc fe15 	bl	8000c6c <HAL_GetTick>
 8004042:	0002      	movs	r2, r0
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	4a6a      	ldr	r2, [pc, #424]	; (80041f4 <HAL_RCC_ClockConfig+0x1f4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e0ca      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004052:	4b67      	ldr	r3, [pc, #412]	; (80041f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2207      	movs	r2, #7
 8004058:	4013      	ands	r3, r2
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d1ee      	bne.n	800403e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2202      	movs	r2, #2
 8004066:	4013      	ands	r3, r2
 8004068:	d015      	beq.n	8004096 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2204      	movs	r2, #4
 8004070:	4013      	ands	r3, r2
 8004072:	d006      	beq.n	8004082 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004074:	4b60      	ldr	r3, [pc, #384]	; (80041f8 <HAL_RCC_ClockConfig+0x1f8>)
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	4b5f      	ldr	r3, [pc, #380]	; (80041f8 <HAL_RCC_ClockConfig+0x1f8>)
 800407a:	21e0      	movs	r1, #224	; 0xe0
 800407c:	01c9      	lsls	r1, r1, #7
 800407e:	430a      	orrs	r2, r1
 8004080:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004082:	4b5d      	ldr	r3, [pc, #372]	; (80041f8 <HAL_RCC_ClockConfig+0x1f8>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	4a5d      	ldr	r2, [pc, #372]	; (80041fc <HAL_RCC_ClockConfig+0x1fc>)
 8004088:	4013      	ands	r3, r2
 800408a:	0019      	movs	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	4b59      	ldr	r3, [pc, #356]	; (80041f8 <HAL_RCC_ClockConfig+0x1f8>)
 8004092:	430a      	orrs	r2, r1
 8004094:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2201      	movs	r2, #1
 800409c:	4013      	ands	r3, r2
 800409e:	d057      	beq.n	8004150 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d107      	bne.n	80040b8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040a8:	4b53      	ldr	r3, [pc, #332]	; (80041f8 <HAL_RCC_ClockConfig+0x1f8>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	029b      	lsls	r3, r3, #10
 80040b0:	4013      	ands	r3, r2
 80040b2:	d12b      	bne.n	800410c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e097      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d107      	bne.n	80040d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040c0:	4b4d      	ldr	r3, [pc, #308]	; (80041f8 <HAL_RCC_ClockConfig+0x1f8>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	049b      	lsls	r3, r3, #18
 80040c8:	4013      	ands	r3, r2
 80040ca:	d11f      	bne.n	800410c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e08b      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040d8:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <HAL_RCC_ClockConfig+0x1f8>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4013      	ands	r3, r2
 80040e2:	d113      	bne.n	800410c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e07f      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d106      	bne.n	80040fe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040f0:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <HAL_RCC_ClockConfig+0x1f8>)
 80040f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f4:	2202      	movs	r2, #2
 80040f6:	4013      	ands	r3, r2
 80040f8:	d108      	bne.n	800410c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e074      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fe:	4b3e      	ldr	r3, [pc, #248]	; (80041f8 <HAL_RCC_ClockConfig+0x1f8>)
 8004100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004102:	2202      	movs	r2, #2
 8004104:	4013      	ands	r3, r2
 8004106:	d101      	bne.n	800410c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e06d      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800410c:	4b3a      	ldr	r3, [pc, #232]	; (80041f8 <HAL_RCC_ClockConfig+0x1f8>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2207      	movs	r2, #7
 8004112:	4393      	bics	r3, r2
 8004114:	0019      	movs	r1, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	4b37      	ldr	r3, [pc, #220]	; (80041f8 <HAL_RCC_ClockConfig+0x1f8>)
 800411c:	430a      	orrs	r2, r1
 800411e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004120:	f7fc fda4 	bl	8000c6c <HAL_GetTick>
 8004124:	0003      	movs	r3, r0
 8004126:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004128:	e009      	b.n	800413e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800412a:	f7fc fd9f 	bl	8000c6c <HAL_GetTick>
 800412e:	0002      	movs	r2, r0
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	4a2f      	ldr	r2, [pc, #188]	; (80041f4 <HAL_RCC_ClockConfig+0x1f4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e054      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413e:	4b2e      	ldr	r3, [pc, #184]	; (80041f8 <HAL_RCC_ClockConfig+0x1f8>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2238      	movs	r2, #56	; 0x38
 8004144:	401a      	ands	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	429a      	cmp	r2, r3
 800414e:	d1ec      	bne.n	800412a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004150:	4b27      	ldr	r3, [pc, #156]	; (80041f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2207      	movs	r2, #7
 8004156:	4013      	ands	r3, r2
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d21e      	bcs.n	800419c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2207      	movs	r2, #7
 8004164:	4393      	bics	r3, r2
 8004166:	0019      	movs	r1, r3
 8004168:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <HAL_RCC_ClockConfig+0x1f0>)
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004170:	f7fc fd7c 	bl	8000c6c <HAL_GetTick>
 8004174:	0003      	movs	r3, r0
 8004176:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004178:	e009      	b.n	800418e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417a:	f7fc fd77 	bl	8000c6c <HAL_GetTick>
 800417e:	0002      	movs	r2, r0
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	4a1b      	ldr	r2, [pc, #108]	; (80041f4 <HAL_RCC_ClockConfig+0x1f4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e02c      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800418e:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2207      	movs	r2, #7
 8004194:	4013      	ands	r3, r2
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d1ee      	bne.n	800417a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2204      	movs	r2, #4
 80041a2:	4013      	ands	r3, r2
 80041a4:	d009      	beq.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80041a6:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <HAL_RCC_ClockConfig+0x1f8>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	4a15      	ldr	r2, [pc, #84]	; (8004200 <HAL_RCC_ClockConfig+0x200>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	0019      	movs	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <HAL_RCC_ClockConfig+0x1f8>)
 80041b6:	430a      	orrs	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80041ba:	f000 f829 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80041be:	0001      	movs	r1, r0
 80041c0:	4b0d      	ldr	r3, [pc, #52]	; (80041f8 <HAL_RCC_ClockConfig+0x1f8>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	0a1b      	lsrs	r3, r3, #8
 80041c6:	220f      	movs	r2, #15
 80041c8:	401a      	ands	r2, r3
 80041ca:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <HAL_RCC_ClockConfig+0x204>)
 80041cc:	0092      	lsls	r2, r2, #2
 80041ce:	58d3      	ldr	r3, [r2, r3]
 80041d0:	221f      	movs	r2, #31
 80041d2:	4013      	ands	r3, r2
 80041d4:	000a      	movs	r2, r1
 80041d6:	40da      	lsrs	r2, r3
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_RCC_ClockConfig+0x208>)
 80041da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <HAL_RCC_ClockConfig+0x20c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	0018      	movs	r0, r3
 80041e2:	f7fc fce7 	bl	8000bb4 <HAL_InitTick>
 80041e6:	0003      	movs	r3, r0
}
 80041e8:	0018      	movs	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b004      	add	sp, #16
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40022000 	.word	0x40022000
 80041f4:	00001388 	.word	0x00001388
 80041f8:	40021000 	.word	0x40021000
 80041fc:	fffff0ff 	.word	0xfffff0ff
 8004200:	ffff8fff 	.word	0xffff8fff
 8004204:	08004b90 	.word	0x08004b90
 8004208:	20000000 	.word	0x20000000
 800420c:	20000004 	.word	0x20000004

08004210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004216:	4b3c      	ldr	r3, [pc, #240]	; (8004308 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2238      	movs	r2, #56	; 0x38
 800421c:	4013      	ands	r3, r2
 800421e:	d10f      	bne.n	8004240 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004220:	4b39      	ldr	r3, [pc, #228]	; (8004308 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	0adb      	lsrs	r3, r3, #11
 8004226:	2207      	movs	r2, #7
 8004228:	4013      	ands	r3, r2
 800422a:	2201      	movs	r2, #1
 800422c:	409a      	lsls	r2, r3
 800422e:	0013      	movs	r3, r2
 8004230:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004232:	6839      	ldr	r1, [r7, #0]
 8004234:	4835      	ldr	r0, [pc, #212]	; (800430c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004236:	f7fb ff65 	bl	8000104 <__udivsi3>
 800423a:	0003      	movs	r3, r0
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	e05d      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004240:	4b31      	ldr	r3, [pc, #196]	; (8004308 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2238      	movs	r2, #56	; 0x38
 8004246:	4013      	ands	r3, r2
 8004248:	2b08      	cmp	r3, #8
 800424a:	d102      	bne.n	8004252 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800424c:	4b30      	ldr	r3, [pc, #192]	; (8004310 <HAL_RCC_GetSysClockFreq+0x100>)
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	e054      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004252:	4b2d      	ldr	r3, [pc, #180]	; (8004308 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2238      	movs	r2, #56	; 0x38
 8004258:	4013      	ands	r3, r2
 800425a:	2b10      	cmp	r3, #16
 800425c:	d138      	bne.n	80042d0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800425e:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2203      	movs	r2, #3
 8004264:	4013      	ands	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004268:	4b27      	ldr	r3, [pc, #156]	; (8004308 <HAL_RCC_GetSysClockFreq+0xf8>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	2207      	movs	r2, #7
 8004270:	4013      	ands	r3, r2
 8004272:	3301      	adds	r3, #1
 8004274:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d10d      	bne.n	8004298 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	4824      	ldr	r0, [pc, #144]	; (8004310 <HAL_RCC_GetSysClockFreq+0x100>)
 8004280:	f7fb ff40 	bl	8000104 <__udivsi3>
 8004284:	0003      	movs	r3, r0
 8004286:	0019      	movs	r1, r3
 8004288:	4b1f      	ldr	r3, [pc, #124]	; (8004308 <HAL_RCC_GetSysClockFreq+0xf8>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	227f      	movs	r2, #127	; 0x7f
 8004290:	4013      	ands	r3, r2
 8004292:	434b      	muls	r3, r1
 8004294:	617b      	str	r3, [r7, #20]
        break;
 8004296:	e00d      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	481c      	ldr	r0, [pc, #112]	; (800430c <HAL_RCC_GetSysClockFreq+0xfc>)
 800429c:	f7fb ff32 	bl	8000104 <__udivsi3>
 80042a0:	0003      	movs	r3, r0
 80042a2:	0019      	movs	r1, r3
 80042a4:	4b18      	ldr	r3, [pc, #96]	; (8004308 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	227f      	movs	r2, #127	; 0x7f
 80042ac:	4013      	ands	r3, r2
 80042ae:	434b      	muls	r3, r1
 80042b0:	617b      	str	r3, [r7, #20]
        break;
 80042b2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80042b4:	4b14      	ldr	r3, [pc, #80]	; (8004308 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	0f5b      	lsrs	r3, r3, #29
 80042ba:	2207      	movs	r2, #7
 80042bc:	4013      	ands	r3, r2
 80042be:	3301      	adds	r3, #1
 80042c0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	6978      	ldr	r0, [r7, #20]
 80042c6:	f7fb ff1d 	bl	8000104 <__udivsi3>
 80042ca:	0003      	movs	r3, r0
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	e015      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80042d0:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2238      	movs	r2, #56	; 0x38
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d103      	bne.n	80042e4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	e00b      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80042e4:	4b08      	ldr	r3, [pc, #32]	; (8004308 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2238      	movs	r2, #56	; 0x38
 80042ea:	4013      	ands	r3, r2
 80042ec:	2b18      	cmp	r3, #24
 80042ee:	d103      	bne.n	80042f8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80042f0:	23fa      	movs	r3, #250	; 0xfa
 80042f2:	01db      	lsls	r3, r3, #7
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	e001      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042fc:	693b      	ldr	r3, [r7, #16]
}
 80042fe:	0018      	movs	r0, r3
 8004300:	46bd      	mov	sp, r7
 8004302:	b006      	add	sp, #24
 8004304:	bd80      	pop	{r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	40021000 	.word	0x40021000
 800430c:	00f42400 	.word	0x00f42400
 8004310:	007a1200 	.word	0x007a1200

08004314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800431c:	2313      	movs	r3, #19
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004324:	2312      	movs	r3, #18
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	029b      	lsls	r3, r3, #10
 8004334:	4013      	ands	r3, r2
 8004336:	d100      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004338:	e0a3      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800433a:	2011      	movs	r0, #17
 800433c:	183b      	adds	r3, r7, r0
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004342:	4ba5      	ldr	r3, [pc, #660]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004344:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004346:	2380      	movs	r3, #128	; 0x80
 8004348:	055b      	lsls	r3, r3, #21
 800434a:	4013      	ands	r3, r2
 800434c:	d110      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800434e:	4ba2      	ldr	r3, [pc, #648]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004352:	4ba1      	ldr	r3, [pc, #644]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004354:	2180      	movs	r1, #128	; 0x80
 8004356:	0549      	lsls	r1, r1, #21
 8004358:	430a      	orrs	r2, r1
 800435a:	63da      	str	r2, [r3, #60]	; 0x3c
 800435c:	4b9e      	ldr	r3, [pc, #632]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800435e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	055b      	lsls	r3, r3, #21
 8004364:	4013      	ands	r3, r2
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800436a:	183b      	adds	r3, r7, r0
 800436c:	2201      	movs	r2, #1
 800436e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004370:	4b9a      	ldr	r3, [pc, #616]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b99      	ldr	r3, [pc, #612]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004376:	2180      	movs	r1, #128	; 0x80
 8004378:	0049      	lsls	r1, r1, #1
 800437a:	430a      	orrs	r2, r1
 800437c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800437e:	f7fc fc75 	bl	8000c6c <HAL_GetTick>
 8004382:	0003      	movs	r3, r0
 8004384:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004386:	e00b      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004388:	f7fc fc70 	bl	8000c6c <HAL_GetTick>
 800438c:	0002      	movs	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d904      	bls.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004396:	2313      	movs	r3, #19
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	2203      	movs	r2, #3
 800439c:	701a      	strb	r2, [r3, #0]
        break;
 800439e:	e005      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043a0:	4b8e      	ldr	r3, [pc, #568]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	4013      	ands	r3, r2
 80043aa:	d0ed      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80043ac:	2313      	movs	r3, #19
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d154      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043b6:	4b88      	ldr	r3, [pc, #544]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043ba:	23c0      	movs	r3, #192	; 0xc0
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4013      	ands	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d019      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d014      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043d2:	4b81      	ldr	r3, [pc, #516]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d6:	4a82      	ldr	r2, [pc, #520]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80043d8:	4013      	ands	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043dc:	4b7e      	ldr	r3, [pc, #504]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043e0:	4b7d      	ldr	r3, [pc, #500]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043e2:	2180      	movs	r1, #128	; 0x80
 80043e4:	0249      	lsls	r1, r1, #9
 80043e6:	430a      	orrs	r2, r1
 80043e8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043ea:	4b7b      	ldr	r3, [pc, #492]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043ee:	4b7a      	ldr	r3, [pc, #488]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043f0:	497c      	ldr	r1, [pc, #496]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80043f2:	400a      	ands	r2, r1
 80043f4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043f6:	4b78      	ldr	r3, [pc, #480]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2201      	movs	r2, #1
 8004400:	4013      	ands	r3, r2
 8004402:	d016      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fc fc32 	bl	8000c6c <HAL_GetTick>
 8004408:	0003      	movs	r3, r0
 800440a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800440c:	e00c      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fc fc2d 	bl	8000c6c <HAL_GetTick>
 8004412:	0002      	movs	r2, r0
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	4a73      	ldr	r2, [pc, #460]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d904      	bls.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800441e:	2313      	movs	r3, #19
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	2203      	movs	r2, #3
 8004424:	701a      	strb	r2, [r3, #0]
            break;
 8004426:	e004      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004428:	4b6b      	ldr	r3, [pc, #428]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800442a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442c:	2202      	movs	r2, #2
 800442e:	4013      	ands	r3, r2
 8004430:	d0ed      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004432:	2313      	movs	r3, #19
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10a      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800443c:	4b66      	ldr	r3, [pc, #408]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800443e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004440:	4a67      	ldr	r2, [pc, #412]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004442:	4013      	ands	r3, r2
 8004444:	0019      	movs	r1, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800444a:	4b63      	ldr	r3, [pc, #396]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800444c:	430a      	orrs	r2, r1
 800444e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004450:	e00c      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004452:	2312      	movs	r3, #18
 8004454:	18fb      	adds	r3, r7, r3
 8004456:	2213      	movs	r2, #19
 8004458:	18ba      	adds	r2, r7, r2
 800445a:	7812      	ldrb	r2, [r2, #0]
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	e005      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004460:	2312      	movs	r3, #18
 8004462:	18fb      	adds	r3, r7, r3
 8004464:	2213      	movs	r2, #19
 8004466:	18ba      	adds	r2, r7, r2
 8004468:	7812      	ldrb	r2, [r2, #0]
 800446a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800446c:	2311      	movs	r3, #17
 800446e:	18fb      	adds	r3, r7, r3
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d105      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004476:	4b58      	ldr	r3, [pc, #352]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004478:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800447a:	4b57      	ldr	r3, [pc, #348]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800447c:	495b      	ldr	r1, [pc, #364]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800447e:	400a      	ands	r2, r1
 8004480:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2201      	movs	r2, #1
 8004488:	4013      	ands	r3, r2
 800448a:	d009      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800448c:	4b52      	ldr	r3, [pc, #328]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	2203      	movs	r2, #3
 8004492:	4393      	bics	r3, r2
 8004494:	0019      	movs	r1, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	4b4f      	ldr	r3, [pc, #316]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800449c:	430a      	orrs	r2, r1
 800449e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2210      	movs	r2, #16
 80044a6:	4013      	ands	r3, r2
 80044a8:	d009      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044aa:	4b4b      	ldr	r3, [pc, #300]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ae:	4a50      	ldr	r2, [pc, #320]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	0019      	movs	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	4b47      	ldr	r3, [pc, #284]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044ba:	430a      	orrs	r2, r1
 80044bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	2380      	movs	r3, #128	; 0x80
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4013      	ands	r3, r2
 80044c8:	d009      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ca:	4b43      	ldr	r3, [pc, #268]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ce:	4a49      	ldr	r2, [pc, #292]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	0019      	movs	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695a      	ldr	r2, [r3, #20]
 80044d8:	4b3f      	ldr	r3, [pc, #252]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044da:	430a      	orrs	r2, r1
 80044dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	2380      	movs	r3, #128	; 0x80
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4013      	ands	r3, r2
 80044e8:	d009      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044ea:	4b3b      	ldr	r3, [pc, #236]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ee:	4a42      	ldr	r2, [pc, #264]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	0019      	movs	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	4b37      	ldr	r3, [pc, #220]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044fa:	430a      	orrs	r2, r1
 80044fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2220      	movs	r2, #32
 8004504:	4013      	ands	r3, r2
 8004506:	d009      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004508:	4b33      	ldr	r3, [pc, #204]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450c:	4a3b      	ldr	r2, [pc, #236]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800450e:	4013      	ands	r3, r2
 8004510:	0019      	movs	r1, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	4b30      	ldr	r3, [pc, #192]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004518:	430a      	orrs	r2, r1
 800451a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	01db      	lsls	r3, r3, #7
 8004524:	4013      	ands	r3, r2
 8004526:	d015      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004528:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	0899      	lsrs	r1, r3, #2
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69da      	ldr	r2, [r3, #28]
 8004534:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004536:	430a      	orrs	r2, r1
 8004538:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69da      	ldr	r2, [r3, #28]
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	05db      	lsls	r3, r3, #23
 8004542:	429a      	cmp	r2, r3
 8004544:	d106      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004546:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	4b23      	ldr	r3, [pc, #140]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800454c:	2180      	movs	r1, #128	; 0x80
 800454e:	0249      	lsls	r1, r1, #9
 8004550:	430a      	orrs	r2, r1
 8004552:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	039b      	lsls	r3, r3, #14
 800455c:	4013      	ands	r3, r2
 800455e:	d016      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004560:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	4a26      	ldr	r2, [pc, #152]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004566:	4013      	ands	r3, r2
 8004568:	0019      	movs	r1, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1a      	ldr	r2, [r3, #32]
 800456e:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004570:	430a      	orrs	r2, r1
 8004572:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1a      	ldr	r2, [r3, #32]
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	03db      	lsls	r3, r3, #15
 800457c:	429a      	cmp	r2, r3
 800457e:	d106      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004580:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004586:	2180      	movs	r1, #128	; 0x80
 8004588:	0449      	lsls	r1, r1, #17
 800458a:	430a      	orrs	r2, r1
 800458c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	4013      	ands	r3, r2
 8004598:	d016      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800459a:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	4a19      	ldr	r2, [pc, #100]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	0019      	movs	r1, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045aa:	430a      	orrs	r2, r1
 80045ac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	01db      	lsls	r3, r3, #7
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d106      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80045ba:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045c0:	2180      	movs	r1, #128	; 0x80
 80045c2:	0249      	lsls	r1, r1, #9
 80045c4:	430a      	orrs	r2, r1
 80045c6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80045c8:	2312      	movs	r3, #18
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	781b      	ldrb	r3, [r3, #0]
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b006      	add	sp, #24
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40007000 	.word	0x40007000
 80045e0:	fffffcff 	.word	0xfffffcff
 80045e4:	fffeffff 	.word	0xfffeffff
 80045e8:	00001388 	.word	0x00001388
 80045ec:	efffffff 	.word	0xefffffff
 80045f0:	fffff3ff 	.word	0xfffff3ff
 80045f4:	fff3ffff 	.word	0xfff3ffff
 80045f8:	ffcfffff 	.word	0xffcfffff
 80045fc:	ffffcfff 	.word	0xffffcfff
 8004600:	ffbfffff 	.word	0xffbfffff
 8004604:	ffff3fff 	.word	0xffff3fff

08004608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e04a      	b.n	80046b0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	223d      	movs	r2, #61	; 0x3d
 800461e:	5c9b      	ldrb	r3, [r3, r2]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d107      	bne.n	8004636 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	223c      	movs	r2, #60	; 0x3c
 800462a:	2100      	movs	r1, #0
 800462c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	0018      	movs	r0, r3
 8004632:	f7fc f9ff 	bl	8000a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	223d      	movs	r2, #61	; 0x3d
 800463a:	2102      	movs	r1, #2
 800463c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3304      	adds	r3, #4
 8004646:	0019      	movs	r1, r3
 8004648:	0010      	movs	r0, r2
 800464a:	f000 f9db 	bl	8004a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2248      	movs	r2, #72	; 0x48
 8004652:	2101      	movs	r1, #1
 8004654:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	223e      	movs	r2, #62	; 0x3e
 800465a:	2101      	movs	r1, #1
 800465c:	5499      	strb	r1, [r3, r2]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	223f      	movs	r2, #63	; 0x3f
 8004662:	2101      	movs	r1, #1
 8004664:	5499      	strb	r1, [r3, r2]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2240      	movs	r2, #64	; 0x40
 800466a:	2101      	movs	r1, #1
 800466c:	5499      	strb	r1, [r3, r2]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2241      	movs	r2, #65	; 0x41
 8004672:	2101      	movs	r1, #1
 8004674:	5499      	strb	r1, [r3, r2]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2242      	movs	r2, #66	; 0x42
 800467a:	2101      	movs	r1, #1
 800467c:	5499      	strb	r1, [r3, r2]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2243      	movs	r2, #67	; 0x43
 8004682:	2101      	movs	r1, #1
 8004684:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2244      	movs	r2, #68	; 0x44
 800468a:	2101      	movs	r1, #1
 800468c:	5499      	strb	r1, [r3, r2]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2245      	movs	r2, #69	; 0x45
 8004692:	2101      	movs	r1, #1
 8004694:	5499      	strb	r1, [r3, r2]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2246      	movs	r2, #70	; 0x46
 800469a:	2101      	movs	r1, #1
 800469c:	5499      	strb	r1, [r3, r2]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2247      	movs	r2, #71	; 0x47
 80046a2:	2101      	movs	r1, #1
 80046a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	223d      	movs	r2, #61	; 0x3d
 80046aa:	2101      	movs	r1, #1
 80046ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	0018      	movs	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b002      	add	sp, #8
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	223d      	movs	r2, #61	; 0x3d
 80046c4:	5c9b      	ldrb	r3, [r3, r2]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d001      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e03d      	b.n	800474c <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	223d      	movs	r2, #61	; 0x3d
 80046d4:	2102      	movs	r1, #2
 80046d6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2101      	movs	r1, #1
 80046e4:	430a      	orrs	r2, r1
 80046e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a19      	ldr	r2, [pc, #100]	; (8004754 <HAL_TIM_Base_Start_IT+0x9c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00a      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x50>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	05db      	lsls	r3, r3, #23
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d004      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x50>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a15      	ldr	r2, [pc, #84]	; (8004758 <HAL_TIM_Base_Start_IT+0xa0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d116      	bne.n	8004736 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	4a13      	ldr	r2, [pc, #76]	; (800475c <HAL_TIM_Base_Start_IT+0xa4>)
 8004710:	4013      	ands	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b06      	cmp	r3, #6
 8004718:	d016      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x90>
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	025b      	lsls	r3, r3, #9
 8004720:	429a      	cmp	r2, r3
 8004722:	d011      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2101      	movs	r1, #1
 8004730:	430a      	orrs	r2, r1
 8004732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004734:	e008      	b.n	8004748 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2101      	movs	r1, #1
 8004742:	430a      	orrs	r2, r1
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	e000      	b.n	800474a <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004748:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	b004      	add	sp, #16
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40000400 	.word	0x40000400
 800475c:	00010007 	.word	0x00010007

08004760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2202      	movs	r2, #2
 8004770:	4013      	ands	r3, r2
 8004772:	2b02      	cmp	r3, #2
 8004774:	d124      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	2202      	movs	r2, #2
 800477e:	4013      	ands	r3, r2
 8004780:	2b02      	cmp	r3, #2
 8004782:	d11d      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2203      	movs	r2, #3
 800478a:	4252      	negs	r2, r2
 800478c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2203      	movs	r2, #3
 800479c:	4013      	ands	r3, r2
 800479e:	d004      	beq.n	80047aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	0018      	movs	r0, r3
 80047a4:	f000 f916 	bl	80049d4 <HAL_TIM_IC_CaptureCallback>
 80047a8:	e007      	b.n	80047ba <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f000 f909 	bl	80049c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0018      	movs	r0, r3
 80047b6:	f000 f915 	bl	80049e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2204      	movs	r2, #4
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d125      	bne.n	800481a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	2204      	movs	r2, #4
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d11e      	bne.n	800481a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2205      	movs	r2, #5
 80047e2:	4252      	negs	r2, r2
 80047e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	23c0      	movs	r3, #192	; 0xc0
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4013      	ands	r3, r2
 80047f8:	d004      	beq.n	8004804 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	0018      	movs	r0, r3
 80047fe:	f000 f8e9 	bl	80049d4 <HAL_TIM_IC_CaptureCallback>
 8004802:	e007      	b.n	8004814 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	0018      	movs	r0, r3
 8004808:	f000 f8dc 	bl	80049c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	0018      	movs	r0, r3
 8004810:	f000 f8e8 	bl	80049e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2208      	movs	r2, #8
 8004822:	4013      	ands	r3, r2
 8004824:	2b08      	cmp	r3, #8
 8004826:	d124      	bne.n	8004872 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	2208      	movs	r2, #8
 8004830:	4013      	ands	r3, r2
 8004832:	2b08      	cmp	r3, #8
 8004834:	d11d      	bne.n	8004872 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2209      	movs	r2, #9
 800483c:	4252      	negs	r2, r2
 800483e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2204      	movs	r2, #4
 8004844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	2203      	movs	r2, #3
 800484e:	4013      	ands	r3, r2
 8004850:	d004      	beq.n	800485c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	0018      	movs	r0, r3
 8004856:	f000 f8bd 	bl	80049d4 <HAL_TIM_IC_CaptureCallback>
 800485a:	e007      	b.n	800486c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	0018      	movs	r0, r3
 8004860:	f000 f8b0 	bl	80049c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	0018      	movs	r0, r3
 8004868:	f000 f8bc 	bl	80049e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2210      	movs	r2, #16
 800487a:	4013      	ands	r3, r2
 800487c:	2b10      	cmp	r3, #16
 800487e:	d125      	bne.n	80048cc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	2210      	movs	r2, #16
 8004888:	4013      	ands	r3, r2
 800488a:	2b10      	cmp	r3, #16
 800488c:	d11e      	bne.n	80048cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2211      	movs	r2, #17
 8004894:	4252      	negs	r2, r2
 8004896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2208      	movs	r2, #8
 800489c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	23c0      	movs	r3, #192	; 0xc0
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4013      	ands	r3, r2
 80048aa:	d004      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	0018      	movs	r0, r3
 80048b0:	f000 f890 	bl	80049d4 <HAL_TIM_IC_CaptureCallback>
 80048b4:	e007      	b.n	80048c6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	0018      	movs	r0, r3
 80048ba:	f000 f883 	bl	80049c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f000 f88f 	bl	80049e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2201      	movs	r2, #1
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d10f      	bne.n	80048fa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d108      	bne.n	80048fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2202      	movs	r2, #2
 80048ee:	4252      	negs	r2, r2
 80048f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	0018      	movs	r0, r3
 80048f6:	f7fb fc91 	bl	800021c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2280      	movs	r2, #128	; 0x80
 8004902:	4013      	ands	r3, r2
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d10f      	bne.n	8004928 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	2280      	movs	r2, #128	; 0x80
 8004910:	4013      	ands	r3, r2
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d108      	bne.n	8004928 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2281      	movs	r2, #129	; 0x81
 800491c:	4252      	negs	r2, r2
 800491e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	0018      	movs	r0, r3
 8004924:	f000 f8ec 	bl	8004b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	2380      	movs	r3, #128	; 0x80
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	401a      	ands	r2, r3
 8004934:	2380      	movs	r3, #128	; 0x80
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	429a      	cmp	r2, r3
 800493a:	d10e      	bne.n	800495a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	2280      	movs	r2, #128	; 0x80
 8004944:	4013      	ands	r3, r2
 8004946:	2b80      	cmp	r3, #128	; 0x80
 8004948:	d107      	bne.n	800495a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1c      	ldr	r2, [pc, #112]	; (80049c0 <HAL_TIM_IRQHandler+0x260>)
 8004950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0018      	movs	r0, r3
 8004956:	f000 f8db 	bl	8004b10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2240      	movs	r2, #64	; 0x40
 8004962:	4013      	ands	r3, r2
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d10f      	bne.n	8004988 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2240      	movs	r2, #64	; 0x40
 8004970:	4013      	ands	r3, r2
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d108      	bne.n	8004988 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2241      	movs	r2, #65	; 0x41
 800497c:	4252      	negs	r2, r2
 800497e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	0018      	movs	r0, r3
 8004984:	f000 f836 	bl	80049f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2220      	movs	r2, #32
 8004990:	4013      	ands	r3, r2
 8004992:	2b20      	cmp	r3, #32
 8004994:	d10f      	bne.n	80049b6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	4013      	ands	r3, r2
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	d108      	bne.n	80049b6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2221      	movs	r2, #33	; 0x21
 80049aa:	4252      	negs	r2, r2
 80049ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f000 f89d 	bl	8004af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b002      	add	sp, #8
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	fffffeff 	.word	0xfffffeff

080049c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049cc:	46c0      	nop			; (mov r8, r8)
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b002      	add	sp, #8
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	46bd      	mov	sp, r7
 80049e0:	b002      	add	sp, #8
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049ec:	46c0      	nop			; (mov r8, r8)
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b002      	add	sp, #8
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b002      	add	sp, #8
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a30      	ldr	r2, [pc, #192]	; (8004ad8 <TIM_Base_SetConfig+0xd4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d008      	beq.n	8004a2e <TIM_Base_SetConfig+0x2a>
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	05db      	lsls	r3, r3, #23
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d003      	beq.n	8004a2e <TIM_Base_SetConfig+0x2a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a2c      	ldr	r2, [pc, #176]	; (8004adc <TIM_Base_SetConfig+0xd8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d108      	bne.n	8004a40 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2270      	movs	r2, #112	; 0x70
 8004a32:	4393      	bics	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a25      	ldr	r2, [pc, #148]	; (8004ad8 <TIM_Base_SetConfig+0xd4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d014      	beq.n	8004a72 <TIM_Base_SetConfig+0x6e>
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	2380      	movs	r3, #128	; 0x80
 8004a4c:	05db      	lsls	r3, r3, #23
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d00f      	beq.n	8004a72 <TIM_Base_SetConfig+0x6e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a21      	ldr	r2, [pc, #132]	; (8004adc <TIM_Base_SetConfig+0xd8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00b      	beq.n	8004a72 <TIM_Base_SetConfig+0x6e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a20      	ldr	r2, [pc, #128]	; (8004ae0 <TIM_Base_SetConfig+0xdc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d007      	beq.n	8004a72 <TIM_Base_SetConfig+0x6e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1f      	ldr	r2, [pc, #124]	; (8004ae4 <TIM_Base_SetConfig+0xe0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d003      	beq.n	8004a72 <TIM_Base_SetConfig+0x6e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1e      	ldr	r2, [pc, #120]	; (8004ae8 <TIM_Base_SetConfig+0xe4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d108      	bne.n	8004a84 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <TIM_Base_SetConfig+0xe8>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2280      	movs	r2, #128	; 0x80
 8004a88:	4393      	bics	r3, r2
 8004a8a:	001a      	movs	r2, r3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <TIM_Base_SetConfig+0xd4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d007      	beq.n	8004ac2 <TIM_Base_SetConfig+0xbe>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a0b      	ldr	r2, [pc, #44]	; (8004ae4 <TIM_Base_SetConfig+0xe0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d003      	beq.n	8004ac2 <TIM_Base_SetConfig+0xbe>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a0a      	ldr	r2, [pc, #40]	; (8004ae8 <TIM_Base_SetConfig+0xe4>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d103      	bne.n	8004aca <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	615a      	str	r2, [r3, #20]
}
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b004      	add	sp, #16
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	40000400 	.word	0x40000400
 8004ae0:	40002000 	.word	0x40002000
 8004ae4:	40014400 	.word	0x40014400
 8004ae8:	40014800 	.word	0x40014800
 8004aec:	fffffcff 	.word	0xfffffcff

08004af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b002      	add	sp, #8
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b08:	46c0      	nop			; (mov r8, r8)
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b002      	add	sp, #8
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b18:	46c0      	nop			; (mov r8, r8)
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b002      	add	sp, #8
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <__libc_init_array>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	2600      	movs	r6, #0
 8004b24:	4d0c      	ldr	r5, [pc, #48]	; (8004b58 <__libc_init_array+0x38>)
 8004b26:	4c0d      	ldr	r4, [pc, #52]	; (8004b5c <__libc_init_array+0x3c>)
 8004b28:	1b64      	subs	r4, r4, r5
 8004b2a:	10a4      	asrs	r4, r4, #2
 8004b2c:	42a6      	cmp	r6, r4
 8004b2e:	d109      	bne.n	8004b44 <__libc_init_array+0x24>
 8004b30:	2600      	movs	r6, #0
 8004b32:	f000 f821 	bl	8004b78 <_init>
 8004b36:	4d0a      	ldr	r5, [pc, #40]	; (8004b60 <__libc_init_array+0x40>)
 8004b38:	4c0a      	ldr	r4, [pc, #40]	; (8004b64 <__libc_init_array+0x44>)
 8004b3a:	1b64      	subs	r4, r4, r5
 8004b3c:	10a4      	asrs	r4, r4, #2
 8004b3e:	42a6      	cmp	r6, r4
 8004b40:	d105      	bne.n	8004b4e <__libc_init_array+0x2e>
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
 8004b44:	00b3      	lsls	r3, r6, #2
 8004b46:	58eb      	ldr	r3, [r5, r3]
 8004b48:	4798      	blx	r3
 8004b4a:	3601      	adds	r6, #1
 8004b4c:	e7ee      	b.n	8004b2c <__libc_init_array+0xc>
 8004b4e:	00b3      	lsls	r3, r6, #2
 8004b50:	58eb      	ldr	r3, [r5, r3]
 8004b52:	4798      	blx	r3
 8004b54:	3601      	adds	r6, #1
 8004b56:	e7f2      	b.n	8004b3e <__libc_init_array+0x1e>
 8004b58:	08004bd0 	.word	0x08004bd0
 8004b5c:	08004bd0 	.word	0x08004bd0
 8004b60:	08004bd0 	.word	0x08004bd0
 8004b64:	08004bd4 	.word	0x08004bd4

08004b68 <memset>:
 8004b68:	0003      	movs	r3, r0
 8004b6a:	1882      	adds	r2, r0, r2
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d100      	bne.n	8004b72 <memset+0xa>
 8004b70:	4770      	bx	lr
 8004b72:	7019      	strb	r1, [r3, #0]
 8004b74:	3301      	adds	r3, #1
 8004b76:	e7f9      	b.n	8004b6c <memset+0x4>

08004b78 <_init>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7e:	bc08      	pop	{r3}
 8004b80:	469e      	mov	lr, r3
 8004b82:	4770      	bx	lr

08004b84 <_fini>:
 8004b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8a:	bc08      	pop	{r3}
 8004b8c:	469e      	mov	lr, r3
 8004b8e:	4770      	bx	lr
