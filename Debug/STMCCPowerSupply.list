
STMCCPowerSupply.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005884  08005884  00015884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005918  08005918  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005918  08005918  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005918  08005918  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005918  08005918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000000c  0800592c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  0800592c  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011411  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002719  00000000  00000000  00031445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00033b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  00034ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017543  00000000  00000000  00035cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c7d  00000000  00000000  0004d20b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096fe2  00000000  00000000  00060e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7e6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ebc  00000000  00000000  000f7ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800586c 	.word	0x0800586c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800586c 	.word	0x0800586c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <HAL_TIM_PeriodElapsedCallback>:
static void MX_CRC_Init(void);
static void MX_TIM16_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16){ // Je≈ºeli przerwanie pochodzi od timera 16
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0d      	ldr	r2, [pc, #52]	; (8000260 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d113      	bne.n	8000256 <HAL_TIM_PeriodElapsedCallback+0x3a>

		 static int i =0;
		 i++;
 800022e:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	1c5a      	adds	r2, r3, #1
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000236:	601a      	str	r2, [r3, #0]
		 if (i>100)
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2b64      	cmp	r3, #100	; 0x64
 800023e:	dd0a      	ble.n	8000256 <HAL_TIM_PeriodElapsedCallback+0x3a>
		 {
			 HAL_GPIO_TogglePin(ACTION_LED_GPIO_Port, ACTION_LED_Pin);
 8000240:	2380      	movs	r3, #128	; 0x80
 8000242:	019a      	lsls	r2, r3, #6
 8000244:	23a0      	movs	r3, #160	; 0xa0
 8000246:	05db      	lsls	r3, r3, #23
 8000248:	0011      	movs	r1, r2
 800024a:	0018      	movs	r0, r3
 800024c:	f001 ffcf 	bl	80021ee <HAL_GPIO_TogglePin>
			i = 0;
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
		 }

	}
}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	46bd      	mov	sp, r7
 800025a:	b002      	add	sp, #8
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	40014400 	.word	0x40014400
 8000264:	20000220 	.word	0x20000220

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026c:	f000 fd52 	bl	8000d14 <HAL_Init>

  /* USER CODE BEGIN Init */

	aRxBuffer[0]=0x00;
 8000270:	4b2d      	ldr	r3, [pc, #180]	; (8000328 <main+0xc0>)
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
	aRxBuffer[1]=0x00;
 8000276:	4b2c      	ldr	r3, [pc, #176]	; (8000328 <main+0xc0>)
 8000278:	2200      	movs	r2, #0
 800027a:	705a      	strb	r2, [r3, #1]
	aRxBuffer[2]=0x00;
 800027c:	4b2a      	ldr	r3, [pc, #168]	; (8000328 <main+0xc0>)
 800027e:	2200      	movs	r2, #0
 8000280:	709a      	strb	r2, [r3, #2]
	aRxBuffer[3]=0x00;
 8000282:	4b29      	ldr	r3, [pc, #164]	; (8000328 <main+0xc0>)
 8000284:	2200      	movs	r2, #0
 8000286:	70da      	strb	r2, [r3, #3]
	aTxBuffer[0]=0xAA;
 8000288:	4b28      	ldr	r3, [pc, #160]	; (800032c <main+0xc4>)
 800028a:	22aa      	movs	r2, #170	; 0xaa
 800028c:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1]=0xBB;
 800028e:	4b27      	ldr	r3, [pc, #156]	; (800032c <main+0xc4>)
 8000290:	22bb      	movs	r2, #187	; 0xbb
 8000292:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2]=0xCC;
 8000294:	4b25      	ldr	r3, [pc, #148]	; (800032c <main+0xc4>)
 8000296:	22cc      	movs	r2, #204	; 0xcc
 8000298:	709a      	strb	r2, [r3, #2]
	aTxBuffer[3]=0xDD;
 800029a:	4b24      	ldr	r3, [pc, #144]	; (800032c <main+0xc4>)
 800029c:	22dd      	movs	r2, #221	; 0xdd
 800029e:	70da      	strb	r2, [r3, #3]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f84e 	bl	8000340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f000 fa1e 	bl	80006e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002a8:	f000 f8a8 	bl	80003fc <MX_ADC1_Init>
  MX_I2C1_Init();
 80002ac:	f000 f932 	bl	8000514 <MX_I2C1_Init>
  MX_DMA_Init();
 80002b0:	f000 f9fa 	bl	80006a8 <MX_DMA_Init>
  MX_CRC_Init();
 80002b4:	f000 f90a 	bl	80004cc <MX_CRC_Init>
  MX_TIM16_Init();
 80002b8:	f000 f9ce 	bl	8000658 <MX_TIM16_Init>
  MX_TIM3_Init();
 80002bc:	f000 f96c 	bl	8000598 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim16);
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <main+0xc8>)
 80002c2:	0018      	movs	r0, r3
 80002c4:	f004 fa70 	bl	80047a8 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <main+0xc8>)
 80002ca:	0018      	movs	r0, r3
 80002cc:	f004 fb10 	bl	80048f0 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start(&htim3);
 80002d0:	4b18      	ldr	r3, [pc, #96]	; (8000334 <main+0xcc>)
 80002d2:	0018      	movs	r0, r3
 80002d4:	f004 fac0 	bl	8004858 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80002d8:	4b16      	ldr	r3, [pc, #88]	; (8000334 <main+0xcc>)
 80002da:	0018      	movs	r0, r3
 80002dc:	f004 fb08 	bl	80048f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80002e0:	4b14      	ldr	r3, [pc, #80]	; (8000334 <main+0xcc>)
 80002e2:	210c      	movs	r1, #12
 80002e4:	0018      	movs	r0, r3
 80002e6:	f004 fbaf 	bl	8004a48 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 50);
 80002ea:	4b12      	ldr	r3, [pc, #72]	; (8000334 <main+0xcc>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2232      	movs	r2, #50	; 0x32
 80002f0:	641a      	str	r2, [r3, #64]	; 0x40



  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <main+0xd0>)
 80002f4:	0018      	movs	r0, r3
 80002f6:	f002 f98d 	bl	8002614 <HAL_I2C_EnableListen_IT>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <main+0x9a>
  {
    /* Transfer error in reception process */
    Error_Handler();
 80002fe:	f000 facc 	bl	800089a <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (Xfer_Complete ==1)
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <main+0xd4>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d1fb      	bne.n	8000302 <main+0x9a>
		  {
		  // ##- Put I2C peripheral in listen mode process ###########################
		  HAL_Delay(1);
 800030a:	2001      	movs	r0, #1
 800030c:	f000 fd88 	bl	8000e20 <HAL_Delay>
		   if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <main+0xd0>)
 8000312:	0018      	movs	r0, r3
 8000314:	f002 f97e 	bl	8002614 <HAL_I2C_EnableListen_IT>
 8000318:	1e03      	subs	r3, r0, #0
 800031a:	d001      	beq.n	8000320 <main+0xb8>
		   {
			 Error_Handler();
 800031c:	f000 fabd 	bl	800089a <Error_Handler>
		   }
		 Xfer_Complete =0;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <main+0xd4>)
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
	  if (Xfer_Complete ==1)
 8000326:	e7ec      	b.n	8000302 <main+0x9a>
 8000328:	20000034 	.word	0x20000034
 800032c:	20000030 	.word	0x20000030
 8000330:	200001d4 	.word	0x200001d4
 8000334:	20000188 	.word	0x20000188
 8000338:	2000013c 	.word	0x2000013c
 800033c:	2000002c 	.word	0x2000002c

08000340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b093      	sub	sp, #76	; 0x4c
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	2410      	movs	r4, #16
 8000348:	193b      	adds	r3, r7, r4
 800034a:	0018      	movs	r0, r3
 800034c:	2338      	movs	r3, #56	; 0x38
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f005 fa83 	bl	800585c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000356:	003b      	movs	r3, r7
 8000358:	0018      	movs	r0, r3
 800035a:	2310      	movs	r3, #16
 800035c:	001a      	movs	r2, r3
 800035e:	2100      	movs	r1, #0
 8000360:	f005 fa7c 	bl	800585c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000364:	2380      	movs	r3, #128	; 0x80
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	0018      	movs	r0, r3
 800036a:	f003 fbbf 	bl	8003aec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800036e:	193b      	adds	r3, r7, r4
 8000370:	2202      	movs	r2, #2
 8000372:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000374:	193b      	adds	r3, r7, r4
 8000376:	2280      	movs	r2, #128	; 0x80
 8000378:	0052      	lsls	r2, r2, #1
 800037a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800037c:	0021      	movs	r1, r4
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000384:	187b      	adds	r3, r7, r1
 8000386:	2240      	movs	r2, #64	; 0x40
 8000388:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038a:	187b      	adds	r3, r7, r1
 800038c:	2202      	movs	r2, #2
 800038e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2202      	movs	r2, #2
 8000394:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000396:	187b      	adds	r3, r7, r1
 8000398:	2230      	movs	r2, #48	; 0x30
 800039a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 80;
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2250      	movs	r2, #80	; 0x50
 80003a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2280      	movs	r2, #128	; 0x80
 80003a6:	0292      	lsls	r2, r2, #10
 80003a8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2280      	movs	r2, #128	; 0x80
 80003ae:	0492      	lsls	r2, r2, #18
 80003b0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2280      	movs	r2, #128	; 0x80
 80003b6:	0612      	lsls	r2, r2, #24
 80003b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	0018      	movs	r0, r3
 80003be:	f003 fbd5 	bl	8003b6c <HAL_RCC_OscConfig>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003c6:	f000 fa68 	bl	800089a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	003b      	movs	r3, r7
 80003cc:	2207      	movs	r2, #7
 80003ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d0:	003b      	movs	r3, r7
 80003d2:	2202      	movs	r2, #2
 80003d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d6:	003b      	movs	r3, r7
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003dc:	003b      	movs	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e2:	003b      	movs	r3, r7
 80003e4:	2102      	movs	r1, #2
 80003e6:	0018      	movs	r0, r3
 80003e8:	f003 feda 	bl	80041a0 <HAL_RCC_ClockConfig>
 80003ec:	1e03      	subs	r3, r0, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003f0:	f000 fa53 	bl	800089a <Error_Handler>
  }
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b013      	add	sp, #76	; 0x4c
 80003fa:	bd90      	pop	{r4, r7, pc}

080003fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	0018      	movs	r0, r3
 8000406:	230c      	movs	r3, #12
 8000408:	001a      	movs	r2, r3
 800040a:	2100      	movs	r1, #0
 800040c:	f005 fa26 	bl	800585c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000410:	4b2b      	ldr	r3, [pc, #172]	; (80004c0 <MX_ADC1_Init+0xc4>)
 8000412:	4a2c      	ldr	r2, [pc, #176]	; (80004c4 <MX_ADC1_Init+0xc8>)
 8000414:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000416:	4b2a      	ldr	r3, [pc, #168]	; (80004c0 <MX_ADC1_Init+0xc4>)
 8000418:	2280      	movs	r2, #128	; 0x80
 800041a:	05d2      	lsls	r2, r2, #23
 800041c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800041e:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <MX_ADC1_Init+0xc4>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000424:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <MX_ADC1_Init+0xc4>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800042a:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <MX_ADC1_Init+0xc4>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000430:	4b23      	ldr	r3, [pc, #140]	; (80004c0 <MX_ADC1_Init+0xc4>)
 8000432:	2204      	movs	r2, #4
 8000434:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000436:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <MX_ADC1_Init+0xc4>)
 8000438:	2200      	movs	r2, #0
 800043a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800043c:	4b20      	ldr	r3, [pc, #128]	; (80004c0 <MX_ADC1_Init+0xc4>)
 800043e:	2200      	movs	r2, #0
 8000440:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000442:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <MX_ADC1_Init+0xc4>)
 8000444:	2201      	movs	r2, #1
 8000446:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000448:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <MX_ADC1_Init+0xc4>)
 800044a:	2201      	movs	r2, #1
 800044c:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800044e:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <MX_ADC1_Init+0xc4>)
 8000450:	2200      	movs	r2, #0
 8000452:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000454:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <MX_ADC1_Init+0xc4>)
 8000456:	2200      	movs	r2, #0
 8000458:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800045a:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <MX_ADC1_Init+0xc4>)
 800045c:	222c      	movs	r2, #44	; 0x2c
 800045e:	2100      	movs	r1, #0
 8000460:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <MX_ADC1_Init+0xc4>)
 8000464:	2200      	movs	r2, #0
 8000466:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <MX_ADC1_Init+0xc4>)
 800046a:	2206      	movs	r2, #6
 800046c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 800046e:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <MX_ADC1_Init+0xc4>)
 8000470:	2206      	movs	r2, #6
 8000472:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <MX_ADC1_Init+0xc4>)
 8000476:	223c      	movs	r2, #60	; 0x3c
 8000478:	2100      	movs	r1, #0
 800047a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800047c:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <MX_ADC1_Init+0xc4>)
 800047e:	2200      	movs	r2, #0
 8000480:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <MX_ADC1_Init+0xc4>)
 8000484:	0018      	movs	r0, r3
 8000486:	f000 fdfd 	bl	8001084 <HAL_ADC_Init>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800048e:	f000 fa04 	bl	800089a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <MX_ADC1_Init+0xcc>)
 8000496:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a4:	1d3a      	adds	r2, r7, #4
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <MX_ADC1_Init+0xc4>)
 80004a8:	0011      	movs	r1, r2
 80004aa:	0018      	movs	r0, r3
 80004ac:	f000 ff92 	bl	80013d4 <HAL_ADC_ConfigChannel>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80004b4:	f000 f9f1 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b004      	add	sp, #16
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000058 	.word	0x20000058
 80004c4:	40012400 	.word	0x40012400
 80004c8:	b0001000 	.word	0xb0001000

080004cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004d0:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_CRC_Init+0x40>)
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <MX_CRC_Init+0x44>)
 80004d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <MX_CRC_Init+0x40>)
 80004d8:	2200      	movs	r2, #0
 80004da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80004dc:	4b0b      	ldr	r3, [pc, #44]	; (800050c <MX_CRC_Init+0x40>)
 80004de:	2200      	movs	r2, #0
 80004e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <MX_CRC_Init+0x40>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_CRC_Init+0x40>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <MX_CRC_Init+0x40>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <MX_CRC_Init+0x40>)
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 fa22 	bl	8001940 <HAL_CRC_Init>
 80004fc:	1e03      	subs	r3, r0, #0
 80004fe:	d001      	beq.n	8000504 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000500:	f000 f9cb 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	20000118 	.word	0x20000118
 8000510:	40023000 	.word	0x40023000

08000514 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000518:	4b1c      	ldr	r3, [pc, #112]	; (800058c <MX_I2C1_Init+0x78>)
 800051a:	4a1d      	ldr	r2, [pc, #116]	; (8000590 <MX_I2C1_Init+0x7c>)
 800051c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800051e:	4b1b      	ldr	r3, [pc, #108]	; (800058c <MX_I2C1_Init+0x78>)
 8000520:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <MX_I2C1_Init+0x80>)
 8000522:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 64;
 8000524:	4b19      	ldr	r3, [pc, #100]	; (800058c <MX_I2C1_Init+0x78>)
 8000526:	2240      	movs	r2, #64	; 0x40
 8000528:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800052a:	4b18      	ldr	r3, [pc, #96]	; (800058c <MX_I2C1_Init+0x78>)
 800052c:	2201      	movs	r2, #1
 800052e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <MX_I2C1_Init+0x78>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <MX_I2C1_Init+0x78>)
 8000538:	2200      	movs	r2, #0
 800053a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <MX_I2C1_Init+0x78>)
 800053e:	2200      	movs	r2, #0
 8000540:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <MX_I2C1_Init+0x78>)
 8000544:	2280      	movs	r2, #128	; 0x80
 8000546:	0312      	lsls	r2, r2, #12
 8000548:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <MX_I2C1_Init+0x78>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_I2C1_Init+0x78>)
 8000552:	0018      	movs	r0, r3
 8000554:	f001 fe66 	bl	8002224 <HAL_I2C_Init>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800055c:	f000 f99d 	bl	800089a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <MX_I2C1_Init+0x78>)
 8000562:	2100      	movs	r1, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f003 fa29 	bl	80039bc <HAL_I2CEx_ConfigAnalogFilter>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800056e:	f000 f994 	bl	800089a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <MX_I2C1_Init+0x78>)
 8000574:	2100      	movs	r1, #0
 8000576:	0018      	movs	r0, r3
 8000578:	f003 fa6c 	bl	8003a54 <HAL_I2CEx_ConfigDigitalFilter>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000580:	f000 f98b 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	2000013c 	.word	0x2000013c
 8000590:	40005400 	.word	0x40005400
 8000594:	10707dbc 	.word	0x10707dbc

08000598 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059e:	231c      	movs	r3, #28
 80005a0:	18fb      	adds	r3, r7, r3
 80005a2:	0018      	movs	r0, r3
 80005a4:	230c      	movs	r3, #12
 80005a6:	001a      	movs	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	f005 f957 	bl	800585c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ae:	003b      	movs	r3, r7
 80005b0:	0018      	movs	r0, r3
 80005b2:	231c      	movs	r3, #28
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f005 f950 	bl	800585c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_TIM3_Init+0xb8>)
 80005be:	4a25      	ldr	r2, [pc, #148]	; (8000654 <MX_TIM3_Init+0xbc>)
 80005c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80005c2:	4b23      	ldr	r3, [pc, #140]	; (8000650 <MX_TIM3_Init+0xb8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_TIM3_Init+0xb8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <MX_TIM3_Init+0xb8>)
 80005d0:	2264      	movs	r2, #100	; 0x64
 80005d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_TIM3_Init+0xb8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <MX_TIM3_Init+0xb8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_TIM3_Init+0xb8>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f004 f9d8 	bl	8004998 <HAL_TIM_PWM_Init>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80005ec:	f000 f955 	bl	800089a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f0:	211c      	movs	r1, #28
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005fe:	187a      	adds	r2, r7, r1
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_TIM3_Init+0xb8>)
 8000602:	0011      	movs	r1, r2
 8000604:	0018      	movs	r0, r3
 8000606:	f005 f885 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800060e:	f000 f944 	bl	800089a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000612:	003b      	movs	r3, r7
 8000614:	2260      	movs	r2, #96	; 0x60
 8000616:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000618:	003b      	movs	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800061e:	003b      	movs	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000624:	003b      	movs	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800062a:	0039      	movs	r1, r7
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_TIM3_Init+0xb8>)
 800062e:	220c      	movs	r2, #12
 8000630:	0018      	movs	r0, r3
 8000632:	f004 fc19 	bl	8004e68 <HAL_TIM_PWM_ConfigChannel>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800063a:	f000 f92e 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <MX_TIM3_Init+0xb8>)
 8000640:	0018      	movs	r0, r3
 8000642:	f000 fab1 	bl	8000ba8 <HAL_TIM_MspPostInit>

}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b00a      	add	sp, #40	; 0x28
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	20000188 	.word	0x20000188
 8000654:	40000400 	.word	0x40000400

08000658 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_TIM16_Init+0x44>)
 800065e:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <MX_TIM16_Init+0x48>)
 8000660:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_TIM16_Init+0x44>)
 8000664:	2209      	movs	r2, #9
 8000666:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_TIM16_Init+0x44>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 6399;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_TIM16_Init+0x44>)
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <MX_TIM16_Init+0x4c>)
 8000672:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_TIM16_Init+0x44>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_TIM16_Init+0x44>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_TIM16_Init+0x44>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <MX_TIM16_Init+0x44>)
 8000688:	0018      	movs	r0, r3
 800068a:	f004 f88d 	bl	80047a8 <HAL_TIM_Base_Init>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000692:	f000 f902 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200001d4 	.word	0x200001d4
 80006a0:	40014400 	.word	0x40014400
 80006a4:	000018ff 	.word	0x000018ff

080006a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_DMA_Init+0x38>)
 80006b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_DMA_Init+0x38>)
 80006b4:	2101      	movs	r1, #1
 80006b6:	430a      	orrs	r2, r1
 80006b8:	639a      	str	r2, [r3, #56]	; 0x38
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_DMA_Init+0x38>)
 80006bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006be:	2201      	movs	r2, #1
 80006c0:	4013      	ands	r3, r2
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2009      	movs	r0, #9
 80006cc:	f001 f906 	bl	80018dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006d0:	2009      	movs	r0, #9
 80006d2:	f001 f918 	bl	8001906 <HAL_NVIC_EnableIRQ>

}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b002      	add	sp, #8
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	40021000 	.word	0x40021000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	240c      	movs	r4, #12
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	2314      	movs	r3, #20
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f005 f8b1 	bl	800585c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_GPIO_Init+0x88>)
 80006fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_GPIO_Init+0x88>)
 8000700:	2102      	movs	r1, #2
 8000702:	430a      	orrs	r2, r1
 8000704:	635a      	str	r2, [r3, #52]	; 0x34
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_GPIO_Init+0x88>)
 8000708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800070a:	2202      	movs	r2, #2
 800070c:	4013      	ands	r3, r2
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_GPIO_Init+0x88>)
 8000714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_GPIO_Init+0x88>)
 8000718:	2101      	movs	r1, #1
 800071a:	430a      	orrs	r2, r1
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_GPIO_Init+0x88>)
 8000720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000722:	2201      	movs	r2, #1
 8000724:	4013      	ands	r3, r2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACTION_LED_GPIO_Port, ACTION_LED_Pin, GPIO_PIN_RESET);
 800072a:	2380      	movs	r3, #128	; 0x80
 800072c:	0199      	lsls	r1, r3, #6
 800072e:	23a0      	movs	r3, #160	; 0xa0
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	2200      	movs	r2, #0
 8000734:	0018      	movs	r0, r3
 8000736:	f001 fd3d 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACTION_LED_Pin */
  GPIO_InitStruct.Pin = ACTION_LED_Pin;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0192      	lsls	r2, r2, #6
 8000740:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2201      	movs	r2, #1
 8000746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACTION_LED_GPIO_Port, &GPIO_InitStruct);
 8000754:	193a      	adds	r2, r7, r4
 8000756:	23a0      	movs	r3, #160	; 0xa0
 8000758:	05db      	lsls	r3, r3, #23
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f001 fbc5 	bl	8001eec <HAL_GPIO_Init>

}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b009      	add	sp, #36	; 0x24
 8000768:	bd90      	pop	{r4, r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in transmission process is correct */

  //tidy up
  aRxBuffer[0]=0x00;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
  aRxBuffer[1]=0x00;
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 8000780:	2200      	movs	r2, #0
 8000782:	705a      	strb	r2, [r3, #1]
  Xfer_Complete = 1;
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 8000786:	2201      	movs	r2, #1
 8000788:	601a      	str	r2, [r3, #0]
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20000034 	.word	0x20000034
 8000798:	2000002c 	.word	0x2000002c

0800079c <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in reception process is correct */



  if(aRxBuffer[0] < shMemSize)
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b1f      	cmp	r3, #31
 80007aa:	d806      	bhi.n	80007ba <HAL_I2C_SlaveRxCpltCallback+0x1e>
	  sharedMemory[aRxBuffer[0]] = aRxBuffer[1];
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	001a      	movs	r2, r3
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80007b4:	7859      	ldrb	r1, [r3, #1]
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 80007b8:	5499      	strb	r1, [r3, r2]

  //tidy up
  aRxBuffer[0]=0x00;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
  aRxBuffer[1]=0x00;
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	705a      	strb	r2, [r3, #1]
  Xfer_Complete = 1;
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <HAL_I2C_SlaveRxCpltCallback+0x40>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	601a      	str	r2, [r3, #0]
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b002      	add	sp, #8
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000034 	.word	0x20000034
 80007d8:	20000038 	.word	0x20000038
 80007dc:	2000002c 	.word	0x2000002c

080007e0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	0008      	movs	r0, r1
 80007ea:	0011      	movs	r1, r2
 80007ec:	1cfb      	adds	r3, r7, #3
 80007ee:	1c02      	adds	r2, r0, #0
 80007f0:	701a      	strb	r2, [r3, #0]
 80007f2:	003b      	movs	r3, r7
 80007f4:	1c0a      	adds	r2, r1, #0
 80007f6:	801a      	strh	r2, [r3, #0]
  Transfer_Direction = TransferDirection;
 80007f8:	1cfb      	adds	r3, r7, #3
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_I2C_AddrCallback+0x74>)
 80007fe:	601a      	str	r2, [r3, #0]

  if (Transfer_Direction != 0)
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <HAL_I2C_AddrCallback+0x74>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d016      	beq.n	8000836 <HAL_I2C_AddrCallback+0x56>
  {
     /*##- Start the transmission process #####################################*/
  /* While the I2C in reception process, user can transmit data through
     "aTxBuffer" buffer */
	  if(aRxBuffer[0] < shMemSize)
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <HAL_I2C_AddrCallback+0x78>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b1f      	cmp	r3, #31
 800080e:	d806      	bhi.n	800081e <HAL_I2C_AddrCallback+0x3e>
		  aTxBuffer[0] = sharedMemory[aRxBuffer[0]];
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_I2C_AddrCallback+0x78>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	001a      	movs	r2, r3
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <HAL_I2C_AddrCallback+0x7c>)
 8000818:	5c9a      	ldrb	r2, [r3, r2]
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_I2C_AddrCallback+0x80>)
 800081c:	701a      	strb	r2, [r3, #0]

	  if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)aTxBuffer, 1, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 800081e:	2380      	movs	r3, #128	; 0x80
 8000820:	049b      	lsls	r3, r3, #18
 8000822:	490f      	ldr	r1, [pc, #60]	; (8000860 <HAL_I2C_AddrCallback+0x80>)
 8000824:	480f      	ldr	r0, [pc, #60]	; (8000864 <HAL_I2C_AddrCallback+0x84>)
 8000826:	2201      	movs	r2, #1
 8000828:	f001 fd92 	bl	8002350 <HAL_I2C_Slave_Seq_Transmit_IT>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d00d      	beq.n	800084c <HAL_I2C_AddrCallback+0x6c>

    {
    /* Transfer error in transmission process */
    Error_Handler();
 8000830:	f000 f833 	bl	800089a <Error_Handler>
    Error_Handler();
  }

  }

}
 8000834:	e00a      	b.n	800084c <HAL_I2C_AddrCallback+0x6c>
  if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)aRxBuffer, 2, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	049b      	lsls	r3, r3, #18
 800083a:	4907      	ldr	r1, [pc, #28]	; (8000858 <HAL_I2C_AddrCallback+0x78>)
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <HAL_I2C_AddrCallback+0x84>)
 800083e:	2202      	movs	r2, #2
 8000840:	f001 fe36 	bl	80024b0 <HAL_I2C_Slave_Seq_Receive_IT>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <HAL_I2C_AddrCallback+0x6c>
    Error_Handler();
 8000848:	f000 f827 	bl	800089a <Error_Handler>
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b002      	add	sp, #8
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000028 	.word	0x20000028
 8000858:	20000034 	.word	0x20000034
 800085c:	20000038 	.word	0x20000038
 8000860:	20000030 	.word	0x20000030
 8000864:	2000013c 	.word	0x2000013c

08000868 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}

08000878 <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	0018      	movs	r0, r3
 8000884:	f001 ff8c 	bl	80027a0 <HAL_I2C_GetError>
 8000888:	0003      	movs	r3, r0
 800088a:	2b04      	cmp	r3, #4
 800088c:	d001      	beq.n	8000892 <HAL_I2C_ErrorCallback+0x1a>
  {
    Error_Handler();
 800088e:	f000 f804 	bl	800089a <Error_Handler>
  }
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}

0800089a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089e:	b672      	cpsid	i
}
 80008a0:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <HAL_MspInit+0x48>)
 80008ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x48>)
 80008b0:	2101      	movs	r1, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	641a      	str	r2, [r3, #64]	; 0x40
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_MspInit+0x48>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	2201      	movs	r2, #1
 80008bc:	4013      	ands	r3, r2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_MspInit+0x48>)
 80008c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x48>)
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	0549      	lsls	r1, r1, #21
 80008cc:	430a      	orrs	r2, r1
 80008ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x48>)
 80008d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	055b      	lsls	r3, r3, #21
 80008d8:	4013      	ands	r3, r2
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 80008de:	2010      	movs	r0, #16
 80008e0:	f000 fac2 	bl	8000e68 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b08f      	sub	sp, #60	; 0x3c
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f8:	2410      	movs	r4, #16
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	0018      	movs	r0, r3
 80008fe:	2328      	movs	r3, #40	; 0x28
 8000900:	001a      	movs	r2, r3
 8000902:	2100      	movs	r1, #0
 8000904:	f004 ffaa 	bl	800585c <memset>
  if(hadc->Instance==ADC1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a27      	ldr	r2, [pc, #156]	; (80009ac <HAL_ADC_MspInit+0xbc>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d147      	bne.n	80009a2 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	01d2      	lsls	r2, r2, #7
 8000918:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000920:	193b      	adds	r3, r7, r4
 8000922:	0018      	movs	r0, r3
 8000924:	f003 fdc6 	bl	80044b4 <HAL_RCCEx_PeriphCLKConfig>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 800092c:	f7ff ffb5 	bl	800089a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <HAL_ADC_MspInit+0xc0>)
 8000932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <HAL_ADC_MspInit+0xc0>)
 8000936:	2180      	movs	r1, #128	; 0x80
 8000938:	0349      	lsls	r1, r1, #13
 800093a:	430a      	orrs	r2, r1
 800093c:	641a      	str	r2, [r3, #64]	; 0x40
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <HAL_ADC_MspInit+0xc0>)
 8000940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	035b      	lsls	r3, r3, #13
 8000946:	4013      	ands	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <HAL_ADC_MspInit+0xc4>)
 800094e:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <HAL_ADC_MspInit+0xc8>)
 8000950:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_ADC_MspInit+0xc4>)
 8000954:	2205      	movs	r2, #5
 8000956:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <HAL_ADC_MspInit+0xc4>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_ADC_MspInit+0xc4>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <HAL_ADC_MspInit+0xc4>)
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_ADC_MspInit+0xc4>)
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	0052      	lsls	r2, r2, #1
 8000970:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_ADC_MspInit+0xc4>)
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	00d2      	lsls	r2, r2, #3
 8000978:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_ADC_MspInit+0xc4>)
 800097c:	2220      	movs	r2, #32
 800097e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_ADC_MspInit+0xc4>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_ADC_MspInit+0xc4>)
 8000988:	0018      	movs	r0, r3
 800098a:	f001 f8ad 	bl	8001ae8 <HAL_DMA_Init>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <HAL_ADC_MspInit+0xa6>
    {
      Error_Handler();
 8000992:	f7ff ff82 	bl	800089a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_ADC_MspInit+0xc4>)
 800099a:	651a      	str	r2, [r3, #80]	; 0x50
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <HAL_ADC_MspInit+0xc4>)
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b00f      	add	sp, #60	; 0x3c
 80009a8:	bd90      	pop	{r4, r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40012400 	.word	0x40012400
 80009b0:	40021000 	.word	0x40021000
 80009b4:	200000bc 	.word	0x200000bc
 80009b8:	40020008 	.word	0x40020008

080009bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_CRC_MspInit+0x38>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d10d      	bne.n	80009ea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_CRC_MspInit+0x3c>)
 80009d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_CRC_MspInit+0x3c>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0149      	lsls	r1, r1, #5
 80009d8:	430a      	orrs	r2, r1
 80009da:	639a      	str	r2, [r3, #56]	; 0x38
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_CRC_MspInit+0x3c>)
 80009de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	015b      	lsls	r3, r3, #5
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b004      	add	sp, #16
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	40023000 	.word	0x40023000
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b095      	sub	sp, #84	; 0x54
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	233c      	movs	r3, #60	; 0x3c
 8000a06:	18fb      	adds	r3, r7, r3
 8000a08:	0018      	movs	r0, r3
 8000a0a:	2314      	movs	r3, #20
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	2100      	movs	r1, #0
 8000a10:	f004 ff24 	bl	800585c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a14:	2414      	movs	r4, #20
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	0018      	movs	r0, r3
 8000a1a:	2328      	movs	r3, #40	; 0x28
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	f004 ff1c 	bl	800585c <memset>
  if(hi2c->Instance==I2C1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a39      	ldr	r2, [pc, #228]	; (8000b10 <HAL_I2C_MspInit+0x114>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d16b      	bne.n	8000b06 <HAL_I2C_MspInit+0x10a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	2220      	movs	r2, #32
 8000a32:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f003 fd39 	bl	80044b4 <HAL_RCCEx_PeriphCLKConfig>
 8000a42:	1e03      	subs	r3, r0, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a46:	f7ff ff28 	bl	800089a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b32      	ldr	r3, [pc, #200]	; (8000b14 <HAL_I2C_MspInit+0x118>)
 8000a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4e:	4b31      	ldr	r3, [pc, #196]	; (8000b14 <HAL_I2C_MspInit+0x118>)
 8000a50:	2102      	movs	r1, #2
 8000a52:	430a      	orrs	r2, r1
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
 8000a56:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <HAL_I2C_MspInit+0x118>)
 8000a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <HAL_I2C_MspInit+0x118>)
 8000a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a66:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <HAL_I2C_MspInit+0x118>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a6e:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <HAL_I2C_MspInit+0x118>)
 8000a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a72:	2201      	movs	r2, #1
 8000a74:	4013      	ands	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a7a:	213c      	movs	r1, #60	; 0x3c
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	0052      	lsls	r2, r2, #1
 8000a82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a84:	000c      	movs	r4, r1
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	2212      	movs	r2, #18
 8000a8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2206      	movs	r2, #6
 8000a9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <HAL_I2C_MspInit+0x11c>)
 8000aa2:	0019      	movs	r1, r3
 8000aa4:	0010      	movs	r0, r2
 8000aa6:	f001 fa21 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aaa:	0021      	movs	r1, r4
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	00d2      	lsls	r2, r2, #3
 8000ab2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2212      	movs	r2, #18
 8000ab8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2206      	movs	r2, #6
 8000aca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	187a      	adds	r2, r7, r1
 8000ace:	23a0      	movs	r3, #160	; 0xa0
 8000ad0:	05db      	lsls	r3, r3, #23
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f001 fa09 	bl	8001eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_I2C_MspInit+0x118>)
 8000adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_I2C_MspInit+0x118>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	0389      	lsls	r1, r1, #14
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_I2C_MspInit+0x118>)
 8000aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	039b      	lsls	r3, r3, #14
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 1, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2101      	movs	r1, #1
 8000afa:	2017      	movs	r0, #23
 8000afc:	f000 feee 	bl	80018dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000b00:	2017      	movs	r0, #23
 8000b02:	f000 ff00 	bl	8001906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b015      	add	sp, #84	; 0x54
 8000b0c:	bd90      	pop	{r4, r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	40005400 	.word	0x40005400
 8000b14:	40021000 	.word	0x40021000
 8000b18:	50000400 	.word	0x50000400

08000b1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <HAL_TIM_PWM_MspInit+0x34>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d10b      	bne.n	8000b46 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_TIM_PWM_MspInit+0x38>)
 8000b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_TIM_PWM_MspInit+0x38>)
 8000b34:	2102      	movs	r1, #2
 8000b36:	430a      	orrs	r2, r1
 8000b38:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_TIM_PWM_MspInit+0x38>)
 8000b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b3e:	2202      	movs	r2, #2
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b004      	add	sp, #16
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	40000400 	.word	0x40000400
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_TIM_Base_MspInit+0x48>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d115      	bne.n	8000b96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_TIM_Base_MspInit+0x4c>)
 8000b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_TIM_Base_MspInit+0x4c>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	0289      	lsls	r1, r1, #10
 8000b74:	430a      	orrs	r2, r1
 8000b76:	641a      	str	r2, [r3, #64]	; 0x40
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_TIM_Base_MspInit+0x4c>)
 8000b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	029b      	lsls	r3, r3, #10
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2015      	movs	r0, #21
 8000b8c:	f000 fea6 	bl	80018dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000b90:	2015      	movs	r0, #21
 8000b92:	f000 feb8 	bl	8001906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b004      	add	sp, #16
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	40014400 	.word	0x40014400
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	240c      	movs	r4, #12
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	2314      	movs	r3, #20
 8000bb8:	001a      	movs	r2, r3
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f004 fe4e 	bl	800585c <memset>
  if(htim->Instance==TIM3)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <HAL_TIM_MspPostInit+0x70>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d121      	bne.n	8000c0e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <HAL_TIM_MspPostInit+0x74>)
 8000bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <HAL_TIM_MspPostInit+0x74>)
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_TIM_MspPostInit+0x74>)
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bda:	2202      	movs	r2, #2
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000be2:	0021      	movs	r1, r4
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2202      	movs	r2, #2
 8000be8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2202      	movs	r2, #2
 8000bee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2201      	movs	r2, #1
 8000c00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <HAL_TIM_MspPostInit+0x78>)
 8000c06:	0019      	movs	r1, r3
 8000c08:	0010      	movs	r0, r2
 8000c0a:	f001 f96f 	bl	8001eec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b009      	add	sp, #36	; 0x24
 8000c14:	bd90      	pop	{r4, r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	40000400 	.word	0x40000400
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	50000400 	.word	0x50000400

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c48:	f000 f8ce 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <DMA1_Channel1_IRQHandler+0x14>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f001 f838 	bl	8001cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	200000bc 	.word	0x200000bc

08000c6c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <TIM16_IRQHandler+0x14>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f003 ffc6 	bl	8004c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	200001d4 	.word	0x200001d4

08000c84 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <I2C1_IRQHandler+0x2c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	699a      	ldr	r2, [r3, #24]
 8000c8e:	23e0      	movs	r3, #224	; 0xe0
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	4013      	ands	r3, r2
 8000c94:	d004      	beq.n	8000ca0 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <I2C1_IRQHandler+0x2c>)
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f001 fcf7 	bl	800268c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000c9e:	e003      	b.n	8000ca8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <I2C1_IRQHandler+0x2c>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f001 fcd8 	bl	8002658 <HAL_I2C_EV_IRQHandler>
}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	2000013c 	.word	0x2000013c

08000cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc4:	f7ff fff6 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	; (8000d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <LoopForever+0xe>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	; (8000d0c <LoopForever+0x16>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cee:	f004 fd91 	bl	8005814 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cf2:	f7ff fab9 	bl	8000268 <main>

08000cf6 <LoopForever>:

LoopForever:
  b LoopForever
 8000cf6:	e7fe      	b.n	8000cf6 <LoopForever>
  ldr   r0, =_estack
 8000cf8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d04:	08005920 	.word	0x08005920
  ldr r2, =_sbss
 8000d08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d0c:	20000228 	.word	0x20000228

08000d10 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC1_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_Init+0x3c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_Init+0x3c>)
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	0049      	lsls	r1, r1, #1
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2e:	2003      	movs	r0, #3
 8000d30:	f000 f810 	bl	8000d54 <HAL_InitTick>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	e001      	b.n	8000d44 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff fdb0 	bl	80008a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	781b      	ldrb	r3, [r3, #0]
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b002      	add	sp, #8
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40022000 	.word	0x40022000

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <HAL_InitTick+0x88>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d02b      	beq.n	8000dc4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <HAL_InitTick+0x8c>)
 8000d6e:	681c      	ldr	r4, [r3, #0]
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_InitTick+0x88>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	0019      	movs	r1, r3
 8000d76:	23fa      	movs	r3, #250	; 0xfa
 8000d78:	0098      	lsls	r0, r3, #2
 8000d7a:	f7ff f9c3 	bl	8000104 <__udivsi3>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	0019      	movs	r1, r3
 8000d82:	0020      	movs	r0, r4
 8000d84:	f7ff f9be 	bl	8000104 <__udivsi3>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 fdcb 	bl	8001926 <HAL_SYSTICK_Config>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d112      	bne.n	8000dba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d80a      	bhi.n	8000db0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	425b      	negs	r3, r3
 8000da0:	2200      	movs	r2, #0
 8000da2:	0018      	movs	r0, r3
 8000da4:	f000 fd9a 	bl	80018dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_InitTick+0x90>)
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	e00d      	b.n	8000dcc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e008      	b.n	8000dcc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dba:	230f      	movs	r3, #15
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	e003      	b.n	8000dcc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000dcc:	230f      	movs	r3, #15
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	781b      	ldrb	r3, [r3, #0]
}
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b005      	add	sp, #20
 8000dd8:	bd90      	pop	{r4, r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_IncTick+0x1c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	001a      	movs	r2, r3
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x20>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	18d2      	adds	r2, r2, r3
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_IncTick+0x20>)
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000224 	.word	0x20000224

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b02      	ldr	r3, [pc, #8]	; (8000e1c <HAL_GetTick+0x10>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	20000224 	.word	0x20000224

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff fff0 	bl	8000e0c <HAL_GetTick>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	3301      	adds	r3, #1
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_Delay+0x44>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	001a      	movs	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	189b      	adds	r3, r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	f7ff ffe0 	bl	8000e0c <HAL_GetTick>
 8000e4c:	0002      	movs	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b004      	add	sp, #16
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	20000008 	.word	0x20000008

08000e68 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000e72:	6819      	ldr	r1, [r3, #0]
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40010000 	.word	0x40010000

08000e88 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000e98:	401a      	ands	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	601a      	str	r2, [r3, #0]
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b002      	add	sp, #8
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	fe3fffff 	.word	0xfe3fffff

08000eb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	23e0      	movs	r3, #224	; 0xe0
 8000ebe:	045b      	lsls	r3, r3, #17
 8000ec0:	4013      	ands	r3, r2
}
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b002      	add	sp, #8
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b084      	sub	sp, #16
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	2104      	movs	r1, #4
 8000ede:	400a      	ands	r2, r1
 8000ee0:	2107      	movs	r1, #7
 8000ee2:	4091      	lsls	r1, r2
 8000ee4:	000a      	movs	r2, r1
 8000ee6:	43d2      	mvns	r2, r2
 8000ee8:	401a      	ands	r2, r3
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	2104      	movs	r1, #4
 8000eee:	400b      	ands	r3, r1
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	4099      	lsls	r1, r3
 8000ef4:	000b      	movs	r3, r1
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b004      	add	sp, #16
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	2104      	movs	r1, #4
 8000f16:	400a      	ands	r2, r1
 8000f18:	2107      	movs	r1, #7
 8000f1a:	4091      	lsls	r1, r2
 8000f1c:	000a      	movs	r2, r1
 8000f1e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2104      	movs	r1, #4
 8000f24:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f26:	40da      	lsrs	r2, r3
 8000f28:	0013      	movs	r3, r2
}
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	211f      	movs	r1, #31
 8000f46:	400a      	ands	r2, r1
 8000f48:	210f      	movs	r1, #15
 8000f4a:	4091      	lsls	r1, r2
 8000f4c:	000a      	movs	r2, r1
 8000f4e:	43d2      	mvns	r2, r2
 8000f50:	401a      	ands	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	0e9b      	lsrs	r3, r3, #26
 8000f56:	210f      	movs	r1, #15
 8000f58:	4019      	ands	r1, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	201f      	movs	r0, #31
 8000f5e:	4003      	ands	r3, r0
 8000f60:	4099      	lsls	r1, r3
 8000f62:	000b      	movs	r3, r1
 8000f64:	431a      	orrs	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b004      	add	sp, #16
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	035b      	lsls	r3, r3, #13
 8000f84:	0b5b      	lsrs	r3, r3, #13
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b002      	add	sp, #8
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	0352      	lsls	r2, r2, #13
 8000fa6:	0b52      	lsrs	r2, r2, #13
 8000fa8:	43d2      	mvns	r2, r2
 8000faa:	401a      	ands	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	0212      	lsls	r2, r2, #8
 8000fcc:	43d2      	mvns	r2, r2
 8000fce:	401a      	ands	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
 8000fd8:	4904      	ldr	r1, [pc, #16]	; (8000fec <LL_ADC_SetChannelSamplingTime+0x34>)
 8000fda:	400b      	ands	r3, r1
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b004      	add	sp, #16
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	07ffff00 	.word	0x07ffff00

08000ff0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4a05      	ldr	r2, [pc, #20]	; (8001014 <LL_ADC_EnableInternalRegulator+0x24>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	0552      	lsls	r2, r2, #21
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	6fffffe8 	.word	0x6fffffe8

08001018 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	055b      	lsls	r3, r3, #21
 8001028:	401a      	ands	r2, r3
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	055b      	lsls	r3, r3, #21
 800102e:	429a      	cmp	r2, r3
 8001030:	d101      	bne.n	8001036 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001036:	2300      	movs	r3, #0
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b002      	add	sp, #8
 800103e:	bd80      	pop	{r7, pc}

08001040 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	2201      	movs	r2, #1
 800104e:	4013      	ands	r3, r2
 8001050:	2b01      	cmp	r3, #1
 8001052:	d101      	bne.n	8001058 <LL_ADC_IsEnabled+0x18>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <LL_ADC_IsEnabled+0x1a>
 8001058:	2300      	movs	r3, #0
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b002      	add	sp, #8
 8001060:	bd80      	pop	{r7, pc}

08001062 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2204      	movs	r2, #4
 8001070:	4013      	ands	r3, r2
 8001072:	2b04      	cmp	r3, #4
 8001074:	d101      	bne.n	800107a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800107a:	2300      	movs	r3, #0
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108c:	231f      	movs	r3, #31
 800108e:	18fb      	adds	r3, r7, r3
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e17f      	b.n	80013aa <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10a      	bne.n	80010c8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff fc1b 	bl	80008f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2254      	movs	r2, #84	; 0x54
 80010c4:	2100      	movs	r1, #0
 80010c6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	0018      	movs	r0, r3
 80010ce:	f7ff ffa3 	bl	8001018 <LL_ADC_IsInternalRegulatorEnabled>
 80010d2:	1e03      	subs	r3, r0, #0
 80010d4:	d115      	bne.n	8001102 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	0018      	movs	r0, r3
 80010dc:	f7ff ff88 	bl	8000ff0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010e0:	4bb4      	ldr	r3, [pc, #720]	; (80013b4 <HAL_ADC_Init+0x330>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	49b4      	ldr	r1, [pc, #720]	; (80013b8 <HAL_ADC_Init+0x334>)
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff f80c 	bl	8000104 <__udivsi3>
 80010ec:	0003      	movs	r3, r0
 80010ee:	3301      	adds	r3, #1
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010f4:	e002      	b.n	80010fc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f9      	bne.n	80010f6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	0018      	movs	r0, r3
 8001108:	f7ff ff86 	bl	8001018 <LL_ADC_IsInternalRegulatorEnabled>
 800110c:	1e03      	subs	r3, r0, #0
 800110e:	d10f      	bne.n	8001130 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001114:	2210      	movs	r2, #16
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001120:	2201      	movs	r2, #1
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001128:	231f      	movs	r3, #31
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff ff94 	bl	8001062 <LL_ADC_REG_IsConversionOngoing>
 800113a:	0003      	movs	r3, r0
 800113c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	2210      	movs	r2, #16
 8001144:	4013      	ands	r3, r2
 8001146:	d000      	beq.n	800114a <HAL_ADC_Init+0xc6>
 8001148:	e122      	b.n	8001390 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d000      	beq.n	8001152 <HAL_ADC_Init+0xce>
 8001150:	e11e      	b.n	8001390 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001156:	4a99      	ldr	r2, [pc, #612]	; (80013bc <HAL_ADC_Init+0x338>)
 8001158:	4013      	ands	r3, r2
 800115a:	2202      	movs	r2, #2
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	0018      	movs	r0, r3
 8001168:	f7ff ff6a 	bl	8001040 <LL_ADC_IsEnabled>
 800116c:	1e03      	subs	r3, r0, #0
 800116e:	d000      	beq.n	8001172 <HAL_ADC_Init+0xee>
 8001170:	e0ad      	b.n	80012ce <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7e1b      	ldrb	r3, [r3, #24]
 800117a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800117c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7e5b      	ldrb	r3, [r3, #25]
 8001182:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001184:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7e9b      	ldrb	r3, [r3, #26]
 800118a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800118c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <HAL_ADC_Init+0x118>
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	015b      	lsls	r3, r3, #5
 800119a:	e000      	b.n	800119e <HAL_ADC_Init+0x11a>
 800119c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800119e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011a4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	da04      	bge.n	80011b8 <HAL_ADC_Init+0x134>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	085b      	lsrs	r3, r3, #1
 80011b6:	e001      	b.n	80011bc <HAL_ADC_Init+0x138>
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80011bc:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	212c      	movs	r1, #44	; 0x2c
 80011c2:	5c5b      	ldrb	r3, [r3, r1]
 80011c4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011c6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2220      	movs	r2, #32
 80011d2:	5c9b      	ldrb	r3, [r3, r2]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d115      	bne.n	8001204 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7e9b      	ldrb	r3, [r3, #26]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	0252      	lsls	r2, r2, #9
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	e00b      	b.n	8001204 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f0:	2220      	movs	r2, #32
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fc:	2201      	movs	r2, #1
 80011fe:	431a      	orrs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00a      	beq.n	8001222 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001210:	23e0      	movs	r3, #224	; 0xe0
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800121a:	4313      	orrs	r3, r2
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	4a65      	ldr	r2, [pc, #404]	; (80013c0 <HAL_ADC_Init+0x33c>)
 800122a:	4013      	ands	r3, r2
 800122c:	0019      	movs	r1, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	430a      	orrs	r2, r1
 8001236:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	0f9b      	lsrs	r3, r3, #30
 800123e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001244:	4313      	orrs	r3, r2
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4313      	orrs	r3, r2
 800124a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	223c      	movs	r2, #60	; 0x3c
 8001250:	5c9b      	ldrb	r3, [r3, r2]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d111      	bne.n	800127a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	0f9b      	lsrs	r3, r3, #30
 800125c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001262:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001268:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800126e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	4313      	orrs	r3, r2
 8001274:	2201      	movs	r2, #1
 8001276:	4313      	orrs	r3, r2
 8001278:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	4a50      	ldr	r2, [pc, #320]	; (80013c4 <HAL_ADC_Init+0x340>)
 8001282:	4013      	ands	r3, r2
 8001284:	0019      	movs	r1, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	430a      	orrs	r2, r1
 800128e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	23c0      	movs	r3, #192	; 0xc0
 8001296:	061b      	lsls	r3, r3, #24
 8001298:	429a      	cmp	r2, r3
 800129a:	d018      	beq.n	80012ce <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	05db      	lsls	r3, r3, #23
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d012      	beq.n	80012ce <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	061b      	lsls	r3, r3, #24
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d00c      	beq.n	80012ce <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80012b4:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <HAL_ADC_Init+0x344>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a44      	ldr	r2, [pc, #272]	; (80013cc <HAL_ADC_Init+0x348>)
 80012ba:	4013      	ands	r3, r2
 80012bc:	0019      	movs	r1, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	23f0      	movs	r3, #240	; 0xf0
 80012c4:	039b      	lsls	r3, r3, #14
 80012c6:	401a      	ands	r2, r3
 80012c8:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <HAL_ADC_Init+0x344>)
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d6:	001a      	movs	r2, r3
 80012d8:	2100      	movs	r1, #0
 80012da:	f7ff fdf6 	bl	8000eca <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	493a      	ldr	r1, [pc, #232]	; (80013d0 <HAL_ADC_Init+0x34c>)
 80012e8:	001a      	movs	r2, r3
 80012ea:	f7ff fdee 	bl	8000eca <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d109      	bne.n	800130a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2110      	movs	r1, #16
 8001302:	4249      	negs	r1, r1
 8001304:	430a      	orrs	r2, r1
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
 8001308:	e018      	b.n	800133c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691a      	ldr	r2, [r3, #16]
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	039b      	lsls	r3, r3, #14
 8001312:	429a      	cmp	r2, r3
 8001314:	d112      	bne.n	800133c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	3b01      	subs	r3, #1
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	221c      	movs	r2, #28
 8001326:	4013      	ands	r3, r2
 8001328:	2210      	movs	r2, #16
 800132a:	4252      	negs	r2, r2
 800132c:	409a      	lsls	r2, r3
 800132e:	0011      	movs	r1, r2
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2100      	movs	r1, #0
 8001342:	0018      	movs	r0, r3
 8001344:	f7ff fdde 	bl	8000f04 <LL_ADC_GetSamplingTimeCommonChannels>
 8001348:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800134e:	429a      	cmp	r2, r3
 8001350:	d10b      	bne.n	800136a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135c:	2203      	movs	r2, #3
 800135e:	4393      	bics	r3, r2
 8001360:	2201      	movs	r2, #1
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001368:	e01c      	b.n	80013a4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	2212      	movs	r2, #18
 8001370:	4393      	bics	r3, r2
 8001372:	2210      	movs	r2, #16
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137e:	2201      	movs	r2, #1
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001386:	231f      	movs	r3, #31
 8001388:	18fb      	adds	r3, r7, r3
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800138e:	e009      	b.n	80013a4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001394:	2210      	movs	r2, #16
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800139c:	231f      	movs	r3, #31
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80013a4:	231f      	movs	r3, #31
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	781b      	ldrb	r3, [r3, #0]
}
 80013aa:	0018      	movs	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b008      	add	sp, #32
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	20000000 	.word	0x20000000
 80013b8:	00030d40 	.word	0x00030d40
 80013bc:	fffffefd 	.word	0xfffffefd
 80013c0:	fffe0201 	.word	0xfffe0201
 80013c4:	1ffffc02 	.word	0x1ffffc02
 80013c8:	40012708 	.word	0x40012708
 80013cc:	ffc3ffff 	.word	0xffc3ffff
 80013d0:	07ffff04 	.word	0x07ffff04

080013d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013de:	2317      	movs	r3, #23
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2254      	movs	r2, #84	; 0x54
 80013ee:	5c9b      	ldrb	r3, [r3, r2]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x24>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e1c0      	b.n	800177a <HAL_ADC_ConfigChannel+0x3a6>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2254      	movs	r2, #84	; 0x54
 80013fc:	2101      	movs	r1, #1
 80013fe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0018      	movs	r0, r3
 8001406:	f7ff fe2c 	bl	8001062 <LL_ADC_REG_IsConversionOngoing>
 800140a:	1e03      	subs	r3, r0, #0
 800140c:	d000      	beq.n	8001410 <HAL_ADC_ConfigChannel+0x3c>
 800140e:	e1a3      	b.n	8001758 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d100      	bne.n	800141a <HAL_ADC_ConfigChannel+0x46>
 8001418:	e143      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	061b      	lsls	r3, r3, #24
 8001422:	429a      	cmp	r2, r3
 8001424:	d004      	beq.n	8001430 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800142a:	4ac1      	ldr	r2, [pc, #772]	; (8001730 <HAL_ADC_ConfigChannel+0x35c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d108      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	0019      	movs	r1, r3
 800143a:	0010      	movs	r0, r2
 800143c:	f7ff fd99 	bl	8000f72 <LL_ADC_REG_SetSequencerChAdd>
 8001440:	e0c9      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	211f      	movs	r1, #31
 800144c:	400b      	ands	r3, r1
 800144e:	210f      	movs	r1, #15
 8001450:	4099      	lsls	r1, r3
 8001452:	000b      	movs	r3, r1
 8001454:	43db      	mvns	r3, r3
 8001456:	4013      	ands	r3, r2
 8001458:	0019      	movs	r1, r3
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	035b      	lsls	r3, r3, #13
 8001460:	0b5b      	lsrs	r3, r3, #13
 8001462:	d105      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x9c>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0e9b      	lsrs	r3, r3, #26
 800146a:	221f      	movs	r2, #31
 800146c:	4013      	ands	r3, r2
 800146e:	e098      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2201      	movs	r2, #1
 8001476:	4013      	ands	r3, r2
 8001478:	d000      	beq.n	800147c <HAL_ADC_ConfigChannel+0xa8>
 800147a:	e091      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x1cc>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2202      	movs	r2, #2
 8001482:	4013      	ands	r3, r2
 8001484:	d000      	beq.n	8001488 <HAL_ADC_ConfigChannel+0xb4>
 8001486:	e089      	b.n	800159c <HAL_ADC_ConfigChannel+0x1c8>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2204      	movs	r2, #4
 800148e:	4013      	ands	r3, r2
 8001490:	d000      	beq.n	8001494 <HAL_ADC_ConfigChannel+0xc0>
 8001492:	e081      	b.n	8001598 <HAL_ADC_ConfigChannel+0x1c4>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2208      	movs	r2, #8
 800149a:	4013      	ands	r3, r2
 800149c:	d000      	beq.n	80014a0 <HAL_ADC_ConfigChannel+0xcc>
 800149e:	e079      	b.n	8001594 <HAL_ADC_ConfigChannel+0x1c0>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2210      	movs	r2, #16
 80014a6:	4013      	ands	r3, r2
 80014a8:	d000      	beq.n	80014ac <HAL_ADC_ConfigChannel+0xd8>
 80014aa:	e071      	b.n	8001590 <HAL_ADC_ConfigChannel+0x1bc>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2220      	movs	r2, #32
 80014b2:	4013      	ands	r3, r2
 80014b4:	d000      	beq.n	80014b8 <HAL_ADC_ConfigChannel+0xe4>
 80014b6:	e069      	b.n	800158c <HAL_ADC_ConfigChannel+0x1b8>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2240      	movs	r2, #64	; 0x40
 80014be:	4013      	ands	r3, r2
 80014c0:	d000      	beq.n	80014c4 <HAL_ADC_ConfigChannel+0xf0>
 80014c2:	e061      	b.n	8001588 <HAL_ADC_ConfigChannel+0x1b4>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	4013      	ands	r3, r2
 80014cc:	d000      	beq.n	80014d0 <HAL_ADC_ConfigChannel+0xfc>
 80014ce:	e059      	b.n	8001584 <HAL_ADC_ConfigChannel+0x1b0>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4013      	ands	r3, r2
 80014da:	d151      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x1ac>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4013      	ands	r3, r2
 80014e6:	d149      	bne.n	800157c <HAL_ADC_ConfigChannel+0x1a8>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4013      	ands	r3, r2
 80014f2:	d141      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x1a4>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	4013      	ands	r3, r2
 80014fe:	d139      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x1a0>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	015b      	lsls	r3, r3, #5
 8001508:	4013      	ands	r3, r2
 800150a:	d131      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x19c>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	019b      	lsls	r3, r3, #6
 8001514:	4013      	ands	r3, r2
 8001516:	d129      	bne.n	800156c <HAL_ADC_ConfigChannel+0x198>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	01db      	lsls	r3, r3, #7
 8001520:	4013      	ands	r3, r2
 8001522:	d121      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x194>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	4013      	ands	r3, r2
 800152e:	d119      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x190>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	025b      	lsls	r3, r3, #9
 8001538:	4013      	ands	r3, r2
 800153a:	d111      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x18c>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	029b      	lsls	r3, r3, #10
 8001544:	4013      	ands	r3, r2
 8001546:	d109      	bne.n	800155c <HAL_ADC_ConfigChannel+0x188>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	02db      	lsls	r3, r3, #11
 8001550:	4013      	ands	r3, r2
 8001552:	d001      	beq.n	8001558 <HAL_ADC_ConfigChannel+0x184>
 8001554:	2312      	movs	r3, #18
 8001556:	e024      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001558:	2300      	movs	r3, #0
 800155a:	e022      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 800155c:	2311      	movs	r3, #17
 800155e:	e020      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001560:	2310      	movs	r3, #16
 8001562:	e01e      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001564:	230f      	movs	r3, #15
 8001566:	e01c      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001568:	230e      	movs	r3, #14
 800156a:	e01a      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 800156c:	230d      	movs	r3, #13
 800156e:	e018      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001570:	230c      	movs	r3, #12
 8001572:	e016      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001574:	230b      	movs	r3, #11
 8001576:	e014      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001578:	230a      	movs	r3, #10
 800157a:	e012      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 800157c:	2309      	movs	r3, #9
 800157e:	e010      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001580:	2308      	movs	r3, #8
 8001582:	e00e      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001584:	2307      	movs	r3, #7
 8001586:	e00c      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001588:	2306      	movs	r3, #6
 800158a:	e00a      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 800158c:	2305      	movs	r3, #5
 800158e:	e008      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001590:	2304      	movs	r3, #4
 8001592:	e006      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001594:	2303      	movs	r3, #3
 8001596:	e004      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001598:	2302      	movs	r3, #2
 800159a:	e002      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ce>
 80015a0:	2300      	movs	r3, #0
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	6852      	ldr	r2, [r2, #4]
 80015a6:	201f      	movs	r0, #31
 80015a8:	4002      	ands	r2, r0
 80015aa:	4093      	lsls	r3, r2
 80015ac:	000a      	movs	r2, r1
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d808      	bhi.n	80015d6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	001a      	movs	r2, r3
 80015d2:	f7ff fcae 	bl	8000f32 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6818      	ldr	r0, [r3, #0]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	6819      	ldr	r1, [r3, #0]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	001a      	movs	r2, r3
 80015e4:	f7ff fce8 	bl	8000fb8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db00      	blt.n	80015f2 <HAL_ADC_ConfigChannel+0x21e>
 80015f0:	e0bc      	b.n	800176c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015f2:	4b50      	ldr	r3, [pc, #320]	; (8001734 <HAL_ADC_ConfigChannel+0x360>)
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7ff fc5b 	bl	8000eb0 <LL_ADC_GetCommonPathInternalCh>
 80015fa:	0003      	movs	r3, r0
 80015fc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a4d      	ldr	r2, [pc, #308]	; (8001738 <HAL_ADC_ConfigChannel+0x364>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d122      	bne.n	800164e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	041b      	lsls	r3, r3, #16
 800160e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001610:	d11d      	bne.n	800164e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	0412      	lsls	r2, r2, #16
 8001618:	4313      	orrs	r3, r2
 800161a:	4a46      	ldr	r2, [pc, #280]	; (8001734 <HAL_ADC_ConfigChannel+0x360>)
 800161c:	0019      	movs	r1, r3
 800161e:	0010      	movs	r0, r2
 8001620:	f7ff fc32 	bl	8000e88 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001624:	4b45      	ldr	r3, [pc, #276]	; (800173c <HAL_ADC_ConfigChannel+0x368>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4945      	ldr	r1, [pc, #276]	; (8001740 <HAL_ADC_ConfigChannel+0x36c>)
 800162a:	0018      	movs	r0, r3
 800162c:	f7fe fd6a 	bl	8000104 <__udivsi3>
 8001630:	0003      	movs	r3, r0
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	0013      	movs	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	189b      	adds	r3, r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800163e:	e002      	b.n	8001646 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3b01      	subs	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f9      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800164c:	e08e      	b.n	800176c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a3c      	ldr	r2, [pc, #240]	; (8001744 <HAL_ADC_ConfigChannel+0x370>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d10e      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x2a2>
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	045b      	lsls	r3, r3, #17
 800165e:	4013      	ands	r3, r2
 8001660:	d109      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	0452      	lsls	r2, r2, #17
 8001668:	4313      	orrs	r3, r2
 800166a:	4a32      	ldr	r2, [pc, #200]	; (8001734 <HAL_ADC_ConfigChannel+0x360>)
 800166c:	0019      	movs	r1, r3
 800166e:	0010      	movs	r0, r2
 8001670:	f7ff fc0a 	bl	8000e88 <LL_ADC_SetCommonPathInternalCh>
 8001674:	e07a      	b.n	800176c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a33      	ldr	r2, [pc, #204]	; (8001748 <HAL_ADC_ConfigChannel+0x374>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d000      	beq.n	8001682 <HAL_ADC_ConfigChannel+0x2ae>
 8001680:	e074      	b.n	800176c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	03db      	lsls	r3, r3, #15
 8001688:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800168a:	d000      	beq.n	800168e <HAL_ADC_ConfigChannel+0x2ba>
 800168c:	e06e      	b.n	800176c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2280      	movs	r2, #128	; 0x80
 8001692:	03d2      	lsls	r2, r2, #15
 8001694:	4313      	orrs	r3, r2
 8001696:	4a27      	ldr	r2, [pc, #156]	; (8001734 <HAL_ADC_ConfigChannel+0x360>)
 8001698:	0019      	movs	r1, r3
 800169a:	0010      	movs	r0, r2
 800169c:	f7ff fbf4 	bl	8000e88 <LL_ADC_SetCommonPathInternalCh>
 80016a0:	e064      	b.n	800176c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691a      	ldr	r2, [r3, #16]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d004      	beq.n	80016b8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016b2:	4a1f      	ldr	r2, [pc, #124]	; (8001730 <HAL_ADC_ConfigChannel+0x35c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d107      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0019      	movs	r1, r3
 80016c2:	0010      	movs	r0, r2
 80016c4:	f7ff fc66 	bl	8000f94 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da4d      	bge.n	800176c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_ADC_ConfigChannel+0x360>)
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7ff fbec 	bl	8000eb0 <LL_ADC_GetCommonPathInternalCh>
 80016d8:	0003      	movs	r3, r0
 80016da:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a15      	ldr	r2, [pc, #84]	; (8001738 <HAL_ADC_ConfigChannel+0x364>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d108      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4a18      	ldr	r2, [pc, #96]	; (800174c <HAL_ADC_ConfigChannel+0x378>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_ADC_ConfigChannel+0x360>)
 80016ee:	0019      	movs	r1, r3
 80016f0:	0010      	movs	r0, r2
 80016f2:	f7ff fbc9 	bl	8000e88 <LL_ADC_SetCommonPathInternalCh>
 80016f6:	e039      	b.n	800176c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a11      	ldr	r2, [pc, #68]	; (8001744 <HAL_ADC_ConfigChannel+0x370>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d108      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4a12      	ldr	r2, [pc, #72]	; (8001750 <HAL_ADC_ConfigChannel+0x37c>)
 8001706:	4013      	ands	r3, r2
 8001708:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_ADC_ConfigChannel+0x360>)
 800170a:	0019      	movs	r1, r3
 800170c:	0010      	movs	r0, r2
 800170e:	f7ff fbbb 	bl	8000e88 <LL_ADC_SetCommonPathInternalCh>
 8001712:	e02b      	b.n	800176c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <HAL_ADC_ConfigChannel+0x374>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d126      	bne.n	800176c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4a0c      	ldr	r2, [pc, #48]	; (8001754 <HAL_ADC_ConfigChannel+0x380>)
 8001722:	4013      	ands	r3, r2
 8001724:	4a03      	ldr	r2, [pc, #12]	; (8001734 <HAL_ADC_ConfigChannel+0x360>)
 8001726:	0019      	movs	r1, r3
 8001728:	0010      	movs	r0, r2
 800172a:	f7ff fbad 	bl	8000e88 <LL_ADC_SetCommonPathInternalCh>
 800172e:	e01d      	b.n	800176c <HAL_ADC_ConfigChannel+0x398>
 8001730:	80000004 	.word	0x80000004
 8001734:	40012708 	.word	0x40012708
 8001738:	b0001000 	.word	0xb0001000
 800173c:	20000000 	.word	0x20000000
 8001740:	00030d40 	.word	0x00030d40
 8001744:	b8004000 	.word	0xb8004000
 8001748:	b4002000 	.word	0xb4002000
 800174c:	ff7fffff 	.word	0xff7fffff
 8001750:	feffffff 	.word	0xfeffffff
 8001754:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	2220      	movs	r2, #32
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001764:	2317      	movs	r3, #23
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2254      	movs	r2, #84	; 0x54
 8001770:	2100      	movs	r1, #0
 8001772:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001774:	2317      	movs	r3, #23
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	781b      	ldrb	r3, [r3, #0]
}
 800177a:	0018      	movs	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	b006      	add	sp, #24
 8001780:	bd80      	pop	{r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)

08001784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	0002      	movs	r2, r0
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001790:	1dfb      	adds	r3, r7, #7
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b7f      	cmp	r3, #127	; 0x7f
 8001796:	d809      	bhi.n	80017ac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001798:	1dfb      	adds	r3, r7, #7
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	001a      	movs	r2, r3
 800179e:	231f      	movs	r3, #31
 80017a0:	401a      	ands	r2, r3
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_EnableIRQ+0x30>)
 80017a4:	2101      	movs	r1, #1
 80017a6:	4091      	lsls	r1, r2
 80017a8:	000a      	movs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b002      	add	sp, #8
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	0002      	movs	r2, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b7f      	cmp	r3, #127	; 0x7f
 80017cc:	d828      	bhi.n	8001820 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ce:	4a2f      	ldr	r2, [pc, #188]	; (800188c <__NVIC_SetPriority+0xd4>)
 80017d0:	1dfb      	adds	r3, r7, #7
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	33c0      	adds	r3, #192	; 0xc0
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	589b      	ldr	r3, [r3, r2]
 80017de:	1dfa      	adds	r2, r7, #7
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	0011      	movs	r1, r2
 80017e4:	2203      	movs	r2, #3
 80017e6:	400a      	ands	r2, r1
 80017e8:	00d2      	lsls	r2, r2, #3
 80017ea:	21ff      	movs	r1, #255	; 0xff
 80017ec:	4091      	lsls	r1, r2
 80017ee:	000a      	movs	r2, r1
 80017f0:	43d2      	mvns	r2, r2
 80017f2:	401a      	ands	r2, r3
 80017f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	019b      	lsls	r3, r3, #6
 80017fa:	22ff      	movs	r2, #255	; 0xff
 80017fc:	401a      	ands	r2, r3
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	0018      	movs	r0, r3
 8001804:	2303      	movs	r3, #3
 8001806:	4003      	ands	r3, r0
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800180c:	481f      	ldr	r0, [pc, #124]	; (800188c <__NVIC_SetPriority+0xd4>)
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b25b      	sxtb	r3, r3
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	430a      	orrs	r2, r1
 8001818:	33c0      	adds	r3, #192	; 0xc0
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800181e:	e031      	b.n	8001884 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001820:	4a1b      	ldr	r2, [pc, #108]	; (8001890 <__NVIC_SetPriority+0xd8>)
 8001822:	1dfb      	adds	r3, r7, #7
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	0019      	movs	r1, r3
 8001828:	230f      	movs	r3, #15
 800182a:	400b      	ands	r3, r1
 800182c:	3b08      	subs	r3, #8
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3306      	adds	r3, #6
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	18d3      	adds	r3, r2, r3
 8001836:	3304      	adds	r3, #4
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	1dfa      	adds	r2, r7, #7
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	0011      	movs	r1, r2
 8001840:	2203      	movs	r2, #3
 8001842:	400a      	ands	r2, r1
 8001844:	00d2      	lsls	r2, r2, #3
 8001846:	21ff      	movs	r1, #255	; 0xff
 8001848:	4091      	lsls	r1, r2
 800184a:	000a      	movs	r2, r1
 800184c:	43d2      	mvns	r2, r2
 800184e:	401a      	ands	r2, r3
 8001850:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	019b      	lsls	r3, r3, #6
 8001856:	22ff      	movs	r2, #255	; 0xff
 8001858:	401a      	ands	r2, r3
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	0018      	movs	r0, r3
 8001860:	2303      	movs	r3, #3
 8001862:	4003      	ands	r3, r0
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001868:	4809      	ldr	r0, [pc, #36]	; (8001890 <__NVIC_SetPriority+0xd8>)
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	001c      	movs	r4, r3
 8001870:	230f      	movs	r3, #15
 8001872:	4023      	ands	r3, r4
 8001874:	3b08      	subs	r3, #8
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	430a      	orrs	r2, r1
 800187a:	3306      	adds	r3, #6
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	18c3      	adds	r3, r0, r3
 8001880:	3304      	adds	r3, #4
 8001882:	601a      	str	r2, [r3, #0]
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b003      	add	sp, #12
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	1e5a      	subs	r2, r3, #1
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	045b      	lsls	r3, r3, #17
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d301      	bcc.n	80018ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a8:	2301      	movs	r3, #1
 80018aa:	e010      	b.n	80018ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <SysTick_Config+0x44>)
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	3a01      	subs	r2, #1
 80018b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b4:	2301      	movs	r3, #1
 80018b6:	425b      	negs	r3, r3
 80018b8:	2103      	movs	r1, #3
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7ff ff7c 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SysTick_Config+0x44>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SysTick_Config+0x44>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	0018      	movs	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b002      	add	sp, #8
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	210f      	movs	r1, #15
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	1c02      	adds	r2, r0, #0
 80018ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	0011      	movs	r1, r2
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff ff5d 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	b004      	add	sp, #16
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	0002      	movs	r2, r0
 800190e:	1dfb      	adds	r3, r7, #7
 8001910:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	b25b      	sxtb	r3, r3
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff ff33 	bl	8001784 <__NVIC_EnableIRQ>
}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	b002      	add	sp, #8
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff ffaf 	bl	8001894 <SysTick_Config>
 8001936:	0003      	movs	r3, r0
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e056      	b.n	8001a00 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7f5b      	ldrb	r3, [r3, #29]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d106      	bne.n	800196a <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff f829 	bl	80009bc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2202      	movs	r2, #2
 800196e:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	791b      	ldrb	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10c      	bne.n	8001992 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a22      	ldr	r2, [pc, #136]	; (8001a08 <HAL_CRC_Init+0xc8>)
 800197e:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2118      	movs	r1, #24
 800198c:	438a      	bics	r2, r1
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	e00b      	b.n	80019aa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6899      	ldr	r1, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	0018      	movs	r0, r3
 800199e:	f000 f835 	bl	8001a0c <HAL_CRCEx_Polynomial_Set>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d001      	beq.n	80019aa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e02a      	b.n	8001a00 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	795b      	ldrb	r3, [r3, #5]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d105      	bne.n	80019be <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2201      	movs	r2, #1
 80019b8:	4252      	negs	r2, r2
 80019ba:	611a      	str	r2, [r3, #16]
 80019bc:	e004      	b.n	80019c8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6912      	ldr	r2, [r2, #16]
 80019c6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2260      	movs	r2, #96	; 0x60
 80019d0:	4393      	bics	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	4393      	bics	r3, r2
 80019ea:	0019      	movs	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699a      	ldr	r2, [r3, #24]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b002      	add	sp, #8
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	04c11db7 	.word	0x04c11db7

08001a0c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a18:	2317      	movs	r3, #23
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a20:	231f      	movs	r3, #31
 8001a22:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	613a      	str	r2, [r7, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <HAL_CRCEx_Polynomial_Set+0x36>
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	221f      	movs	r2, #31
 8001a34:	4013      	ands	r3, r2
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	40da      	lsrs	r2, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d0f1      	beq.n	8001a26 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b18      	cmp	r3, #24
 8001a46:	d00f      	beq.n	8001a68 <HAL_CRCEx_Polynomial_Set+0x5c>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b18      	cmp	r3, #24
 8001a4c:	d824      	bhi.n	8001a98 <HAL_CRCEx_Polynomial_Set+0x8c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b10      	cmp	r3, #16
 8001a52:	d011      	beq.n	8001a78 <HAL_CRCEx_Polynomial_Set+0x6c>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d81e      	bhi.n	8001a98 <HAL_CRCEx_Polynomial_Set+0x8c>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d020      	beq.n	8001aa2 <HAL_CRCEx_Polynomial_Set+0x96>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d010      	beq.n	8001a88 <HAL_CRCEx_Polynomial_Set+0x7c>
 8001a66:	e017      	b.n	8001a98 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d91b      	bls.n	8001aa6 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8001a6e:	2317      	movs	r3, #23
 8001a70:	18fb      	adds	r3, r7, r3
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001a76:	e016      	b.n	8001aa6 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b07      	cmp	r3, #7
 8001a7c:	d915      	bls.n	8001aaa <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8001a7e:	2317      	movs	r3, #23
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001a86:	e010      	b.n	8001aaa <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2b0f      	cmp	r3, #15
 8001a8c:	d90f      	bls.n	8001aae <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8001a8e:	2317      	movs	r3, #23
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001a96:	e00a      	b.n	8001aae <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001a98:	2317      	movs	r3, #23
 8001a9a:	18fb      	adds	r3, r7, r3
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	701a      	strb	r2, [r3, #0]
      break;
 8001aa0:	e006      	b.n	8001ab0 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	e004      	b.n	8001ab0 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	e002      	b.n	8001ab0 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	e000      	b.n	8001ab0 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001aae:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8001ab0:	2317      	movs	r3, #23
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2218      	movs	r2, #24
 8001aca:	4393      	bics	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001ad8:	2317      	movs	r3, #23
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	781b      	ldrb	r3, [r3, #0]
}
 8001ade:	0018      	movs	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b006      	add	sp, #24
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e077      	b.n	8001bea <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a3d      	ldr	r2, [pc, #244]	; (8001bf4 <HAL_DMA_Init+0x10c>)
 8001b00:	4694      	mov	ip, r2
 8001b02:	4463      	add	r3, ip
 8001b04:	2114      	movs	r1, #20
 8001b06:	0018      	movs	r0, r3
 8001b08:	f7fe fafc 	bl	8000104 <__udivsi3>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	009a      	lsls	r2, r3, #2
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2225      	movs	r2, #37	; 0x25
 8001b18:	2102      	movs	r1, #2
 8001b1a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4934      	ldr	r1, [pc, #208]	; (8001bf8 <HAL_DMA_Init+0x110>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6819      	ldr	r1, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	0018      	movs	r0, r3
 8001b66:	f000 f971 	bl	8001e4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	01db      	lsls	r3, r3, #7
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d102      	bne.n	8001b7c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b84:	213f      	movs	r1, #63	; 0x3f
 8001b86:	400a      	ands	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b92:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d011      	beq.n	8001bc0 <HAL_DMA_Init+0xd8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d80d      	bhi.n	8001bc0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f000 f97c 	bl	8001ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	e008      	b.n	8001bd2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2225      	movs	r2, #37	; 0x25
 8001bdc:	2101      	movs	r1, #1
 8001bde:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2224      	movs	r2, #36	; 0x24
 8001be4:	2100      	movs	r1, #0
 8001be6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b002      	add	sp, #8
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	bffdfff8 	.word	0xbffdfff8
 8001bf8:	ffff800f 	.word	0xffff800f

08001bfc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c04:	210f      	movs	r1, #15
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2225      	movs	r2, #37	; 0x25
 8001c10:	5c9b      	ldrb	r3, [r3, r2]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d006      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c1e:	187b      	adds	r3, r7, r1
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
 8001c24:	e049      	b.n	8001cba <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	210e      	movs	r1, #14
 8001c32:	438a      	bics	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2101      	movs	r1, #1
 8001c42:	438a      	bics	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	491d      	ldr	r1, [pc, #116]	; (8001cc8 <HAL_DMA_Abort_IT+0xcc>)
 8001c52:	400a      	ands	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_DMA_Abort_IT+0xd0>)
 8001c58:	6859      	ldr	r1, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	221c      	movs	r2, #28
 8001c60:	4013      	ands	r3, r2
 8001c62:	2201      	movs	r2, #1
 8001c64:	409a      	lsls	r2, r3
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_DMA_Abort_IT+0xd0>)
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00c      	beq.n	8001c98 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c88:	490f      	ldr	r1, [pc, #60]	; (8001cc8 <HAL_DMA_Abort_IT+0xcc>)
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001c96:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2225      	movs	r2, #37	; 0x25
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2224      	movs	r2, #36	; 0x24
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d004      	beq.n	8001cba <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	0010      	movs	r0, r2
 8001cb8:	4798      	blx	r3
    }
  }
  return status;
 8001cba:	230f      	movs	r3, #15
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	781b      	ldrb	r3, [r3, #0]
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b004      	add	sp, #16
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	fffffeff 	.word	0xfffffeff
 8001ccc:	40020000 	.word	0x40020000

08001cd0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001cd8:	4b55      	ldr	r3, [pc, #340]	; (8001e30 <HAL_DMA_IRQHandler+0x160>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	221c      	movs	r2, #28
 8001cec:	4013      	ands	r3, r2
 8001cee:	2204      	movs	r2, #4
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	0013      	movs	r3, r2
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d027      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x7a>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d023      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d107      	bne.n	8001d1e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2104      	movs	r1, #4
 8001d1a:	438a      	bics	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001d1e:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <HAL_DMA_IRQHandler+0x160>)
 8001d20:	6859      	ldr	r1, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	221c      	movs	r2, #28
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	4b40      	ldr	r3, [pc, #256]	; (8001e30 <HAL_DMA_IRQHandler+0x160>)
 8001d30:	430a      	orrs	r2, r1
 8001d32:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d100      	bne.n	8001d3e <HAL_DMA_IRQHandler+0x6e>
 8001d3c:	e073      	b.n	8001e26 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	0010      	movs	r0, r2
 8001d46:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001d48:	e06d      	b.n	8001e26 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	221c      	movs	r2, #28
 8001d50:	4013      	ands	r3, r2
 8001d52:	2202      	movs	r2, #2
 8001d54:	409a      	lsls	r2, r3
 8001d56:	0013      	movs	r3, r2
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d02e      	beq.n	8001dbc <HAL_DMA_IRQHandler+0xec>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2202      	movs	r2, #2
 8001d62:	4013      	ands	r3, r2
 8001d64:	d02a      	beq.n	8001dbc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d10b      	bne.n	8001d8a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	210a      	movs	r1, #10
 8001d7e:	438a      	bics	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2225      	movs	r2, #37	; 0x25
 8001d86:	2101      	movs	r1, #1
 8001d88:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001d8a:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <HAL_DMA_IRQHandler+0x160>)
 8001d8c:	6859      	ldr	r1, [r3, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	221c      	movs	r2, #28
 8001d94:	4013      	ands	r3, r2
 8001d96:	2202      	movs	r2, #2
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_DMA_IRQHandler+0x160>)
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	; 0x24
 8001da4:	2100      	movs	r1, #0
 8001da6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d03a      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	0010      	movs	r0, r2
 8001db8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001dba:	e034      	b.n	8001e26 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	221c      	movs	r2, #28
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d02b      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x158>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2208      	movs	r2, #8
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d027      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	210e      	movs	r1, #14
 8001de4:	438a      	bics	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_DMA_IRQHandler+0x160>)
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	221c      	movs	r2, #28
 8001df2:	4013      	ands	r3, r2
 8001df4:	2201      	movs	r2, #1
 8001df6:	409a      	lsls	r2, r3
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_DMA_IRQHandler+0x160>)
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2225      	movs	r2, #37	; 0x25
 8001e08:	2101      	movs	r1, #1
 8001e0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2224      	movs	r2, #36	; 0x24
 8001e10:	2100      	movs	r1, #0
 8001e12:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	0010      	movs	r0, r2
 8001e24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46c0      	nop			; (mov r8, r8)
}
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b004      	add	sp, #16
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40020000 	.word	0x40020000

08001e34 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2225      	movs	r2, #37	; 0x25
 8001e40:	5c9b      	ldrb	r3, [r3, r2]
 8001e42:	b2db      	uxtb	r3, r3
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	4a10      	ldr	r2, [pc, #64]	; (8001e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001e5c:	4694      	mov	ip, r2
 8001e5e:	4463      	add	r3, ip
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	001a      	movs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	001a      	movs	r2, r3
 8001e6e:	23ff      	movs	r3, #255	; 0xff
 8001e70:	4013      	ands	r3, r2
 8001e72:	3b08      	subs	r3, #8
 8001e74:	2114      	movs	r1, #20
 8001e76:	0018      	movs	r0, r3
 8001e78:	f7fe f944 	bl	8000104 <__udivsi3>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001e84:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	221f      	movs	r2, #31
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b004      	add	sp, #16
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	10008200 	.word	0x10008200
 8001ea0:	40020880 	.word	0x40020880

08001ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	223f      	movs	r2, #63	; 0x3f
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001eba:	4694      	mov	ip, r2
 8001ebc:	4463      	add	r3, ip
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	001a      	movs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001edc:	46c0      	nop			; (mov r8, r8)
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b004      	add	sp, #16
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	1000823f 	.word	0x1000823f
 8001ee8:	40020940 	.word	0x40020940

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efa:	e147      	b.n	800218c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2101      	movs	r1, #1
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4091      	lsls	r1, r2
 8001f06:	000a      	movs	r2, r1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d100      	bne.n	8001f14 <HAL_GPIO_Init+0x28>
 8001f12:	e138      	b.n	8002186 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d005      	beq.n	8001f2c <HAL_GPIO_Init+0x40>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2203      	movs	r2, #3
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d130      	bne.n	8001f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	0013      	movs	r3, r2
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	0013      	movs	r3, r2
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f62:	2201      	movs	r2, #1
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
 8001f68:	0013      	movs	r3, r2
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	091b      	lsrs	r3, r3, #4
 8001f78:	2201      	movs	r2, #1
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	0013      	movs	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2203      	movs	r2, #3
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d017      	beq.n	8001fca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	43da      	mvns	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	0013      	movs	r3, r2
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2203      	movs	r2, #3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d123      	bne.n	800201e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	58d3      	ldr	r3, [r2, r3]
 8001fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2207      	movs	r2, #7
 8001fe8:	4013      	ands	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2107      	movs	r1, #7
 8002002:	400b      	ands	r3, r1
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	409a      	lsls	r2, r3
 8002008:	0013      	movs	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	08da      	lsrs	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3208      	adds	r2, #8
 8002018:	0092      	lsls	r2, r2, #2
 800201a:	6939      	ldr	r1, [r7, #16]
 800201c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	409a      	lsls	r2, r3
 800202c:	0013      	movs	r3, r2
 800202e:	43da      	mvns	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2203      	movs	r2, #3
 800203c:	401a      	ands	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	409a      	lsls	r2, r3
 8002044:	0013      	movs	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	23c0      	movs	r3, #192	; 0xc0
 8002058:	029b      	lsls	r3, r3, #10
 800205a:	4013      	ands	r3, r2
 800205c:	d100      	bne.n	8002060 <HAL_GPIO_Init+0x174>
 800205e:	e092      	b.n	8002186 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002060:	4a50      	ldr	r2, [pc, #320]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3318      	adds	r3, #24
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	589b      	ldr	r3, [r3, r2]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2203      	movs	r2, #3
 8002072:	4013      	ands	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	220f      	movs	r2, #15
 8002078:	409a      	lsls	r2, r3
 800207a:	0013      	movs	r3, r2
 800207c:	43da      	mvns	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	23a0      	movs	r3, #160	; 0xa0
 8002088:	05db      	lsls	r3, r3, #23
 800208a:	429a      	cmp	r2, r3
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0x1ca>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a45      	ldr	r2, [pc, #276]	; (80021a8 <HAL_GPIO_Init+0x2bc>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00d      	beq.n	80020b2 <HAL_GPIO_Init+0x1c6>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a44      	ldr	r2, [pc, #272]	; (80021ac <HAL_GPIO_Init+0x2c0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x1c2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a43      	ldr	r2, [pc, #268]	; (80021b0 <HAL_GPIO_Init+0x2c4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_GPIO_Init+0x1be>
 80020a6:	2303      	movs	r3, #3
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x1cc>
 80020aa:	2305      	movs	r3, #5
 80020ac:	e004      	b.n	80020b8 <HAL_GPIO_Init+0x1cc>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e002      	b.n	80020b8 <HAL_GPIO_Init+0x1cc>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_GPIO_Init+0x1cc>
 80020b6:	2300      	movs	r3, #0
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	2103      	movs	r1, #3
 80020bc:	400a      	ands	r2, r1
 80020be:	00d2      	lsls	r2, r2, #3
 80020c0:	4093      	lsls	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80020c8:	4936      	ldr	r1, [pc, #216]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	3318      	adds	r3, #24
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d6:	4b33      	ldr	r3, [pc, #204]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43da      	mvns	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	035b      	lsls	r3, r3, #13
 80020ee:	4013      	ands	r3, r2
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020fa:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	43da      	mvns	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	039b      	lsls	r3, r3, #14
 8002118:	4013      	ands	r3, r2
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800212a:	4a1e      	ldr	r2, [pc, #120]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 800212c:	2384      	movs	r3, #132	; 0x84
 800212e:	58d3      	ldr	r3, [r2, r3]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	43da      	mvns	r2, r3
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	029b      	lsls	r3, r3, #10
 8002144:	4013      	ands	r3, r2
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002150:	4914      	ldr	r1, [pc, #80]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 8002152:	2284      	movs	r2, #132	; 0x84
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002158:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	58d3      	ldr	r3, [r2, r3]
 800215e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	43da      	mvns	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	025b      	lsls	r3, r3, #9
 8002172:	4013      	ands	r3, r2
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800217e:	4909      	ldr	r1, [pc, #36]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	40da      	lsrs	r2, r3
 8002194:	1e13      	subs	r3, r2, #0
 8002196:	d000      	beq.n	800219a <HAL_GPIO_Init+0x2ae>
 8002198:	e6b0      	b.n	8001efc <HAL_GPIO_Init+0x10>
  }
}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	b006      	add	sp, #24
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021800 	.word	0x40021800
 80021a8:	50000400 	.word	0x50000400
 80021ac:	50000800 	.word	0x50000800
 80021b0:	50000c00 	.word	0x50000c00

080021b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	0008      	movs	r0, r1
 80021be:	0011      	movs	r1, r2
 80021c0:	1cbb      	adds	r3, r7, #2
 80021c2:	1c02      	adds	r2, r0, #0
 80021c4:	801a      	strh	r2, [r3, #0]
 80021c6:	1c7b      	adds	r3, r7, #1
 80021c8:	1c0a      	adds	r2, r1, #0
 80021ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021cc:	1c7b      	adds	r3, r7, #1
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d004      	beq.n	80021de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021d4:	1cbb      	adds	r3, r7, #2
 80021d6:	881a      	ldrh	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021dc:	e003      	b.n	80021e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021de:	1cbb      	adds	r3, r7, #2
 80021e0:	881a      	ldrh	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b002      	add	sp, #8
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	000a      	movs	r2, r1
 80021f8:	1cbb      	adds	r3, r7, #2
 80021fa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002202:	1cbb      	adds	r3, r7, #2
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4013      	ands	r3, r2
 800220a:	041a      	lsls	r2, r3, #16
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	43db      	mvns	r3, r3
 8002210:	1cb9      	adds	r1, r7, #2
 8002212:	8809      	ldrh	r1, [r1, #0]
 8002214:	400b      	ands	r3, r1
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	619a      	str	r2, [r3, #24]
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	b004      	add	sp, #16
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e082      	b.n	800233c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2241      	movs	r2, #65	; 0x41
 800223a:	5c9b      	ldrb	r3, [r3, r2]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d107      	bne.n	8002252 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2240      	movs	r2, #64	; 0x40
 8002246:	2100      	movs	r1, #0
 8002248:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	0018      	movs	r0, r3
 800224e:	f7fe fbd5 	bl	80009fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2241      	movs	r2, #65	; 0x41
 8002256:	2124      	movs	r1, #36	; 0x24
 8002258:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	438a      	bics	r2, r1
 8002268:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4934      	ldr	r1, [pc, #208]	; (8002344 <HAL_I2C_Init+0x120>)
 8002274:	400a      	ands	r2, r1
 8002276:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4931      	ldr	r1, [pc, #196]	; (8002348 <HAL_I2C_Init+0x124>)
 8002284:	400a      	ands	r2, r1
 8002286:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d108      	bne.n	80022a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2180      	movs	r1, #128	; 0x80
 800229a:	0209      	lsls	r1, r1, #8
 800229c:	430a      	orrs	r2, r1
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	e007      	b.n	80022b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2184      	movs	r1, #132	; 0x84
 80022ac:	0209      	lsls	r1, r1, #8
 80022ae:	430a      	orrs	r2, r1
 80022b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d104      	bne.n	80022c4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2280      	movs	r2, #128	; 0x80
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	491f      	ldr	r1, [pc, #124]	; (800234c <HAL_I2C_Init+0x128>)
 80022d0:	430a      	orrs	r2, r1
 80022d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	491a      	ldr	r1, [pc, #104]	; (8002348 <HAL_I2C_Init+0x124>)
 80022e0:	400a      	ands	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69d9      	ldr	r1, [r3, #28]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1a      	ldr	r2, [r3, #32]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2101      	movs	r1, #1
 800231a:	430a      	orrs	r2, r1
 800231c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2241      	movs	r2, #65	; 0x41
 8002328:	2120      	movs	r1, #32
 800232a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2242      	movs	r2, #66	; 0x42
 8002336:	2100      	movs	r1, #0
 8002338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}
 8002344:	f0ffffff 	.word	0xf0ffffff
 8002348:	ffff7fff 	.word	0xffff7fff
 800234c:	02008000 	.word	0x02008000

08002350 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	1dbb      	adds	r3, r7, #6
 800235e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2241      	movs	r2, #65	; 0x41
 8002364:	5c9b      	ldrb	r3, [r3, r2]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	001a      	movs	r2, r3
 800236a:	2328      	movs	r3, #40	; 0x28
 800236c:	4013      	ands	r3, r2
 800236e:	2b28      	cmp	r3, #40	; 0x28
 8002370:	d000      	beq.n	8002374 <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 8002372:	e08f      	b.n	8002494 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 800237a:	1dbb      	adds	r3, r7, #6
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2280      	movs	r2, #128	; 0x80
 8002386:	0092      	lsls	r2, r2, #2
 8002388:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e083      	b.n	8002496 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800238e:	4a44      	ldr	r2, [pc, #272]	; (80024a0 <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	0011      	movs	r1, r2
 8002394:	0018      	movs	r0, r3
 8002396:	f001 faad 	bl	80038f4 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	5c9b      	ldrb	r3, [r3, r2]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e076      	b.n	8002496 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2240      	movs	r2, #64	; 0x40
 80023ac:	2101      	movs	r1, #1
 80023ae:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2241      	movs	r2, #65	; 0x41
 80023b4:	5c9b      	ldrb	r3, [r3, r2]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b2a      	cmp	r3, #42	; 0x2a
 80023ba:	d12c      	bne.n	8002416 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2102      	movs	r1, #2
 80023c0:	0018      	movs	r0, r3
 80023c2:	f001 fa97 	bl	80038f4 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	401a      	ands	r2, r3
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d11d      	bne.n	8002416 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	492f      	ldr	r1, [pc, #188]	; (80024a4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 80023e6:	400a      	ands	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d011      	beq.n	8002416 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	4a2c      	ldr	r2, [pc, #176]	; (80024a8 <HAL_I2C_Slave_Seq_Transmit_IT+0x158>)
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fe:	0018      	movs	r0, r3
 8002400:	f7ff fbfc 	bl	8001bfc <HAL_DMA_Abort_IT>
 8002404:	1e03      	subs	r3, r0, #0
 8002406:	d006      	beq.n	8002416 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	0018      	movs	r0, r3
 8002414:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2241      	movs	r2, #65	; 0x41
 800241a:	2129      	movs	r1, #41	; 0x29
 800241c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2242      	movs	r2, #66	; 0x42
 8002422:	2120      	movs	r1, #32
 8002424:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	491b      	ldr	r1, [pc, #108]	; (80024a4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 8002438:	400a      	ands	r2, r1
 800243a:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1dba      	adds	r2, r7, #6
 8002446:	8812      	ldrh	r2, [r2, #0]
 8002448:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4a13      	ldr	r2, [pc, #76]	; (80024ac <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 800245e:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	0c1b      	lsrs	r3, r3, #16
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2201      	movs	r2, #1
 800246c:	4013      	ands	r3, r2
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d103      	bne.n	800247c <HAL_I2C_Slave_Seq_Transmit_IT+0x12c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2208      	movs	r2, #8
 800247a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2240      	movs	r2, #64	; 0x40
 8002480:	2100      	movs	r1, #0
 8002482:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002484:	4a06      	ldr	r2, [pc, #24]	; (80024a0 <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	0011      	movs	r1, r2
 800248a:	0018      	movs	r0, r3
 800248c:	f001 f9ca 	bl	8003824 <I2C_Enable_IRQ>

    return HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	e000      	b.n	8002496 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
  }
  else
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
  }
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	b004      	add	sp, #16
 800249c:	bd80      	pop	{r7, pc}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	00008001 	.word	0x00008001
 80024a4:	ffff7fff 	.word	0xffff7fff
 80024a8:	08003773 	.word	0x08003773
 80024ac:	080027b5 	.word	0x080027b5

080024b0 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	1dbb      	adds	r3, r7, #6
 80024be:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2241      	movs	r2, #65	; 0x41
 80024c4:	5c9b      	ldrb	r3, [r3, r2]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	001a      	movs	r2, r3
 80024ca:	2328      	movs	r3, #40	; 0x28
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b28      	cmp	r3, #40	; 0x28
 80024d0:	d000      	beq.n	80024d4 <HAL_I2C_Slave_Seq_Receive_IT+0x24>
 80024d2:	e08f      	b.n	80025f4 <HAL_I2C_Slave_Seq_Receive_IT+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_I2C_Slave_Seq_Receive_IT+0x32>
 80024da:	1dbb      	adds	r3, r7, #6
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e083      	b.n	80025f6 <HAL_I2C_Slave_Seq_Receive_IT+0x146>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80024ee:	4a44      	ldr	r2, [pc, #272]	; (8002600 <HAL_I2C_Slave_Seq_Receive_IT+0x150>)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	0011      	movs	r1, r2
 80024f4:	0018      	movs	r0, r3
 80024f6:	f001 f9fd 	bl	80038f4 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2240      	movs	r2, #64	; 0x40
 80024fe:	5c9b      	ldrb	r3, [r3, r2]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_I2C_Slave_Seq_Receive_IT+0x58>
 8002504:	2302      	movs	r3, #2
 8002506:	e076      	b.n	80025f6 <HAL_I2C_Slave_Seq_Receive_IT+0x146>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2240      	movs	r2, #64	; 0x40
 800250c:	2101      	movs	r1, #1
 800250e:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2241      	movs	r2, #65	; 0x41
 8002514:	5c9b      	ldrb	r3, [r3, r2]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b29      	cmp	r3, #41	; 0x29
 800251a:	d12c      	bne.n	8002576 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2101      	movs	r1, #1
 8002520:	0018      	movs	r0, r3
 8002522:	f001 f9e7 	bl	80038f4 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	01db      	lsls	r3, r3, #7
 8002530:	401a      	ands	r2, r3
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	01db      	lsls	r3, r3, #7
 8002536:	429a      	cmp	r2, r3
 8002538:	d11d      	bne.n	8002576 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	492f      	ldr	r1, [pc, #188]	; (8002604 <HAL_I2C_Slave_Seq_Receive_IT+0x154>)
 8002546:	400a      	ands	r2, r1
 8002548:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254e:	2b00      	cmp	r3, #0
 8002550:	d011      	beq.n	8002576 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	4a2c      	ldr	r2, [pc, #176]	; (8002608 <HAL_I2C_Slave_Seq_Receive_IT+0x158>)
 8002558:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255e:	0018      	movs	r0, r3
 8002560:	f7ff fb4c 	bl	8001bfc <HAL_DMA_Abort_IT>
 8002564:	1e03      	subs	r3, r0, #0
 8002566:	d006      	beq.n	8002576 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002572:	0018      	movs	r0, r3
 8002574:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2241      	movs	r2, #65	; 0x41
 800257a:	212a      	movs	r1, #42	; 0x2a
 800257c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2242      	movs	r2, #66	; 0x42
 8002582:	2120      	movs	r1, #32
 8002584:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	491d      	ldr	r1, [pc, #116]	; (800260c <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8002598:	400a      	ands	r2, r1
 800259a:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1dba      	adds	r2, r7, #6
 80025a6:	8812      	ldrh	r2, [r2, #0]
 80025a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 80025be:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	0c1b      	lsrs	r3, r3, #16
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2201      	movs	r2, #1
 80025cc:	4013      	ands	r3, r2
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d103      	bne.n	80025dc <HAL_I2C_Slave_Seq_Receive_IT+0x12c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2208      	movs	r2, #8
 80025da:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2240      	movs	r2, #64	; 0x40
 80025e0:	2100      	movs	r1, #0
 80025e2:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80025e4:	4a06      	ldr	r2, [pc, #24]	; (8002600 <HAL_I2C_Slave_Seq_Receive_IT+0x150>)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	0011      	movs	r1, r2
 80025ea:	0018      	movs	r0, r3
 80025ec:	f001 f91a 	bl	8003824 <I2C_Enable_IRQ>

    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e000      	b.n	80025f6 <HAL_I2C_Slave_Seq_Receive_IT+0x146>
  }
  else
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
  }
}
 80025f6:	0018      	movs	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b004      	add	sp, #16
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	00008002 	.word	0x00008002
 8002604:	ffffbfff 	.word	0xffffbfff
 8002608:	08003773 	.word	0x08003773
 800260c:	ffff7fff 	.word	0xffff7fff
 8002610:	080027b5 	.word	0x080027b5

08002614 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2241      	movs	r2, #65	; 0x41
 8002620:	5c9b      	ldrb	r3, [r3, r2]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b20      	cmp	r3, #32
 8002626:	d10f      	bne.n	8002648 <HAL_I2C_EnableListen_IT+0x34>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2241      	movs	r2, #65	; 0x41
 800262c:	2128      	movs	r1, #40	; 0x28
 800262e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a08      	ldr	r2, [pc, #32]	; (8002654 <HAL_I2C_EnableListen_IT+0x40>)
 8002634:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	021a      	lsls	r2, r3, #8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	0011      	movs	r1, r2
 800263e:	0018      	movs	r0, r3
 8002640:	f001 f8f0 	bl	8003824 <I2C_Enable_IRQ>

    return HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	e000      	b.n	800264a <HAL_I2C_EnableListen_IT+0x36>
  }
  else
  {
    return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
  }
}
 800264a:	0018      	movs	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	b002      	add	sp, #8
 8002650:	bd80      	pop	{r7, pc}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	080027b5 	.word	0x080027b5

08002658 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	68f9      	ldr	r1, [r7, #12]
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
  }
}
 8002684:	46c0      	nop			; (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b004      	add	sp, #16
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	001a      	movs	r2, r3
 80026aa:	2301      	movs	r3, #1
 80026ac:	4013      	ands	r3, r2
 80026ae:	d010      	beq.n	80026d2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	09db      	lsrs	r3, r3, #7
 80026b4:	001a      	movs	r2, r3
 80026b6:	2301      	movs	r3, #1
 80026b8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80026ba:	d00a      	beq.n	80026d2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	2201      	movs	r2, #1
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2280      	movs	r2, #128	; 0x80
 80026ce:	0052      	lsls	r2, r2, #1
 80026d0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	0a9b      	lsrs	r3, r3, #10
 80026d6:	001a      	movs	r2, r3
 80026d8:	2301      	movs	r3, #1
 80026da:	4013      	ands	r3, r2
 80026dc:	d010      	beq.n	8002700 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	09db      	lsrs	r3, r3, #7
 80026e2:	001a      	movs	r2, r3
 80026e4:	2301      	movs	r3, #1
 80026e6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80026e8:	d00a      	beq.n	8002700 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	2208      	movs	r2, #8
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	00d2      	lsls	r2, r2, #3
 80026fe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	0a5b      	lsrs	r3, r3, #9
 8002704:	001a      	movs	r2, r3
 8002706:	2301      	movs	r3, #1
 8002708:	4013      	ands	r3, r2
 800270a:	d010      	beq.n	800272e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	09db      	lsrs	r3, r3, #7
 8002710:	001a      	movs	r2, r3
 8002712:	2301      	movs	r3, #1
 8002714:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002716:	d00a      	beq.n	800272e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271c:	2202      	movs	r2, #2
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2280      	movs	r2, #128	; 0x80
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	220b      	movs	r2, #11
 8002738:	4013      	ands	r3, r2
 800273a:	d005      	beq.n	8002748 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	0011      	movs	r1, r2
 8002742:	0018      	movs	r0, r3
 8002744:	f000 fee8 	bl	8003518 <I2C_ITError>
  }
}
 8002748:	46c0      	nop			; (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	b006      	add	sp, #24
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b002      	add	sp, #8
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	b002      	add	sp, #8
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80027ac:	0018      	movs	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b002      	add	sp, #8
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2240      	movs	r2, #64	; 0x40
 80027ce:	5c9b      	ldrb	r3, [r3, r2]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <I2C_Slave_ISR_IT+0x24>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e0fa      	b.n	80029ce <I2C_Slave_ISR_IT+0x21a>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2240      	movs	r2, #64	; 0x40
 80027dc:	2101      	movs	r1, #1
 80027de:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	001a      	movs	r2, r3
 80027e6:	2301      	movs	r3, #1
 80027e8:	4013      	ands	r3, r2
 80027ea:	d00b      	beq.n	8002804 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	001a      	movs	r2, r3
 80027f2:	2301      	movs	r3, #1
 80027f4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027f6:	d005      	beq.n	8002804 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	0011      	movs	r1, r2
 80027fe:	0018      	movs	r0, r3
 8002800:	f000 fd0c 	bl	800321c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	001a      	movs	r2, r3
 800280a:	2301      	movs	r3, #1
 800280c:	4013      	ands	r3, r2
 800280e:	d054      	beq.n	80028ba <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	001a      	movs	r2, r3
 8002816:	2301      	movs	r3, #1
 8002818:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800281a:	d04e      	beq.n	80028ba <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d12d      	bne.n	8002882 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2241      	movs	r2, #65	; 0x41
 800282a:	5c9b      	ldrb	r3, [r3, r2]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b28      	cmp	r3, #40	; 0x28
 8002830:	d10b      	bne.n	800284a <I2C_Slave_ISR_IT+0x96>
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	049b      	lsls	r3, r3, #18
 8002838:	429a      	cmp	r2, r3
 800283a:	d106      	bne.n	800284a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	0011      	movs	r1, r2
 8002842:	0018      	movs	r0, r3
 8002844:	f000 fe0e 	bl	8003464 <I2C_ITListenCplt>
 8002848:	e036      	b.n	80028b8 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2241      	movs	r2, #65	; 0x41
 800284e:	5c9b      	ldrb	r3, [r3, r2]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b29      	cmp	r3, #41	; 0x29
 8002854:	d110      	bne.n	8002878 <I2C_Slave_ISR_IT+0xc4>
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	4a5f      	ldr	r2, [pc, #380]	; (80029d8 <I2C_Slave_ISR_IT+0x224>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00c      	beq.n	8002878 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2210      	movs	r2, #16
 8002864:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	0018      	movs	r0, r3
 800286a:	f000 ff60 	bl	800372e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	0018      	movs	r0, r3
 8002872:	f000 fb9b 	bl	8002fac <I2C_ITSlaveSeqCplt>
 8002876:	e01f      	b.n	80028b8 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2210      	movs	r2, #16
 800287e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002880:	e09d      	b.n	80029be <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2210      	movs	r2, #16
 8002888:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	2204      	movs	r2, #4
 8002890:	431a      	orrs	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <I2C_Slave_ISR_IT+0xf4>
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	045b      	lsls	r3, r3, #17
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d000      	beq.n	80028a8 <I2C_Slave_ISR_IT+0xf4>
 80028a6:	e08a      	b.n	80029be <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	0011      	movs	r1, r2
 80028b0:	0018      	movs	r0, r3
 80028b2:	f000 fe31 	bl	8003518 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80028b6:	e082      	b.n	80029be <I2C_Slave_ISR_IT+0x20a>
 80028b8:	e081      	b.n	80029be <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	089b      	lsrs	r3, r3, #2
 80028be:	001a      	movs	r2, r3
 80028c0:	2301      	movs	r3, #1
 80028c2:	4013      	ands	r3, r2
 80028c4:	d031      	beq.n	800292a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	001a      	movs	r2, r3
 80028cc:	2301      	movs	r3, #1
 80028ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80028d0:	d02b      	beq.n	800292a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d018      	beq.n	800290e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d154      	bne.n	80029c2 <I2C_Slave_ISR_IT+0x20e>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	4a2f      	ldr	r2, [pc, #188]	; (80029d8 <I2C_Slave_ISR_IT+0x224>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d050      	beq.n	80029c2 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	0018      	movs	r0, r3
 8002924:	f000 fb42 	bl	8002fac <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002928:	e04b      	b.n	80029c2 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	08db      	lsrs	r3, r3, #3
 800292e:	001a      	movs	r2, r3
 8002930:	2301      	movs	r3, #1
 8002932:	4013      	ands	r3, r2
 8002934:	d00c      	beq.n	8002950 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	08db      	lsrs	r3, r3, #3
 800293a:	001a      	movs	r2, r3
 800293c:	2301      	movs	r3, #1
 800293e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002940:	d006      	beq.n	8002950 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	0011      	movs	r1, r2
 8002948:	0018      	movs	r0, r3
 800294a:	f000 fa49 	bl	8002de0 <I2C_ITAddrCplt>
 800294e:	e039      	b.n	80029c4 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	001a      	movs	r2, r3
 8002956:	2301      	movs	r3, #1
 8002958:	4013      	ands	r3, r2
 800295a:	d033      	beq.n	80029c4 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	001a      	movs	r2, r3
 8002962:	2301      	movs	r3, #1
 8002964:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002966:	d02d      	beq.n	80029c4 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d018      	beq.n	80029a4 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	781a      	ldrb	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	; 0x28
 80029a2:	e00f      	b.n	80029c4 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	045b      	lsls	r3, r3, #17
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d002      	beq.n	80029b4 <I2C_Slave_ISR_IT+0x200>
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d107      	bne.n	80029c4 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f000 faf8 	bl	8002fac <I2C_ITSlaveSeqCplt>
 80029bc:	e002      	b.n	80029c4 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	e000      	b.n	80029c4 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80029c2:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2240      	movs	r2, #64	; 0x40
 80029c8:	2100      	movs	r1, #0
 80029ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	0018      	movs	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b006      	add	sp, #24
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	ffff0000 	.word	0xffff0000

080029dc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b089      	sub	sp, #36	; 0x24
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2240      	movs	r2, #64	; 0x40
 80029ec:	5c9b      	ldrb	r3, [r3, r2]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <I2C_Master_ISR_DMA+0x1a>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0f7      	b.n	8002be6 <I2C_Master_ISR_DMA+0x20a>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2240      	movs	r2, #64	; 0x40
 80029fa:	2101      	movs	r1, #1
 80029fc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	001a      	movs	r2, r3
 8002a04:	2301      	movs	r3, #1
 8002a06:	4013      	ands	r3, r2
 8002a08:	d019      	beq.n	8002a3e <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	001a      	movs	r2, r3
 8002a10:	2301      	movs	r3, #1
 8002a12:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a14:	d013      	beq.n	8002a3e <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2210      	movs	r2, #16
 8002a1c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	2204      	movs	r2, #4
 8002a24:	431a      	orrs	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2120      	movs	r1, #32
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 fef8 	bl	8003824 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 fe79 	bl	800372e <I2C_Flush_TXDR>
 8002a3c:	e0ce      	b.n	8002bdc <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	09db      	lsrs	r3, r3, #7
 8002a42:	001a      	movs	r2, r3
 8002a44:	2301      	movs	r3, #1
 8002a46:	4013      	ands	r3, r2
 8002a48:	d100      	bne.n	8002a4c <I2C_Master_ISR_DMA+0x70>
 8002a4a:	e07e      	b.n	8002b4a <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	099b      	lsrs	r3, r3, #6
 8002a50:	001a      	movs	r2, r3
 8002a52:	2301      	movs	r3, #1
 8002a54:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002a56:	d100      	bne.n	8002a5a <I2C_Master_ISR_DMA+0x7e>
 8002a58:	e077      	b.n	8002b4a <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2140      	movs	r1, #64	; 0x40
 8002a66:	438a      	bics	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d055      	beq.n	8002b20 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	2312      	movs	r3, #18
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	0592      	lsls	r2, r2, #22
 8002a82:	0d92      	lsrs	r2, r2, #22
 8002a84:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	2bff      	cmp	r3, #255	; 0xff
 8002a8e:	d906      	bls.n	8002a9e <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	22ff      	movs	r2, #255	; 0xff
 8002a94:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	045b      	lsls	r3, r3, #17
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	e010      	b.n	8002ac0 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	4a50      	ldr	r2, [pc, #320]	; (8002bf0 <I2C_Master_ISR_DMA+0x214>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d003      	beq.n	8002aba <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	e002      	b.n	8002ac0 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	049b      	lsls	r3, r3, #18
 8002abe:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	697c      	ldr	r4, [r7, #20]
 8002ac8:	2312      	movs	r3, #18
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	8819      	ldrh	r1, [r3, #0]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	0023      	movs	r3, r4
 8002ad6:	f000 fe6b 	bl	80037b0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2241      	movs	r2, #65	; 0x41
 8002af0:	5c9b      	ldrb	r3, [r3, r2]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b22      	cmp	r3, #34	; 0x22
 8002af6:	d109      	bne.n	8002b0c <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	0209      	lsls	r1, r1, #8
 8002b06:	430a      	orrs	r2, r1
 8002b08:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002b0a:	e067      	b.n	8002bdc <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	01c9      	lsls	r1, r1, #7
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002b1e:	e05d      	b.n	8002bdc <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	049b      	lsls	r3, r3, #18
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	049b      	lsls	r3, r3, #18
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d004      	beq.n	8002b3e <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	0018      	movs	r0, r3
 8002b38:	f000 f9f6 	bl	8002f28 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002b3c:	e04e      	b.n	8002bdc <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2140      	movs	r1, #64	; 0x40
 8002b42:	0018      	movs	r0, r3
 8002b44:	f000 fce8 	bl	8003518 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002b48:	e048      	b.n	8002bdc <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	099b      	lsrs	r3, r3, #6
 8002b4e:	001a      	movs	r2, r3
 8002b50:	2301      	movs	r3, #1
 8002b52:	4013      	ands	r3, r2
 8002b54:	d02e      	beq.n	8002bb4 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	001a      	movs	r2, r3
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002b60:	d028      	beq.n	8002bb4 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d11d      	bne.n	8002ba8 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	049b      	lsls	r3, r3, #18
 8002b76:	401a      	ands	r2, r3
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	049b      	lsls	r3, r3, #18
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d02c      	beq.n	8002bda <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	4a1a      	ldr	r2, [pc, #104]	; (8002bf0 <I2C_Master_ISR_DMA+0x214>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d109      	bne.n	8002b9e <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2180      	movs	r1, #128	; 0x80
 8002b96:	01c9      	lsls	r1, r1, #7
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002b9c:	e01d      	b.n	8002bda <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f000 f9c1 	bl	8002f28 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002ba6:	e018      	b.n	8002bda <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2140      	movs	r1, #64	; 0x40
 8002bac:	0018      	movs	r0, r3
 8002bae:	f000 fcb3 	bl	8003518 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002bb2:	e012      	b.n	8002bda <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	001a      	movs	r2, r3
 8002bba:	2301      	movs	r3, #1
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d00d      	beq.n	8002bdc <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	001a      	movs	r2, r3
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002bca:	d007      	beq.n	8002bdc <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	0011      	movs	r1, r2
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f000 fa50 	bl	8003078 <I2C_ITMasterCplt>
 8002bd8:	e000      	b.n	8002bdc <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8002bda:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2240      	movs	r2, #64	; 0x40
 8002be0:	2100      	movs	r1, #0
 8002be2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	0018      	movs	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b007      	add	sp, #28
 8002bec:	bd90      	pop	{r4, r7, pc}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	ffff0000 	.word	0xffff0000

08002bf4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2240      	movs	r2, #64	; 0x40
 8002c0e:	5c9b      	ldrb	r3, [r3, r2]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <I2C_Slave_ISR_DMA+0x24>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e0dd      	b.n	8002dd4 <I2C_Slave_ISR_DMA+0x1e0>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2240      	movs	r2, #64	; 0x40
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	001a      	movs	r2, r3
 8002c26:	2301      	movs	r3, #1
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	001a      	movs	r2, r3
 8002c32:	2301      	movs	r3, #1
 8002c34:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c36:	d005      	beq.n	8002c44 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	0011      	movs	r1, r2
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f000 faec 	bl	800321c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	001a      	movs	r2, r3
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d100      	bne.n	8002c52 <I2C_Slave_ISR_DMA+0x5e>
 8002c50:	e0a9      	b.n	8002da6 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	001a      	movs	r2, r3
 8002c58:	2301      	movs	r3, #1
 8002c5a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002c5c:	d100      	bne.n	8002c60 <I2C_Slave_ISR_DMA+0x6c>
 8002c5e:	e0a2      	b.n	8002da6 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	0b9b      	lsrs	r3, r3, #14
 8002c64:	001a      	movs	r2, r3
 8002c66:	2301      	movs	r3, #1
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d106      	bne.n	8002c7a <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	0bdb      	lsrs	r3, r3, #15
 8002c70:	001a      	movs	r2, r3
 8002c72:	2301      	movs	r3, #1
 8002c74:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c76:	d100      	bne.n	8002c7a <I2C_Slave_ISR_DMA+0x86>
 8002c78:	e08e      	b.n	8002d98 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	0bdb      	lsrs	r3, r3, #15
 8002c86:	001a      	movs	r2, r3
 8002c88:	2301      	movs	r3, #1
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d007      	beq.n	8002c9e <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00d      	beq.n	8002cc2 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0b9b      	lsrs	r3, r3, #14
 8002caa:	001a      	movs	r2, r3
 8002cac:	2301      	movs	r3, #1
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d007      	beq.n	8002cc2 <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d12d      	bne.n	8002d24 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2241      	movs	r2, #65	; 0x41
 8002ccc:	5c9b      	ldrb	r3, [r3, r2]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b28      	cmp	r3, #40	; 0x28
 8002cd2:	d10b      	bne.n	8002cec <I2C_Slave_ISR_DMA+0xf8>
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	049b      	lsls	r3, r3, #18
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d106      	bne.n	8002cec <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	0011      	movs	r1, r2
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f000 fbbd 	bl	8003464 <I2C_ITListenCplt>
 8002cea:	e054      	b.n	8002d96 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2241      	movs	r2, #65	; 0x41
 8002cf0:	5c9b      	ldrb	r3, [r3, r2]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b29      	cmp	r3, #41	; 0x29
 8002cf6:	d110      	bne.n	8002d1a <I2C_Slave_ISR_DMA+0x126>
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	4a38      	ldr	r2, [pc, #224]	; (8002ddc <I2C_Slave_ISR_DMA+0x1e8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00c      	beq.n	8002d1a <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2210      	movs	r2, #16
 8002d06:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f000 fd0f 	bl	800372e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 f94a 	bl	8002fac <I2C_ITSlaveSeqCplt>
 8002d18:	e03d      	b.n	8002d96 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2210      	movs	r2, #16
 8002d20:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002d22:	e03e      	b.n	8002da2 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2210      	movs	r2, #16
 8002d2a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	2204      	movs	r2, #4
 8002d32:	431a      	orrs	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002d38:	2317      	movs	r3, #23
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	2141      	movs	r1, #65	; 0x41
 8002d40:	5c52      	ldrb	r2, [r2, r1]
 8002d42:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <I2C_Slave_ISR_DMA+0x160>
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	045b      	lsls	r3, r3, #17
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d126      	bne.n	8002da2 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d54:	2217      	movs	r2, #23
 8002d56:	18bb      	adds	r3, r7, r2
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b21      	cmp	r3, #33	; 0x21
 8002d5c:	d003      	beq.n	8002d66 <I2C_Slave_ISR_DMA+0x172>
 8002d5e:	18bb      	adds	r3, r7, r2
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b29      	cmp	r3, #41	; 0x29
 8002d64:	d103      	bne.n	8002d6e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2221      	movs	r2, #33	; 0x21
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d6c:	e00b      	b.n	8002d86 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d6e:	2217      	movs	r2, #23
 8002d70:	18bb      	adds	r3, r7, r2
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b22      	cmp	r3, #34	; 0x22
 8002d76:	d003      	beq.n	8002d80 <I2C_Slave_ISR_DMA+0x18c>
 8002d78:	18bb      	adds	r3, r7, r2
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d7e:	d102      	bne.n	8002d86 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2222      	movs	r2, #34	; 0x22
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	0011      	movs	r1, r2
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f000 fbc2 	bl	8003518 <I2C_ITError>
      if (treatdmanack == 1U)
 8002d94:	e005      	b.n	8002da2 <I2C_Slave_ISR_DMA+0x1ae>
 8002d96:	e004      	b.n	8002da2 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002da0:	e013      	b.n	8002dca <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8002da2:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002da4:	e011      	b.n	8002dca <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	08db      	lsrs	r3, r3, #3
 8002daa:	001a      	movs	r2, r3
 8002dac:	2301      	movs	r3, #1
 8002dae:	4013      	ands	r3, r2
 8002db0:	d00b      	beq.n	8002dca <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	08db      	lsrs	r3, r3, #3
 8002db6:	001a      	movs	r2, r3
 8002db8:	2301      	movs	r3, #1
 8002dba:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002dbc:	d005      	beq.n	8002dca <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	0011      	movs	r1, r2
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f000 f80b 	bl	8002de0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2240      	movs	r2, #64	; 0x40
 8002dce:	2100      	movs	r1, #0
 8002dd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b008      	add	sp, #32
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	ffff0000 	.word	0xffff0000

08002de0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002de0:	b5b0      	push	{r4, r5, r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2241      	movs	r2, #65	; 0x41
 8002dee:	5c9b      	ldrb	r3, [r3, r2]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	001a      	movs	r2, r3
 8002df4:	2328      	movs	r3, #40	; 0x28
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b28      	cmp	r3, #40	; 0x28
 8002dfa:	d000      	beq.n	8002dfe <I2C_ITAddrCplt+0x1e>
 8002dfc:	e088      	b.n	8002f10 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	250f      	movs	r5, #15
 8002e0a:	197b      	adds	r3, r7, r5
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	400a      	ands	r2, r1
 8002e10:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	200c      	movs	r0, #12
 8002e1e:	183b      	adds	r3, r7, r0
 8002e20:	21fe      	movs	r1, #254	; 0xfe
 8002e22:	400a      	ands	r2, r1
 8002e24:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	240a      	movs	r4, #10
 8002e30:	193b      	adds	r3, r7, r4
 8002e32:	0592      	lsls	r2, r2, #22
 8002e34:	0d92      	lsrs	r2, r2, #22
 8002e36:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	2308      	movs	r3, #8
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	21fe      	movs	r1, #254	; 0xfe
 8002e46:	400a      	ands	r2, r1
 8002e48:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d148      	bne.n	8002ee4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002e52:	0021      	movs	r1, r4
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	09db      	lsrs	r3, r3, #7
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	183b      	adds	r3, r7, r0
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	4053      	eors	r3, r2
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	001a      	movs	r2, r3
 8002e66:	2306      	movs	r3, #6
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d120      	bne.n	8002eae <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002e6c:	183b      	adds	r3, r7, r0
 8002e6e:	187a      	adds	r2, r7, r1
 8002e70:	8812      	ldrh	r2, [r2, #0]
 8002e72:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d14c      	bne.n	8002f20 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2208      	movs	r2, #8
 8002e92:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2240      	movs	r2, #64	; 0x40
 8002e98:	2100      	movs	r1, #0
 8002e9a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e9c:	183b      	adds	r3, r7, r0
 8002e9e:	881a      	ldrh	r2, [r3, #0]
 8002ea0:	197b      	adds	r3, r7, r5
 8002ea2:	7819      	ldrb	r1, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f7fd fc9a 	bl	80007e0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002eac:	e038      	b.n	8002f20 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8002eae:	240c      	movs	r4, #12
 8002eb0:	193b      	adds	r3, r7, r4
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	18ba      	adds	r2, r7, r2
 8002eb6:	8812      	ldrh	r2, [r2, #0]
 8002eb8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002eba:	2380      	movs	r3, #128	; 0x80
 8002ebc:	021a      	lsls	r2, r3, #8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	0011      	movs	r1, r2
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 fd16 	bl	80038f4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2240      	movs	r2, #64	; 0x40
 8002ecc:	2100      	movs	r1, #0
 8002ece:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ed0:	193b      	adds	r3, r7, r4
 8002ed2:	881a      	ldrh	r2, [r3, #0]
 8002ed4:	230f      	movs	r3, #15
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	7819      	ldrb	r1, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7fd fc7f 	bl	80007e0 <HAL_I2C_AddrCallback>
}
 8002ee2:	e01d      	b.n	8002f20 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	021a      	lsls	r2, r3, #8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	0011      	movs	r1, r2
 8002eec:	0018      	movs	r0, r3
 8002eee:	f000 fd01 	bl	80038f4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2240      	movs	r2, #64	; 0x40
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002efa:	230c      	movs	r3, #12
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	881a      	ldrh	r2, [r3, #0]
 8002f00:	230f      	movs	r3, #15
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	7819      	ldrb	r1, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7fd fc69 	bl	80007e0 <HAL_I2C_AddrCallback>
}
 8002f0e:	e007      	b.n	8002f20 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2208      	movs	r2, #8
 8002f16:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2240      	movs	r2, #64	; 0x40
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	5499      	strb	r1, [r3, r2]
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b004      	add	sp, #16
 8002f26:	bdb0      	pop	{r4, r5, r7, pc}

08002f28 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2242      	movs	r2, #66	; 0x42
 8002f34:	2100      	movs	r1, #0
 8002f36:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2241      	movs	r2, #65	; 0x41
 8002f3c:	5c9b      	ldrb	r3, [r3, r2]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b21      	cmp	r3, #33	; 0x21
 8002f42:	d117      	bne.n	8002f74 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2241      	movs	r2, #65	; 0x41
 8002f48:	2120      	movs	r1, #32
 8002f4a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2211      	movs	r2, #17
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 fcc9 	bl	80038f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2240      	movs	r2, #64	; 0x40
 8002f66:	2100      	movs	r1, #0
 8002f68:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7ff fbef 	bl	8002750 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f72:	e016      	b.n	8002fa2 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2241      	movs	r2, #65	; 0x41
 8002f78:	2120      	movs	r1, #32
 8002f7a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2212      	movs	r2, #18
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2102      	movs	r1, #2
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 fcb1 	bl	80038f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2240      	movs	r2, #64	; 0x40
 8002f96:	2100      	movs	r1, #0
 8002f98:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f7ff fbdf 	bl	8002760 <HAL_I2C_MasterRxCpltCallback>
}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b002      	add	sp, #8
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2242      	movs	r2, #66	; 0x42
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	0b9b      	lsrs	r3, r3, #14
 8002fc8:	001a      	movs	r2, r3
 8002fca:	2301      	movs	r3, #1
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d008      	beq.n	8002fe2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4925      	ldr	r1, [pc, #148]	; (8003070 <I2C_ITSlaveSeqCplt+0xc4>)
 8002fdc:	400a      	ands	r2, r1
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e00d      	b.n	8002ffe <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	0bdb      	lsrs	r3, r3, #15
 8002fe6:	001a      	movs	r2, r3
 8002fe8:	2301      	movs	r3, #1
 8002fea:	4013      	ands	r3, r2
 8002fec:	d007      	beq.n	8002ffe <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	491e      	ldr	r1, [pc, #120]	; (8003074 <I2C_ITSlaveSeqCplt+0xc8>)
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2241      	movs	r2, #65	; 0x41
 8003002:	5c9b      	ldrb	r3, [r3, r2]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b29      	cmp	r3, #41	; 0x29
 8003008:	d114      	bne.n	8003034 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2241      	movs	r2, #65	; 0x41
 800300e:	2128      	movs	r1, #40	; 0x28
 8003010:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2221      	movs	r2, #33	; 0x21
 8003016:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2101      	movs	r1, #1
 800301c:	0018      	movs	r0, r3
 800301e:	f000 fc69 	bl	80038f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2240      	movs	r2, #64	; 0x40
 8003026:	2100      	movs	r1, #0
 8003028:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	0018      	movs	r0, r3
 800302e:	f7fd fb9f 	bl	8000770 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003032:	e019      	b.n	8003068 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2241      	movs	r2, #65	; 0x41
 8003038:	5c9b      	ldrb	r3, [r3, r2]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b2a      	cmp	r3, #42	; 0x2a
 800303e:	d113      	bne.n	8003068 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2241      	movs	r2, #65	; 0x41
 8003044:	2128      	movs	r1, #40	; 0x28
 8003046:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2222      	movs	r2, #34	; 0x22
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2102      	movs	r1, #2
 8003052:	0018      	movs	r0, r3
 8003054:	f000 fc4e 	bl	80038f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2240      	movs	r2, #64	; 0x40
 800305c:	2100      	movs	r1, #0
 800305e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	0018      	movs	r0, r3
 8003064:	f7fd fb9a 	bl	800079c <HAL_I2C_SlaveRxCpltCallback>
}
 8003068:	46c0      	nop			; (mov r8, r8)
 800306a:	46bd      	mov	sp, r7
 800306c:	b004      	add	sp, #16
 800306e:	bd80      	pop	{r7, pc}
 8003070:	ffffbfff 	.word	0xffffbfff
 8003074:	ffff7fff 	.word	0xffff7fff

08003078 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2220      	movs	r2, #32
 800308c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2241      	movs	r2, #65	; 0x41
 8003092:	5c9b      	ldrb	r3, [r3, r2]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b21      	cmp	r3, #33	; 0x21
 8003098:	d108      	bne.n	80030ac <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2101      	movs	r1, #1
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 fc28 	bl	80038f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2211      	movs	r2, #17
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
 80030aa:	e00d      	b.n	80030c8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2241      	movs	r2, #65	; 0x41
 80030b0:	5c9b      	ldrb	r3, [r3, r2]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b22      	cmp	r3, #34	; 0x22
 80030b6:	d107      	bne.n	80030c8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2102      	movs	r1, #2
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 fc19 	bl	80038f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2212      	movs	r2, #18
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4950      	ldr	r1, [pc, #320]	; (8003214 <I2C_ITMasterCplt+0x19c>)
 80030d4:	400a      	ands	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4d      	ldr	r2, [pc, #308]	; (8003218 <I2C_ITMasterCplt+0x1a0>)
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	001a      	movs	r2, r3
 80030ea:	2301      	movs	r3, #1
 80030ec:	4013      	ands	r3, r2
 80030ee:	d009      	beq.n	8003104 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2210      	movs	r2, #16
 80030f6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	2204      	movs	r2, #4
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2241      	movs	r2, #65	; 0x41
 8003108:	5c9b      	ldrb	r3, [r3, r2]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b60      	cmp	r3, #96	; 0x60
 800310e:	d10b      	bne.n	8003128 <I2C_ITMasterCplt+0xb0>
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	001a      	movs	r2, r3
 8003116:	2301      	movs	r3, #1
 8003118:	4013      	ands	r3, r2
 800311a:	d005      	beq.n	8003128 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	b2db      	uxtb	r3, r3
 8003124:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003126:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	0018      	movs	r0, r3
 800312c:	f000 faff 	bl	800372e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003134:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2241      	movs	r2, #65	; 0x41
 800313a:	5c9b      	ldrb	r3, [r3, r2]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b60      	cmp	r3, #96	; 0x60
 8003140:	d002      	beq.n	8003148 <I2C_ITMasterCplt+0xd0>
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	0011      	movs	r1, r2
 8003150:	0018      	movs	r0, r3
 8003152:	f000 f9e1 	bl	8003518 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003156:	e058      	b.n	800320a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2241      	movs	r2, #65	; 0x41
 800315c:	5c9b      	ldrb	r3, [r3, r2]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b21      	cmp	r3, #33	; 0x21
 8003162:	d126      	bne.n	80031b2 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2241      	movs	r2, #65	; 0x41
 8003168:	2120      	movs	r1, #32
 800316a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2242      	movs	r2, #66	; 0x42
 8003176:	5c9b      	ldrb	r3, [r3, r2]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	d10c      	bne.n	8003198 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2242      	movs	r2, #66	; 0x42
 8003182:	2100      	movs	r1, #0
 8003184:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2240      	movs	r2, #64	; 0x40
 800318a:	2100      	movs	r1, #0
 800318c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	0018      	movs	r0, r3
 8003192:	f7ff faed 	bl	8002770 <HAL_I2C_MemTxCpltCallback>
}
 8003196:	e038      	b.n	800320a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2242      	movs	r2, #66	; 0x42
 800319c:	2100      	movs	r1, #0
 800319e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2240      	movs	r2, #64	; 0x40
 80031a4:	2100      	movs	r1, #0
 80031a6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	0018      	movs	r0, r3
 80031ac:	f7ff fad0 	bl	8002750 <HAL_I2C_MasterTxCpltCallback>
}
 80031b0:	e02b      	b.n	800320a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2241      	movs	r2, #65	; 0x41
 80031b6:	5c9b      	ldrb	r3, [r3, r2]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b22      	cmp	r3, #34	; 0x22
 80031bc:	d125      	bne.n	800320a <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2241      	movs	r2, #65	; 0x41
 80031c2:	2120      	movs	r1, #32
 80031c4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2242      	movs	r2, #66	; 0x42
 80031d0:	5c9b      	ldrb	r3, [r3, r2]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d10c      	bne.n	80031f2 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2242      	movs	r2, #66	; 0x42
 80031dc:	2100      	movs	r1, #0
 80031de:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2240      	movs	r2, #64	; 0x40
 80031e4:	2100      	movs	r1, #0
 80031e6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7ff fac8 	bl	8002780 <HAL_I2C_MemRxCpltCallback>
}
 80031f0:	e00b      	b.n	800320a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2242      	movs	r2, #66	; 0x42
 80031f6:	2100      	movs	r1, #0
 80031f8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2240      	movs	r2, #64	; 0x40
 80031fe:	2100      	movs	r1, #0
 8003200:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	0018      	movs	r0, r3
 8003206:	f7ff faab 	bl	8002760 <HAL_I2C_MasterRxCpltCallback>
}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b006      	add	sp, #24
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	fe00e800 	.word	0xfe00e800
 8003218:	ffff0000 	.word	0xffff0000

0800321c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003232:	200f      	movs	r0, #15
 8003234:	183b      	adds	r3, r7, r0
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	2141      	movs	r1, #65	; 0x41
 800323a:	5c52      	ldrb	r2, [r2, r1]
 800323c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2220      	movs	r2, #32
 8003244:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003246:	183b      	adds	r3, r7, r0
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b21      	cmp	r3, #33	; 0x21
 800324c:	d003      	beq.n	8003256 <I2C_ITSlaveCplt+0x3a>
 800324e:	183b      	adds	r3, r7, r0
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b29      	cmp	r3, #41	; 0x29
 8003254:	d109      	bne.n	800326a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003256:	4a7d      	ldr	r2, [pc, #500]	; (800344c <I2C_ITSlaveCplt+0x230>)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	0011      	movs	r1, r2
 800325c:	0018      	movs	r0, r3
 800325e:	f000 fb49 	bl	80038f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2221      	movs	r2, #33	; 0x21
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
 8003268:	e011      	b.n	800328e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800326a:	220f      	movs	r2, #15
 800326c:	18bb      	adds	r3, r7, r2
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b22      	cmp	r3, #34	; 0x22
 8003272:	d003      	beq.n	800327c <I2C_ITSlaveCplt+0x60>
 8003274:	18bb      	adds	r3, r7, r2
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b2a      	cmp	r3, #42	; 0x2a
 800327a:	d108      	bne.n	800328e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800327c:	4a74      	ldr	r2, [pc, #464]	; (8003450 <I2C_ITSlaveCplt+0x234>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	0011      	movs	r1, r2
 8003282:	0018      	movs	r0, r3
 8003284:	f000 fb36 	bl	80038f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2222      	movs	r2, #34	; 0x22
 800328c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	0209      	lsls	r1, r1, #8
 800329c:	430a      	orrs	r2, r1
 800329e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	496a      	ldr	r1, [pc, #424]	; (8003454 <I2C_ITSlaveCplt+0x238>)
 80032ac:	400a      	ands	r2, r1
 80032ae:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 fa3b 	bl	800372e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	0b9b      	lsrs	r3, r3, #14
 80032bc:	001a      	movs	r2, r3
 80032be:	2301      	movs	r3, #1
 80032c0:	4013      	ands	r3, r2
 80032c2:	d013      	beq.n	80032ec <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4962      	ldr	r1, [pc, #392]	; (8003458 <I2C_ITSlaveCplt+0x23c>)
 80032d0:	400a      	ands	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d020      	beq.n	800331e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032ea:	e018      	b.n	800331e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	0bdb      	lsrs	r3, r3, #15
 80032f0:	001a      	movs	r2, r3
 80032f2:	2301      	movs	r3, #1
 80032f4:	4013      	ands	r3, r2
 80032f6:	d012      	beq.n	800331e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4956      	ldr	r1, [pc, #344]	; (800345c <I2C_ITSlaveCplt+0x240>)
 8003304:	400a      	ands	r2, r1
 8003306:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	b29a      	uxth	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	001a      	movs	r2, r3
 8003324:	2301      	movs	r3, #1
 8003326:	4013      	ands	r3, r2
 8003328:	d020      	beq.n	800336c <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2204      	movs	r2, #4
 800332e:	4393      	bics	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00c      	beq.n	800336c <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	2204      	movs	r2, #4
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2242      	movs	r2, #66	; 0x42
 8003386:	2100      	movs	r1, #0
 8003388:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	2b00      	cmp	r3, #0
 8003396:	d013      	beq.n	80033c0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	0011      	movs	r1, r2
 80033a0:	0018      	movs	r0, r3
 80033a2:	f000 f8b9 	bl	8003518 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2241      	movs	r2, #65	; 0x41
 80033aa:	5c9b      	ldrb	r3, [r3, r2]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b28      	cmp	r3, #40	; 0x28
 80033b0:	d147      	bne.n	8003442 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	0011      	movs	r1, r2
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 f853 	bl	8003464 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033be:	e040      	b.n	8003442 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	4a26      	ldr	r2, [pc, #152]	; (8003460 <I2C_ITSlaveCplt+0x244>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d016      	beq.n	80033f8 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7ff fded 	bl	8002fac <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a22      	ldr	r2, [pc, #136]	; (8003460 <I2C_ITSlaveCplt+0x244>)
 80033d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2241      	movs	r2, #65	; 0x41
 80033dc:	2120      	movs	r1, #32
 80033de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2240      	movs	r2, #64	; 0x40
 80033ea:	2100      	movs	r1, #0
 80033ec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7fd fa39 	bl	8000868 <HAL_I2C_ListenCpltCallback>
}
 80033f6:	e024      	b.n	8003442 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2241      	movs	r2, #65	; 0x41
 80033fc:	5c9b      	ldrb	r3, [r3, r2]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b22      	cmp	r3, #34	; 0x22
 8003402:	d10f      	bne.n	8003424 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2241      	movs	r2, #65	; 0x41
 8003408:	2120      	movs	r1, #32
 800340a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2240      	movs	r2, #64	; 0x40
 8003416:	2100      	movs	r1, #0
 8003418:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	0018      	movs	r0, r3
 800341e:	f7fd f9bd 	bl	800079c <HAL_I2C_SlaveRxCpltCallback>
}
 8003422:	e00e      	b.n	8003442 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2241      	movs	r2, #65	; 0x41
 8003428:	2120      	movs	r1, #32
 800342a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2240      	movs	r2, #64	; 0x40
 8003436:	2100      	movs	r1, #0
 8003438:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	0018      	movs	r0, r3
 800343e:	f7fd f997 	bl	8000770 <HAL_I2C_SlaveTxCpltCallback>
}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b006      	add	sp, #24
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	00008001 	.word	0x00008001
 8003450:	00008002 	.word	0x00008002
 8003454:	fe00e800 	.word	0xfe00e800
 8003458:	ffffbfff 	.word	0xffffbfff
 800345c:	ffff7fff 	.word	0xffff7fff
 8003460:	ffff0000 	.word	0xffff0000

08003464 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a27      	ldr	r2, [pc, #156]	; (8003510 <I2C_ITListenCplt+0xac>)
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2241      	movs	r2, #65	; 0x41
 800347e:	2120      	movs	r1, #32
 8003480:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2242      	movs	r2, #66	; 0x42
 8003486:	2100      	movs	r1, #0
 8003488:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	001a      	movs	r2, r3
 8003496:	2301      	movs	r3, #1
 8003498:	4013      	ands	r3, r2
 800349a:	d022      	beq.n	80034e2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d012      	beq.n	80034e2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	2204      	movs	r2, #4
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80034e2:	4a0c      	ldr	r2, [pc, #48]	; (8003514 <I2C_ITListenCplt+0xb0>)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	0011      	movs	r1, r2
 80034e8:	0018      	movs	r0, r3
 80034ea:	f000 fa03 	bl	80038f4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2210      	movs	r2, #16
 80034f4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2240      	movs	r2, #64	; 0x40
 80034fa:	2100      	movs	r1, #0
 80034fc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	0018      	movs	r0, r3
 8003502:	f7fd f9b1 	bl	8000868 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b002      	add	sp, #8
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	ffff0000 	.word	0xffff0000
 8003514:	00008003 	.word	0x00008003

08003518 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003522:	200f      	movs	r0, #15
 8003524:	183b      	adds	r3, r7, r0
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	2141      	movs	r1, #65	; 0x41
 800352a:	5c52      	ldrb	r2, [r2, r1]
 800352c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2242      	movs	r2, #66	; 0x42
 8003532:	2100      	movs	r1, #0
 8003534:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a62      	ldr	r2, [pc, #392]	; (80036c4 <I2C_ITError+0x1ac>)
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800354e:	183b      	adds	r3, r7, r0
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b28      	cmp	r3, #40	; 0x28
 8003554:	d007      	beq.n	8003566 <I2C_ITError+0x4e>
 8003556:	183b      	adds	r3, r7, r0
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b29      	cmp	r3, #41	; 0x29
 800355c:	d003      	beq.n	8003566 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800355e:	183b      	adds	r3, r7, r0
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b2a      	cmp	r3, #42	; 0x2a
 8003564:	d10c      	bne.n	8003580 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2103      	movs	r1, #3
 800356a:	0018      	movs	r0, r3
 800356c:	f000 f9c2 	bl	80038f4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2241      	movs	r2, #65	; 0x41
 8003574:	2128      	movs	r1, #40	; 0x28
 8003576:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a53      	ldr	r2, [pc, #332]	; (80036c8 <I2C_ITError+0x1b0>)
 800357c:	635a      	str	r2, [r3, #52]	; 0x34
 800357e:	e012      	b.n	80035a6 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003580:	4a52      	ldr	r2, [pc, #328]	; (80036cc <I2C_ITError+0x1b4>)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	0011      	movs	r1, r2
 8003586:	0018      	movs	r0, r3
 8003588:	f000 f9b4 	bl	80038f4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2241      	movs	r2, #65	; 0x41
 8003590:	5c9b      	ldrb	r3, [r3, r2]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b60      	cmp	r3, #96	; 0x60
 8003596:	d003      	beq.n	80035a0 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2241      	movs	r2, #65	; 0x41
 800359c:	2120      	movs	r1, #32
 800359e:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d03b      	beq.n	800362c <I2C_ITError+0x114>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b11      	cmp	r3, #17
 80035b8:	d002      	beq.n	80035c0 <I2C_ITError+0xa8>
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b21      	cmp	r3, #33	; 0x21
 80035be:	d135      	bne.n	800362c <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	01db      	lsls	r3, r3, #7
 80035ca:	401a      	ands	r2, r3
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	01db      	lsls	r3, r3, #7
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d107      	bne.n	80035e4 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	493c      	ldr	r1, [pc, #240]	; (80036d0 <I2C_ITError+0x1b8>)
 80035e0:	400a      	ands	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7fe fc23 	bl	8001e34 <HAL_DMA_GetState>
 80035ee:	0003      	movs	r3, r0
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d016      	beq.n	8003622 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	4a36      	ldr	r2, [pc, #216]	; (80036d4 <I2C_ITError+0x1bc>)
 80035fa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2240      	movs	r2, #64	; 0x40
 8003600:	2100      	movs	r1, #0
 8003602:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	0018      	movs	r0, r3
 800360a:	f7fe faf7 	bl	8001bfc <HAL_DMA_Abort_IT>
 800360e:	1e03      	subs	r3, r0, #0
 8003610:	d051      	beq.n	80036b6 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	0018      	movs	r0, r3
 800361e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003620:	e049      	b.n	80036b6 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	0018      	movs	r0, r3
 8003626:	f000 f859 	bl	80036dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800362a:	e044      	b.n	80036b6 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d03b      	beq.n	80036ac <I2C_ITError+0x194>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b12      	cmp	r3, #18
 8003638:	d002      	beq.n	8003640 <I2C_ITError+0x128>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b22      	cmp	r3, #34	; 0x22
 800363e:	d135      	bne.n	80036ac <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	401a      	ands	r2, r3
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	429a      	cmp	r2, r3
 8003652:	d107      	bne.n	8003664 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	491e      	ldr	r1, [pc, #120]	; (80036d8 <I2C_ITError+0x1c0>)
 8003660:	400a      	ands	r2, r1
 8003662:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003668:	0018      	movs	r0, r3
 800366a:	f7fe fbe3 	bl	8001e34 <HAL_DMA_GetState>
 800366e:	0003      	movs	r3, r0
 8003670:	2b01      	cmp	r3, #1
 8003672:	d016      	beq.n	80036a2 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	4a16      	ldr	r2, [pc, #88]	; (80036d4 <I2C_ITError+0x1bc>)
 800367a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2240      	movs	r2, #64	; 0x40
 8003680:	2100      	movs	r1, #0
 8003682:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003688:	0018      	movs	r0, r3
 800368a:	f7fe fab7 	bl	8001bfc <HAL_DMA_Abort_IT>
 800368e:	1e03      	subs	r3, r0, #0
 8003690:	d013      	beq.n	80036ba <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369c:	0018      	movs	r0, r3
 800369e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036a0:	e00b      	b.n	80036ba <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f000 f819 	bl	80036dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036aa:	e006      	b.n	80036ba <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	0018      	movs	r0, r3
 80036b0:	f000 f814 	bl	80036dc <I2C_TreatErrorCallback>
  }
}
 80036b4:	e002      	b.n	80036bc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	e000      	b.n	80036bc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036ba:	46c0      	nop			; (mov r8, r8)
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b004      	add	sp, #16
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	ffff0000 	.word	0xffff0000
 80036c8:	080027b5 	.word	0x080027b5
 80036cc:	00008003 	.word	0x00008003
 80036d0:	ffffbfff 	.word	0xffffbfff
 80036d4:	08003773 	.word	0x08003773
 80036d8:	ffff7fff 	.word	0xffff7fff

080036dc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2241      	movs	r2, #65	; 0x41
 80036e8:	5c9b      	ldrb	r3, [r3, r2]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b60      	cmp	r3, #96	; 0x60
 80036ee:	d10f      	bne.n	8003710 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2241      	movs	r2, #65	; 0x41
 80036f4:	2120      	movs	r1, #32
 80036f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2240      	movs	r2, #64	; 0x40
 8003702:	2100      	movs	r1, #0
 8003704:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	0018      	movs	r0, r3
 800370a:	f7ff f841 	bl	8002790 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800370e:	e00a      	b.n	8003726 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2240      	movs	r2, #64	; 0x40
 800371a:	2100      	movs	r1, #0
 800371c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	0018      	movs	r0, r3
 8003722:	f7fd f8a9 	bl	8000878 <HAL_I2C_ErrorCallback>
}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	46bd      	mov	sp, r7
 800372a:	b002      	add	sp, #8
 800372c:	bd80      	pop	{r7, pc}

0800372e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	2202      	movs	r2, #2
 800373e:	4013      	ands	r3, r2
 8003740:	2b02      	cmp	r3, #2
 8003742:	d103      	bne.n	800374c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2200      	movs	r2, #0
 800374a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2201      	movs	r2, #1
 8003754:	4013      	ands	r3, r2
 8003756:	2b01      	cmp	r3, #1
 8003758:	d007      	beq.n	800376a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699a      	ldr	r2, [r3, #24]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2101      	movs	r1, #1
 8003766:	430a      	orrs	r2, r1
 8003768:	619a      	str	r2, [r3, #24]
  }
}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b002      	add	sp, #8
 8003770:	bd80      	pop	{r7, pc}

08003772 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	2200      	movs	r2, #0
 800378e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379c:	2200      	movs	r2, #0
 800379e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	0018      	movs	r0, r3
 80037a4:	f7ff ff9a 	bl	80036dc <I2C_TreatErrorCallback>
}
 80037a8:	46c0      	nop			; (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b004      	add	sp, #16
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	0008      	movs	r0, r1
 80037ba:	0011      	movs	r1, r2
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	240a      	movs	r4, #10
 80037c0:	193b      	adds	r3, r7, r4
 80037c2:	1c02      	adds	r2, r0, #0
 80037c4:	801a      	strh	r2, [r3, #0]
 80037c6:	2009      	movs	r0, #9
 80037c8:	183b      	adds	r3, r7, r0
 80037ca:	1c0a      	adds	r2, r1, #0
 80037cc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ce:	193b      	adds	r3, r7, r4
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	059b      	lsls	r3, r3, #22
 80037d4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037d6:	183b      	adds	r3, r7, r0
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	0419      	lsls	r1, r3, #16
 80037dc:	23ff      	movs	r3, #255	; 0xff
 80037de:	041b      	lsls	r3, r3, #16
 80037e0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037e2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	4313      	orrs	r3, r2
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037fa:	0d51      	lsrs	r1, r2, #21
 80037fc:	2280      	movs	r2, #128	; 0x80
 80037fe:	00d2      	lsls	r2, r2, #3
 8003800:	400a      	ands	r2, r1
 8003802:	4907      	ldr	r1, [pc, #28]	; (8003820 <I2C_TransferConfig+0x70>)
 8003804:	430a      	orrs	r2, r1
 8003806:	43d2      	mvns	r2, r2
 8003808:	401a      	ands	r2, r3
 800380a:	0011      	movs	r1, r2
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	b007      	add	sp, #28
 800381c:	bd90      	pop	{r4, r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	03ff63ff 	.word	0x03ff63ff

08003824 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	000a      	movs	r2, r1
 800382e:	1cbb      	adds	r3, r7, #2
 8003830:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800383a:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <I2C_Enable_IRQ+0xc8>)
 800383c:	429a      	cmp	r2, r3
 800383e:	d004      	beq.n	800384a <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003844:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <I2C_Enable_IRQ+0xcc>)
 8003846:	429a      	cmp	r2, r3
 8003848:	d121      	bne.n	800388e <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800384a:	1cbb      	adds	r3, r7, #2
 800384c:	2200      	movs	r2, #0
 800384e:	5e9b      	ldrsh	r3, [r3, r2]
 8003850:	2b00      	cmp	r3, #0
 8003852:	da03      	bge.n	800385c <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	22b8      	movs	r2, #184	; 0xb8
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800385c:	1cbb      	adds	r3, r7, #2
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	2b10      	cmp	r3, #16
 8003862:	d103      	bne.n	800386c <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2290      	movs	r2, #144	; 0x90
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800386c:	1cbb      	adds	r3, r7, #2
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	2b20      	cmp	r3, #32
 8003872:	d103      	bne.n	800387c <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2260      	movs	r2, #96	; 0x60
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800387c:	1cbb      	adds	r3, r7, #2
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	2b40      	cmp	r3, #64	; 0x40
 8003882:	d127      	bne.n	80038d4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2240      	movs	r2, #64	; 0x40
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800388c:	e022      	b.n	80038d4 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800388e:	1cbb      	adds	r3, r7, #2
 8003890:	2200      	movs	r2, #0
 8003892:	5e9b      	ldrsh	r3, [r3, r2]
 8003894:	2b00      	cmp	r3, #0
 8003896:	da03      	bge.n	80038a0 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	22b8      	movs	r2, #184	; 0xb8
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80038a0:	1cbb      	adds	r3, r7, #2
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	2201      	movs	r2, #1
 80038a6:	4013      	ands	r3, r2
 80038a8:	d003      	beq.n	80038b2 <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	22f2      	movs	r2, #242	; 0xf2
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80038b2:	1cbb      	adds	r3, r7, #2
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	2202      	movs	r2, #2
 80038b8:	4013      	ands	r3, r2
 80038ba:	d003      	beq.n	80038c4 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	22f4      	movs	r2, #244	; 0xf4
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80038c4:	1cbb      	adds	r3, r7, #2
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d103      	bne.n	80038d4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6819      	ldr	r1, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]
}
 80038e4:	46c0      	nop			; (mov r8, r8)
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b004      	add	sp, #16
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	080029dd 	.word	0x080029dd
 80038f0:	08002bf5 	.word	0x08002bf5

080038f4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	000a      	movs	r2, r1
 80038fe:	1cbb      	adds	r3, r7, #2
 8003900:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003906:	1cbb      	adds	r3, r7, #2
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	2201      	movs	r2, #1
 800390c:	4013      	ands	r3, r2
 800390e:	d010      	beq.n	8003932 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2242      	movs	r2, #66	; 0x42
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2241      	movs	r2, #65	; 0x41
 800391c:	5c9b      	ldrb	r3, [r3, r2]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	001a      	movs	r2, r3
 8003922:	2328      	movs	r3, #40	; 0x28
 8003924:	4013      	ands	r3, r2
 8003926:	2b28      	cmp	r3, #40	; 0x28
 8003928:	d003      	beq.n	8003932 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	22b0      	movs	r2, #176	; 0xb0
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003932:	1cbb      	adds	r3, r7, #2
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	2202      	movs	r2, #2
 8003938:	4013      	ands	r3, r2
 800393a:	d010      	beq.n	800395e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2244      	movs	r2, #68	; 0x44
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2241      	movs	r2, #65	; 0x41
 8003948:	5c9b      	ldrb	r3, [r3, r2]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	001a      	movs	r2, r3
 800394e:	2328      	movs	r3, #40	; 0x28
 8003950:	4013      	ands	r3, r2
 8003952:	2b28      	cmp	r3, #40	; 0x28
 8003954:	d003      	beq.n	800395e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	22b0      	movs	r2, #176	; 0xb0
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800395e:	1cbb      	adds	r3, r7, #2
 8003960:	2200      	movs	r2, #0
 8003962:	5e9b      	ldrsh	r3, [r3, r2]
 8003964:	2b00      	cmp	r3, #0
 8003966:	da03      	bge.n	8003970 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	22b8      	movs	r2, #184	; 0xb8
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003970:	1cbb      	adds	r3, r7, #2
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	2b10      	cmp	r3, #16
 8003976:	d103      	bne.n	8003980 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2290      	movs	r2, #144	; 0x90
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003980:	1cbb      	adds	r3, r7, #2
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	2b20      	cmp	r3, #32
 8003986:	d103      	bne.n	8003990 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003990:	1cbb      	adds	r3, r7, #2
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	d103      	bne.n	80039a0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2240      	movs	r2, #64	; 0x40
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	43d9      	mvns	r1, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	400a      	ands	r2, r1
 80039b0:	601a      	str	r2, [r3, #0]
}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b004      	add	sp, #16
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2241      	movs	r2, #65	; 0x41
 80039ca:	5c9b      	ldrb	r3, [r3, r2]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d138      	bne.n	8003a44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2240      	movs	r2, #64	; 0x40
 80039d6:	5c9b      	ldrb	r3, [r3, r2]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039dc:	2302      	movs	r3, #2
 80039de:	e032      	b.n	8003a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2240      	movs	r2, #64	; 0x40
 80039e4:	2101      	movs	r1, #1
 80039e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2241      	movs	r2, #65	; 0x41
 80039ec:	2124      	movs	r1, #36	; 0x24
 80039ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2101      	movs	r1, #1
 80039fc:	438a      	bics	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4911      	ldr	r1, [pc, #68]	; (8003a50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6819      	ldr	r1, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2241      	movs	r2, #65	; 0x41
 8003a34:	2120      	movs	r1, #32
 8003a36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2240      	movs	r2, #64	; 0x40
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e000      	b.n	8003a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a44:	2302      	movs	r3, #2
  }
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b002      	add	sp, #8
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	ffffefff 	.word	0xffffefff

08003a54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2241      	movs	r2, #65	; 0x41
 8003a62:	5c9b      	ldrb	r3, [r3, r2]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d139      	bne.n	8003ade <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2240      	movs	r2, #64	; 0x40
 8003a6e:	5c9b      	ldrb	r3, [r3, r2]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e033      	b.n	8003ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2240      	movs	r2, #64	; 0x40
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2241      	movs	r2, #65	; 0x41
 8003a84:	2124      	movs	r1, #36	; 0x24
 8003a86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2101      	movs	r1, #1
 8003a94:	438a      	bics	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a11      	ldr	r2, [pc, #68]	; (8003ae8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2241      	movs	r2, #65	; 0x41
 8003ace:	2120      	movs	r1, #32
 8003ad0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2240      	movs	r2, #64	; 0x40
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e000      	b.n	8003ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
  }
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b004      	add	sp, #16
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	fffff0ff 	.word	0xfffff0ff

08003aec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a19      	ldr	r2, [pc, #100]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	0019      	movs	r1, r3
 8003afe:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	2380      	movs	r3, #128	; 0x80
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d11f      	bne.n	8003b50 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003b10:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	0013      	movs	r3, r2
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	189b      	adds	r3, r3, r2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	4912      	ldr	r1, [pc, #72]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f7fc faf0 	bl	8000104 <__udivsi3>
 8003b24:	0003      	movs	r3, r0
 8003b26:	3301      	adds	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b2a:	e008      	b.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e001      	b.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e009      	b.n	8003b52 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b3e:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	401a      	ands	r2, r3
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d0ed      	beq.n	8003b2c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	0018      	movs	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b004      	add	sp, #16
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	fffff9ff 	.word	0xfffff9ff
 8003b64:	20000000 	.word	0x20000000
 8003b68:	000f4240 	.word	0x000f4240

08003b6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e2fe      	b.n	800417c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2201      	movs	r2, #1
 8003b84:	4013      	ands	r3, r2
 8003b86:	d100      	bne.n	8003b8a <HAL_RCC_OscConfig+0x1e>
 8003b88:	e07c      	b.n	8003c84 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b8a:	4bc3      	ldr	r3, [pc, #780]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2238      	movs	r2, #56	; 0x38
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b94:	4bc0      	ldr	r3, [pc, #768]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2203      	movs	r2, #3
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	2b10      	cmp	r3, #16
 8003ba2:	d102      	bne.n	8003baa <HAL_RCC_OscConfig+0x3e>
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d002      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d10b      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb0:	4bb9      	ldr	r3, [pc, #740]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	029b      	lsls	r3, r3, #10
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d062      	beq.n	8003c82 <HAL_RCC_OscConfig+0x116>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d15e      	bne.n	8003c82 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e2d9      	b.n	800417c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	025b      	lsls	r3, r3, #9
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d107      	bne.n	8003be4 <HAL_RCC_OscConfig+0x78>
 8003bd4:	4bb0      	ldr	r3, [pc, #704]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4baf      	ldr	r3, [pc, #700]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003bda:	2180      	movs	r1, #128	; 0x80
 8003bdc:	0249      	lsls	r1, r1, #9
 8003bde:	430a      	orrs	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	e020      	b.n	8003c26 <HAL_RCC_OscConfig+0xba>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	23a0      	movs	r3, #160	; 0xa0
 8003bea:	02db      	lsls	r3, r3, #11
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d10e      	bne.n	8003c0e <HAL_RCC_OscConfig+0xa2>
 8003bf0:	4ba9      	ldr	r3, [pc, #676]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4ba8      	ldr	r3, [pc, #672]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003bf6:	2180      	movs	r1, #128	; 0x80
 8003bf8:	02c9      	lsls	r1, r1, #11
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	4ba6      	ldr	r3, [pc, #664]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4ba5      	ldr	r3, [pc, #660]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	0249      	lsls	r1, r1, #9
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e00b      	b.n	8003c26 <HAL_RCC_OscConfig+0xba>
 8003c0e:	4ba2      	ldr	r3, [pc, #648]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	4ba1      	ldr	r3, [pc, #644]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003c14:	49a1      	ldr	r1, [pc, #644]	; (8003e9c <HAL_RCC_OscConfig+0x330>)
 8003c16:	400a      	ands	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	4b9f      	ldr	r3, [pc, #636]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b9e      	ldr	r3, [pc, #632]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003c20:	499f      	ldr	r1, [pc, #636]	; (8003ea0 <HAL_RCC_OscConfig+0x334>)
 8003c22:	400a      	ands	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d014      	beq.n	8003c58 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2e:	f7fd f8ed 	bl	8000e0c <HAL_GetTick>
 8003c32:	0003      	movs	r3, r0
 8003c34:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c38:	f7fd f8e8 	bl	8000e0c <HAL_GetTick>
 8003c3c:	0002      	movs	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	; 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e298      	b.n	800417c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4a:	4b93      	ldr	r3, [pc, #588]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	2380      	movs	r3, #128	; 0x80
 8003c50:	029b      	lsls	r3, r3, #10
 8003c52:	4013      	ands	r3, r2
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0xcc>
 8003c56:	e015      	b.n	8003c84 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fd f8d8 	bl	8000e0c <HAL_GetTick>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c62:	f7fd f8d3 	bl	8000e0c <HAL_GetTick>
 8003c66:	0002      	movs	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b64      	cmp	r3, #100	; 0x64
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e283      	b.n	800417c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c74:	4b88      	ldr	r3, [pc, #544]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	029b      	lsls	r3, r3, #10
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d1f0      	bne.n	8003c62 <HAL_RCC_OscConfig+0xf6>
 8003c80:	e000      	b.n	8003c84 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c82:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d100      	bne.n	8003c90 <HAL_RCC_OscConfig+0x124>
 8003c8e:	e099      	b.n	8003dc4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c90:	4b81      	ldr	r3, [pc, #516]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2238      	movs	r2, #56	; 0x38
 8003c96:	4013      	ands	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c9a:	4b7f      	ldr	r3, [pc, #508]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b10      	cmp	r3, #16
 8003ca8:	d102      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x144>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d002      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d135      	bne.n	8003d22 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb6:	4b78      	ldr	r3, [pc, #480]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d005      	beq.n	8003cce <HAL_RCC_OscConfig+0x162>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e256      	b.n	800417c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cce:	4b72      	ldr	r3, [pc, #456]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	4a74      	ldr	r2, [pc, #464]	; (8003ea4 <HAL_RCC_OscConfig+0x338>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	0019      	movs	r1, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	021a      	lsls	r2, r3, #8
 8003cde:	4b6e      	ldr	r3, [pc, #440]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d112      	bne.n	8003d10 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003cea:	4b6b      	ldr	r3, [pc, #428]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a6e      	ldr	r2, [pc, #440]	; (8003ea8 <HAL_RCC_OscConfig+0x33c>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	0019      	movs	r1, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	4b67      	ldr	r3, [pc, #412]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003cfe:	4b66      	ldr	r3, [pc, #408]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	0adb      	lsrs	r3, r3, #11
 8003d04:	2207      	movs	r2, #7
 8003d06:	4013      	ands	r3, r2
 8003d08:	4a68      	ldr	r2, [pc, #416]	; (8003eac <HAL_RCC_OscConfig+0x340>)
 8003d0a:	40da      	lsrs	r2, r3
 8003d0c:	4b68      	ldr	r3, [pc, #416]	; (8003eb0 <HAL_RCC_OscConfig+0x344>)
 8003d0e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d10:	4b68      	ldr	r3, [pc, #416]	; (8003eb4 <HAL_RCC_OscConfig+0x348>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7fd f81d 	bl	8000d54 <HAL_InitTick>
 8003d1a:	1e03      	subs	r3, r0, #0
 8003d1c:	d051      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e22c      	b.n	800417c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d030      	beq.n	8003d8c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d2a:	4b5b      	ldr	r3, [pc, #364]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a5e      	ldr	r2, [pc, #376]	; (8003ea8 <HAL_RCC_OscConfig+0x33c>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	0019      	movs	r1, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	4b57      	ldr	r3, [pc, #348]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003d3e:	4b56      	ldr	r3, [pc, #344]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b55      	ldr	r3, [pc, #340]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003d44:	2180      	movs	r1, #128	; 0x80
 8003d46:	0049      	lsls	r1, r1, #1
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd f85e 	bl	8000e0c <HAL_GetTick>
 8003d50:	0003      	movs	r3, r0
 8003d52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d56:	f7fd f859 	bl	8000e0c <HAL_GetTick>
 8003d5a:	0002      	movs	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e209      	b.n	800417c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d68:	4b4b      	ldr	r3, [pc, #300]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4013      	ands	r3, r2
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d74:	4b48      	ldr	r3, [pc, #288]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4a4a      	ldr	r2, [pc, #296]	; (8003ea4 <HAL_RCC_OscConfig+0x338>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	021a      	lsls	r2, r3, #8
 8003d84:	4b44      	ldr	r3, [pc, #272]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	e01b      	b.n	8003dc4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003d8c:	4b42      	ldr	r3, [pc, #264]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4b41      	ldr	r3, [pc, #260]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003d92:	4949      	ldr	r1, [pc, #292]	; (8003eb8 <HAL_RCC_OscConfig+0x34c>)
 8003d94:	400a      	ands	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d98:	f7fd f838 	bl	8000e0c <HAL_GetTick>
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da2:	f7fd f833 	bl	8000e0c <HAL_GetTick>
 8003da6:	0002      	movs	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e1e3      	b.n	800417c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003db4:	4b38      	ldr	r3, [pc, #224]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d1f0      	bne.n	8003da2 <HAL_RCC_OscConfig+0x236>
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2208      	movs	r2, #8
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d047      	beq.n	8003e5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003dce:	4b32      	ldr	r3, [pc, #200]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2238      	movs	r2, #56	; 0x38
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b18      	cmp	r3, #24
 8003dd8:	d10a      	bne.n	8003df0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003dda:	4b2f      	ldr	r3, [pc, #188]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dde:	2202      	movs	r2, #2
 8003de0:	4013      	ands	r3, r2
 8003de2:	d03c      	beq.n	8003e5e <HAL_RCC_OscConfig+0x2f2>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d138      	bne.n	8003e5e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e1c5      	b.n	800417c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d019      	beq.n	8003e2c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003df8:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003dfa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dfc:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003dfe:	2101      	movs	r1, #1
 8003e00:	430a      	orrs	r2, r1
 8003e02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd f802 	bl	8000e0c <HAL_GetTick>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e0e:	f7fc fffd 	bl	8000e0c <HAL_GetTick>
 8003e12:	0002      	movs	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e1ad      	b.n	800417c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e20:	4b1d      	ldr	r3, [pc, #116]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e24:	2202      	movs	r2, #2
 8003e26:	4013      	ands	r3, r2
 8003e28:	d0f1      	beq.n	8003e0e <HAL_RCC_OscConfig+0x2a2>
 8003e2a:	e018      	b.n	8003e5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003e2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e30:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003e32:	2101      	movs	r1, #1
 8003e34:	438a      	bics	r2, r1
 8003e36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fc ffe8 	bl	8000e0c <HAL_GetTick>
 8003e3c:	0003      	movs	r3, r0
 8003e3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e42:	f7fc ffe3 	bl	8000e0c <HAL_GetTick>
 8003e46:	0002      	movs	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e193      	b.n	800417c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e54:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e58:	2202      	movs	r2, #2
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d1f1      	bne.n	8003e42 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2204      	movs	r2, #4
 8003e64:	4013      	ands	r3, r2
 8003e66:	d100      	bne.n	8003e6a <HAL_RCC_OscConfig+0x2fe>
 8003e68:	e0c6      	b.n	8003ff8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6a:	231f      	movs	r3, #31
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	2200      	movs	r2, #0
 8003e70:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2238      	movs	r2, #56	; 0x38
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b20      	cmp	r3, #32
 8003e7c:	d11e      	bne.n	8003ebc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCC_OscConfig+0x32c>)
 8003e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e82:	2202      	movs	r2, #2
 8003e84:	4013      	ands	r3, r2
 8003e86:	d100      	bne.n	8003e8a <HAL_RCC_OscConfig+0x31e>
 8003e88:	e0b6      	b.n	8003ff8 <HAL_RCC_OscConfig+0x48c>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d000      	beq.n	8003e94 <HAL_RCC_OscConfig+0x328>
 8003e92:	e0b1      	b.n	8003ff8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e171      	b.n	800417c <HAL_RCC_OscConfig+0x610>
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	fffeffff 	.word	0xfffeffff
 8003ea0:	fffbffff 	.word	0xfffbffff
 8003ea4:	ffff80ff 	.word	0xffff80ff
 8003ea8:	ffffc7ff 	.word	0xffffc7ff
 8003eac:	00f42400 	.word	0x00f42400
 8003eb0:	20000000 	.word	0x20000000
 8003eb4:	20000004 	.word	0x20000004
 8003eb8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ebc:	4bb1      	ldr	r3, [pc, #708]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	055b      	lsls	r3, r3, #21
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d101      	bne.n	8003ecc <HAL_RCC_OscConfig+0x360>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x362>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d011      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003ed2:	4bac      	ldr	r3, [pc, #688]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ed6:	4bab      	ldr	r3, [pc, #684]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003ed8:	2180      	movs	r1, #128	; 0x80
 8003eda:	0549      	lsls	r1, r1, #21
 8003edc:	430a      	orrs	r2, r1
 8003ede:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ee0:	4ba8      	ldr	r3, [pc, #672]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	055b      	lsls	r3, r3, #21
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003eee:	231f      	movs	r3, #31
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ef6:	4ba4      	ldr	r3, [pc, #656]	; (8004188 <HAL_RCC_OscConfig+0x61c>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	4013      	ands	r3, r2
 8003f00:	d11a      	bne.n	8003f38 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f02:	4ba1      	ldr	r3, [pc, #644]	; (8004188 <HAL_RCC_OscConfig+0x61c>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4ba0      	ldr	r3, [pc, #640]	; (8004188 <HAL_RCC_OscConfig+0x61c>)
 8003f08:	2180      	movs	r1, #128	; 0x80
 8003f0a:	0049      	lsls	r1, r1, #1
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003f10:	f7fc ff7c 	bl	8000e0c <HAL_GetTick>
 8003f14:	0003      	movs	r3, r0
 8003f16:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1a:	f7fc ff77 	bl	8000e0c <HAL_GetTick>
 8003f1e:	0002      	movs	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e127      	b.n	800417c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f2c:	4b96      	ldr	r3, [pc, #600]	; (8004188 <HAL_RCC_OscConfig+0x61c>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	4013      	ands	r3, r2
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d106      	bne.n	8003f4e <HAL_RCC_OscConfig+0x3e2>
 8003f40:	4b90      	ldr	r3, [pc, #576]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003f42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f44:	4b8f      	ldr	r3, [pc, #572]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003f46:	2101      	movs	r1, #1
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f4c:	e01c      	b.n	8003f88 <HAL_RCC_OscConfig+0x41c>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b05      	cmp	r3, #5
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x404>
 8003f56:	4b8b      	ldr	r3, [pc, #556]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003f58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f5a:	4b8a      	ldr	r3, [pc, #552]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003f5c:	2104      	movs	r1, #4
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f62:	4b88      	ldr	r3, [pc, #544]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003f64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f66:	4b87      	ldr	r3, [pc, #540]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003f68:	2101      	movs	r1, #1
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f6e:	e00b      	b.n	8003f88 <HAL_RCC_OscConfig+0x41c>
 8003f70:	4b84      	ldr	r3, [pc, #528]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003f72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f74:	4b83      	ldr	r3, [pc, #524]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003f76:	2101      	movs	r1, #1
 8003f78:	438a      	bics	r2, r1
 8003f7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f7c:	4b81      	ldr	r3, [pc, #516]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003f7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f80:	4b80      	ldr	r3, [pc, #512]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003f82:	2104      	movs	r1, #4
 8003f84:	438a      	bics	r2, r1
 8003f86:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d014      	beq.n	8003fba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fc ff3c 	bl	8000e0c <HAL_GetTick>
 8003f94:	0003      	movs	r3, r0
 8003f96:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f98:	e009      	b.n	8003fae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9a:	f7fc ff37 	bl	8000e0c <HAL_GetTick>
 8003f9e:	0002      	movs	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	4a79      	ldr	r2, [pc, #484]	; (800418c <HAL_RCC_OscConfig+0x620>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e0e6      	b.n	800417c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fae:	4b75      	ldr	r3, [pc, #468]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d0f0      	beq.n	8003f9a <HAL_RCC_OscConfig+0x42e>
 8003fb8:	e013      	b.n	8003fe2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fba:	f7fc ff27 	bl	8000e0c <HAL_GetTick>
 8003fbe:	0003      	movs	r3, r0
 8003fc0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fc2:	e009      	b.n	8003fd8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc4:	f7fc ff22 	bl	8000e0c <HAL_GetTick>
 8003fc8:	0002      	movs	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	4a6f      	ldr	r2, [pc, #444]	; (800418c <HAL_RCC_OscConfig+0x620>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e0d1      	b.n	800417c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fd8:	4b6a      	ldr	r3, [pc, #424]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fdc:	2202      	movs	r2, #2
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003fe2:	231f      	movs	r3, #31
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d105      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003fec:	4b65      	ldr	r3, [pc, #404]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ff0:	4b64      	ldr	r3, [pc, #400]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8003ff2:	4967      	ldr	r1, [pc, #412]	; (8004190 <HAL_RCC_OscConfig+0x624>)
 8003ff4:	400a      	ands	r2, r1
 8003ff6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d100      	bne.n	8004002 <HAL_RCC_OscConfig+0x496>
 8004000:	e0bb      	b.n	800417a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004002:	4b60      	ldr	r3, [pc, #384]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2238      	movs	r2, #56	; 0x38
 8004008:	4013      	ands	r3, r2
 800400a:	2b10      	cmp	r3, #16
 800400c:	d100      	bne.n	8004010 <HAL_RCC_OscConfig+0x4a4>
 800400e:	e07b      	b.n	8004108 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d156      	bne.n	80040c6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004018:	4b5a      	ldr	r3, [pc, #360]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b59      	ldr	r3, [pc, #356]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 800401e:	495d      	ldr	r1, [pc, #372]	; (8004194 <HAL_RCC_OscConfig+0x628>)
 8004020:	400a      	ands	r2, r1
 8004022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fc fef2 	bl	8000e0c <HAL_GetTick>
 8004028:	0003      	movs	r3, r0
 800402a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402e:	f7fc feed 	bl	8000e0c <HAL_GetTick>
 8004032:	0002      	movs	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e09d      	b.n	800417c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004040:	4b50      	ldr	r3, [pc, #320]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	049b      	lsls	r3, r3, #18
 8004048:	4013      	ands	r3, r2
 800404a:	d1f0      	bne.n	800402e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800404c:	4b4d      	ldr	r3, [pc, #308]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4a51      	ldr	r2, [pc, #324]	; (8004198 <HAL_RCC_OscConfig+0x62c>)
 8004052:	4013      	ands	r3, r2
 8004054:	0019      	movs	r1, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1a      	ldr	r2, [r3, #32]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004078:	431a      	orrs	r2, r3
 800407a:	4b42      	ldr	r3, [pc, #264]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 800407c:	430a      	orrs	r2, r1
 800407e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004080:	4b40      	ldr	r3, [pc, #256]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b3f      	ldr	r3, [pc, #252]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8004086:	2180      	movs	r1, #128	; 0x80
 8004088:	0449      	lsls	r1, r1, #17
 800408a:	430a      	orrs	r2, r1
 800408c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800408e:	4b3d      	ldr	r3, [pc, #244]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	4b3c      	ldr	r3, [pc, #240]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8004094:	2180      	movs	r1, #128	; 0x80
 8004096:	0549      	lsls	r1, r1, #21
 8004098:	430a      	orrs	r2, r1
 800409a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fc feb6 	bl	8000e0c <HAL_GetTick>
 80040a0:	0003      	movs	r3, r0
 80040a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a6:	f7fc feb1 	bl	8000e0c <HAL_GetTick>
 80040aa:	0002      	movs	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e061      	b.n	800417c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b8:	4b32      	ldr	r3, [pc, #200]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	049b      	lsls	r3, r3, #18
 80040c0:	4013      	ands	r3, r2
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x53a>
 80040c4:	e059      	b.n	800417a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c6:	4b2f      	ldr	r3, [pc, #188]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 80040cc:	4931      	ldr	r1, [pc, #196]	; (8004194 <HAL_RCC_OscConfig+0x628>)
 80040ce:	400a      	ands	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d2:	f7fc fe9b 	bl	8000e0c <HAL_GetTick>
 80040d6:	0003      	movs	r3, r0
 80040d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fc fe96 	bl	8000e0c <HAL_GetTick>
 80040e0:	0002      	movs	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e046      	b.n	800417c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ee:	4b25      	ldr	r3, [pc, #148]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	049b      	lsls	r3, r3, #18
 80040f6:	4013      	ands	r3, r2
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80040fa:	4b22      	ldr	r3, [pc, #136]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	4b21      	ldr	r3, [pc, #132]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8004100:	4926      	ldr	r1, [pc, #152]	; (800419c <HAL_RCC_OscConfig+0x630>)
 8004102:	400a      	ands	r2, r1
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	e038      	b.n	800417a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e033      	b.n	800417c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004114:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <HAL_RCC_OscConfig+0x618>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2203      	movs	r2, #3
 800411e:	401a      	ands	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	429a      	cmp	r2, r3
 8004126:	d126      	bne.n	8004176 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2270      	movs	r2, #112	; 0x70
 800412c:	401a      	ands	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d11f      	bne.n	8004176 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	23fe      	movs	r3, #254	; 0xfe
 800413a:	01db      	lsls	r3, r3, #7
 800413c:	401a      	ands	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004144:	429a      	cmp	r2, r3
 8004146:	d116      	bne.n	8004176 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	23f8      	movs	r3, #248	; 0xf8
 800414c:	039b      	lsls	r3, r3, #14
 800414e:	401a      	ands	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004154:	429a      	cmp	r2, r3
 8004156:	d10e      	bne.n	8004176 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	23e0      	movs	r3, #224	; 0xe0
 800415c:	051b      	lsls	r3, r3, #20
 800415e:	401a      	ands	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004164:	429a      	cmp	r2, r3
 8004166:	d106      	bne.n	8004176 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	0f5b      	lsrs	r3, r3, #29
 800416c:	075a      	lsls	r2, r3, #29
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004172:	429a      	cmp	r2, r3
 8004174:	d001      	beq.n	800417a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	0018      	movs	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	b008      	add	sp, #32
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40021000 	.word	0x40021000
 8004188:	40007000 	.word	0x40007000
 800418c:	00001388 	.word	0x00001388
 8004190:	efffffff 	.word	0xefffffff
 8004194:	feffffff 	.word	0xfeffffff
 8004198:	11c1808c 	.word	0x11c1808c
 800419c:	eefefffc 	.word	0xeefefffc

080041a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0e9      	b.n	8004388 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041b4:	4b76      	ldr	r3, [pc, #472]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2207      	movs	r2, #7
 80041ba:	4013      	ands	r3, r2
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d91e      	bls.n	8004200 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	4b73      	ldr	r3, [pc, #460]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2207      	movs	r2, #7
 80041c8:	4393      	bics	r3, r2
 80041ca:	0019      	movs	r1, r3
 80041cc:	4b70      	ldr	r3, [pc, #448]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041d4:	f7fc fe1a 	bl	8000e0c <HAL_GetTick>
 80041d8:	0003      	movs	r3, r0
 80041da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041dc:	e009      	b.n	80041f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041de:	f7fc fe15 	bl	8000e0c <HAL_GetTick>
 80041e2:	0002      	movs	r2, r0
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	4a6a      	ldr	r2, [pc, #424]	; (8004394 <HAL_RCC_ClockConfig+0x1f4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e0ca      	b.n	8004388 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041f2:	4b67      	ldr	r3, [pc, #412]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2207      	movs	r2, #7
 80041f8:	4013      	ands	r3, r2
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d1ee      	bne.n	80041de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2202      	movs	r2, #2
 8004206:	4013      	ands	r3, r2
 8004208:	d015      	beq.n	8004236 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2204      	movs	r2, #4
 8004210:	4013      	ands	r3, r2
 8004212:	d006      	beq.n	8004222 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004214:	4b60      	ldr	r3, [pc, #384]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	4b5f      	ldr	r3, [pc, #380]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 800421a:	21e0      	movs	r1, #224	; 0xe0
 800421c:	01c9      	lsls	r1, r1, #7
 800421e:	430a      	orrs	r2, r1
 8004220:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004222:	4b5d      	ldr	r3, [pc, #372]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	4a5d      	ldr	r2, [pc, #372]	; (800439c <HAL_RCC_ClockConfig+0x1fc>)
 8004228:	4013      	ands	r3, r2
 800422a:	0019      	movs	r1, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	4b59      	ldr	r3, [pc, #356]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 8004232:	430a      	orrs	r2, r1
 8004234:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2201      	movs	r2, #1
 800423c:	4013      	ands	r3, r2
 800423e:	d057      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d107      	bne.n	8004258 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004248:	4b53      	ldr	r3, [pc, #332]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	029b      	lsls	r3, r3, #10
 8004250:	4013      	ands	r3, r2
 8004252:	d12b      	bne.n	80042ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e097      	b.n	8004388 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b02      	cmp	r3, #2
 800425e:	d107      	bne.n	8004270 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004260:	4b4d      	ldr	r3, [pc, #308]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	049b      	lsls	r3, r3, #18
 8004268:	4013      	ands	r3, r2
 800426a:	d11f      	bne.n	80042ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e08b      	b.n	8004388 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d107      	bne.n	8004288 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004278:	4b47      	ldr	r3, [pc, #284]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4013      	ands	r3, r2
 8004282:	d113      	bne.n	80042ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e07f      	b.n	8004388 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b03      	cmp	r3, #3
 800428e:	d106      	bne.n	800429e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004290:	4b41      	ldr	r3, [pc, #260]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 8004292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004294:	2202      	movs	r2, #2
 8004296:	4013      	ands	r3, r2
 8004298:	d108      	bne.n	80042ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e074      	b.n	8004388 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800429e:	4b3e      	ldr	r3, [pc, #248]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 80042a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a2:	2202      	movs	r2, #2
 80042a4:	4013      	ands	r3, r2
 80042a6:	d101      	bne.n	80042ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e06d      	b.n	8004388 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042ac:	4b3a      	ldr	r3, [pc, #232]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2207      	movs	r2, #7
 80042b2:	4393      	bics	r3, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	4b37      	ldr	r3, [pc, #220]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 80042bc:	430a      	orrs	r2, r1
 80042be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c0:	f7fc fda4 	bl	8000e0c <HAL_GetTick>
 80042c4:	0003      	movs	r3, r0
 80042c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c8:	e009      	b.n	80042de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ca:	f7fc fd9f 	bl	8000e0c <HAL_GetTick>
 80042ce:	0002      	movs	r2, r0
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	4a2f      	ldr	r2, [pc, #188]	; (8004394 <HAL_RCC_ClockConfig+0x1f4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e054      	b.n	8004388 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	4b2e      	ldr	r3, [pc, #184]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2238      	movs	r2, #56	; 0x38
 80042e4:	401a      	ands	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d1ec      	bne.n	80042ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f0:	4b27      	ldr	r3, [pc, #156]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2207      	movs	r2, #7
 80042f6:	4013      	ands	r3, r2
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d21e      	bcs.n	800433c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b24      	ldr	r3, [pc, #144]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2207      	movs	r2, #7
 8004304:	4393      	bics	r3, r2
 8004306:	0019      	movs	r1, r3
 8004308:	4b21      	ldr	r3, [pc, #132]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004310:	f7fc fd7c 	bl	8000e0c <HAL_GetTick>
 8004314:	0003      	movs	r3, r0
 8004316:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004318:	e009      	b.n	800432e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800431a:	f7fc fd77 	bl	8000e0c <HAL_GetTick>
 800431e:	0002      	movs	r2, r0
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <HAL_RCC_ClockConfig+0x1f4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d901      	bls.n	800432e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e02c      	b.n	8004388 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800432e:	4b18      	ldr	r3, [pc, #96]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2207      	movs	r2, #7
 8004334:	4013      	ands	r3, r2
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d1ee      	bne.n	800431a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2204      	movs	r2, #4
 8004342:	4013      	ands	r3, r2
 8004344:	d009      	beq.n	800435a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004346:	4b14      	ldr	r3, [pc, #80]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <HAL_RCC_ClockConfig+0x200>)
 800434c:	4013      	ands	r3, r2
 800434e:	0019      	movs	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 8004356:	430a      	orrs	r2, r1
 8004358:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800435a:	f000 f829 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 800435e:	0001      	movs	r1, r0
 8004360:	4b0d      	ldr	r3, [pc, #52]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	0a1b      	lsrs	r3, r3, #8
 8004366:	220f      	movs	r2, #15
 8004368:	401a      	ands	r2, r3
 800436a:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <HAL_RCC_ClockConfig+0x204>)
 800436c:	0092      	lsls	r2, r2, #2
 800436e:	58d3      	ldr	r3, [r2, r3]
 8004370:	221f      	movs	r2, #31
 8004372:	4013      	ands	r3, r2
 8004374:	000a      	movs	r2, r1
 8004376:	40da      	lsrs	r2, r3
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCC_ClockConfig+0x208>)
 800437a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCC_ClockConfig+0x20c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0018      	movs	r0, r3
 8004382:	f7fc fce7 	bl	8000d54 <HAL_InitTick>
 8004386:	0003      	movs	r3, r0
}
 8004388:	0018      	movs	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	b004      	add	sp, #16
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40022000 	.word	0x40022000
 8004394:	00001388 	.word	0x00001388
 8004398:	40021000 	.word	0x40021000
 800439c:	fffff0ff 	.word	0xfffff0ff
 80043a0:	ffff8fff 	.word	0xffff8fff
 80043a4:	08005884 	.word	0x08005884
 80043a8:	20000000 	.word	0x20000000
 80043ac:	20000004 	.word	0x20000004

080043b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043b6:	4b3c      	ldr	r3, [pc, #240]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2238      	movs	r2, #56	; 0x38
 80043bc:	4013      	ands	r3, r2
 80043be:	d10f      	bne.n	80043e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80043c0:	4b39      	ldr	r3, [pc, #228]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	0adb      	lsrs	r3, r3, #11
 80043c6:	2207      	movs	r2, #7
 80043c8:	4013      	ands	r3, r2
 80043ca:	2201      	movs	r2, #1
 80043cc:	409a      	lsls	r2, r3
 80043ce:	0013      	movs	r3, r2
 80043d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80043d2:	6839      	ldr	r1, [r7, #0]
 80043d4:	4835      	ldr	r0, [pc, #212]	; (80044ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80043d6:	f7fb fe95 	bl	8000104 <__udivsi3>
 80043da:	0003      	movs	r3, r0
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	e05d      	b.n	800449c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043e0:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2238      	movs	r2, #56	; 0x38
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d102      	bne.n	80043f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043ec:	4b30      	ldr	r3, [pc, #192]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	e054      	b.n	800449c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043f2:	4b2d      	ldr	r3, [pc, #180]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2238      	movs	r2, #56	; 0x38
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b10      	cmp	r3, #16
 80043fc:	d138      	bne.n	8004470 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80043fe:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	2203      	movs	r2, #3
 8004404:	4013      	ands	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004408:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	2207      	movs	r2, #7
 8004410:	4013      	ands	r3, r2
 8004412:	3301      	adds	r3, #1
 8004414:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b03      	cmp	r3, #3
 800441a:	d10d      	bne.n	8004438 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	4824      	ldr	r0, [pc, #144]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004420:	f7fb fe70 	bl	8000104 <__udivsi3>
 8004424:	0003      	movs	r3, r0
 8004426:	0019      	movs	r1, r3
 8004428:	4b1f      	ldr	r3, [pc, #124]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	0a1b      	lsrs	r3, r3, #8
 800442e:	227f      	movs	r2, #127	; 0x7f
 8004430:	4013      	ands	r3, r2
 8004432:	434b      	muls	r3, r1
 8004434:	617b      	str	r3, [r7, #20]
        break;
 8004436:	e00d      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004438:	68b9      	ldr	r1, [r7, #8]
 800443a:	481c      	ldr	r0, [pc, #112]	; (80044ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800443c:	f7fb fe62 	bl	8000104 <__udivsi3>
 8004440:	0003      	movs	r3, r0
 8004442:	0019      	movs	r1, r3
 8004444:	4b18      	ldr	r3, [pc, #96]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	0a1b      	lsrs	r3, r3, #8
 800444a:	227f      	movs	r2, #127	; 0x7f
 800444c:	4013      	ands	r3, r2
 800444e:	434b      	muls	r3, r1
 8004450:	617b      	str	r3, [r7, #20]
        break;
 8004452:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004454:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	0f5b      	lsrs	r3, r3, #29
 800445a:	2207      	movs	r2, #7
 800445c:	4013      	ands	r3, r2
 800445e:	3301      	adds	r3, #1
 8004460:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	6978      	ldr	r0, [r7, #20]
 8004466:	f7fb fe4d 	bl	8000104 <__udivsi3>
 800446a:	0003      	movs	r3, r0
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	e015      	b.n	800449c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004470:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2238      	movs	r2, #56	; 0x38
 8004476:	4013      	ands	r3, r2
 8004478:	2b20      	cmp	r3, #32
 800447a:	d103      	bne.n	8004484 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800447c:	2380      	movs	r3, #128	; 0x80
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	e00b      	b.n	800449c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004484:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2238      	movs	r2, #56	; 0x38
 800448a:	4013      	ands	r3, r2
 800448c:	2b18      	cmp	r3, #24
 800448e:	d103      	bne.n	8004498 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004490:	23fa      	movs	r3, #250	; 0xfa
 8004492:	01db      	lsls	r3, r3, #7
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	e001      	b.n	800449c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800449c:	693b      	ldr	r3, [r7, #16]
}
 800449e:	0018      	movs	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b006      	add	sp, #24
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	40021000 	.word	0x40021000
 80044ac:	00f42400 	.word	0x00f42400
 80044b0:	007a1200 	.word	0x007a1200

080044b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80044bc:	2313      	movs	r3, #19
 80044be:	18fb      	adds	r3, r7, r3
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044c4:	2312      	movs	r3, #18
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	029b      	lsls	r3, r3, #10
 80044d4:	4013      	ands	r3, r2
 80044d6:	d100      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x26>
 80044d8:	e0a3      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044da:	2011      	movs	r0, #17
 80044dc:	183b      	adds	r3, r7, r0
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e2:	4ba5      	ldr	r3, [pc, #660]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e6:	2380      	movs	r3, #128	; 0x80
 80044e8:	055b      	lsls	r3, r3, #21
 80044ea:	4013      	ands	r3, r2
 80044ec:	d110      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ee:	4ba2      	ldr	r3, [pc, #648]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f2:	4ba1      	ldr	r3, [pc, #644]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044f4:	2180      	movs	r1, #128	; 0x80
 80044f6:	0549      	lsls	r1, r1, #21
 80044f8:	430a      	orrs	r2, r1
 80044fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80044fc:	4b9e      	ldr	r3, [pc, #632]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	055b      	lsls	r3, r3, #21
 8004504:	4013      	ands	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450a:	183b      	adds	r3, r7, r0
 800450c:	2201      	movs	r2, #1
 800450e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004510:	4b9a      	ldr	r3, [pc, #616]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	4b99      	ldr	r3, [pc, #612]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004516:	2180      	movs	r1, #128	; 0x80
 8004518:	0049      	lsls	r1, r1, #1
 800451a:	430a      	orrs	r2, r1
 800451c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800451e:	f7fc fc75 	bl	8000e0c <HAL_GetTick>
 8004522:	0003      	movs	r3, r0
 8004524:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004526:	e00b      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004528:	f7fc fc70 	bl	8000e0c <HAL_GetTick>
 800452c:	0002      	movs	r2, r0
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d904      	bls.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004536:	2313      	movs	r3, #19
 8004538:	18fb      	adds	r3, r7, r3
 800453a:	2203      	movs	r2, #3
 800453c:	701a      	strb	r2, [r3, #0]
        break;
 800453e:	e005      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004540:	4b8e      	ldr	r3, [pc, #568]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	2380      	movs	r3, #128	; 0x80
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	4013      	ands	r3, r2
 800454a:	d0ed      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800454c:	2313      	movs	r3, #19
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d154      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004556:	4b88      	ldr	r3, [pc, #544]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004558:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800455a:	23c0      	movs	r3, #192	; 0xc0
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4013      	ands	r3, r2
 8004560:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d019      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	429a      	cmp	r2, r3
 8004570:	d014      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004572:	4b81      	ldr	r3, [pc, #516]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004576:	4a82      	ldr	r2, [pc, #520]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004578:	4013      	ands	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800457c:	4b7e      	ldr	r3, [pc, #504]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800457e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004580:	4b7d      	ldr	r3, [pc, #500]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004582:	2180      	movs	r1, #128	; 0x80
 8004584:	0249      	lsls	r1, r1, #9
 8004586:	430a      	orrs	r2, r1
 8004588:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800458a:	4b7b      	ldr	r3, [pc, #492]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800458c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800458e:	4b7a      	ldr	r3, [pc, #488]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004590:	497c      	ldr	r1, [pc, #496]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004592:	400a      	ands	r2, r1
 8004594:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004596:	4b78      	ldr	r3, [pc, #480]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2201      	movs	r2, #1
 80045a0:	4013      	ands	r3, r2
 80045a2:	d016      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fc fc32 	bl	8000e0c <HAL_GetTick>
 80045a8:	0003      	movs	r3, r0
 80045aa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ac:	e00c      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fc fc2d 	bl	8000e0c <HAL_GetTick>
 80045b2:	0002      	movs	r2, r0
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	4a73      	ldr	r2, [pc, #460]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d904      	bls.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80045be:	2313      	movs	r3, #19
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	2203      	movs	r2, #3
 80045c4:	701a      	strb	r2, [r3, #0]
            break;
 80045c6:	e004      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c8:	4b6b      	ldr	r3, [pc, #428]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045cc:	2202      	movs	r2, #2
 80045ce:	4013      	ands	r3, r2
 80045d0:	d0ed      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80045d2:	2313      	movs	r3, #19
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10a      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045dc:	4b66      	ldr	r3, [pc, #408]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e0:	4a67      	ldr	r2, [pc, #412]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	0019      	movs	r1, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ea:	4b63      	ldr	r3, [pc, #396]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045ec:	430a      	orrs	r2, r1
 80045ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80045f0:	e00c      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045f2:	2312      	movs	r3, #18
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	2213      	movs	r2, #19
 80045f8:	18ba      	adds	r2, r7, r2
 80045fa:	7812      	ldrb	r2, [r2, #0]
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	e005      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004600:	2312      	movs	r3, #18
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	2213      	movs	r2, #19
 8004606:	18ba      	adds	r2, r7, r2
 8004608:	7812      	ldrb	r2, [r2, #0]
 800460a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800460c:	2311      	movs	r3, #17
 800460e:	18fb      	adds	r3, r7, r3
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d105      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004616:	4b58      	ldr	r3, [pc, #352]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800461a:	4b57      	ldr	r3, [pc, #348]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800461c:	495b      	ldr	r1, [pc, #364]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800461e:	400a      	ands	r2, r1
 8004620:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2201      	movs	r2, #1
 8004628:	4013      	ands	r3, r2
 800462a:	d009      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800462c:	4b52      	ldr	r3, [pc, #328]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800462e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004630:	2203      	movs	r2, #3
 8004632:	4393      	bics	r3, r2
 8004634:	0019      	movs	r1, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	4b4f      	ldr	r3, [pc, #316]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800463c:	430a      	orrs	r2, r1
 800463e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2210      	movs	r2, #16
 8004646:	4013      	ands	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800464a:	4b4b      	ldr	r3, [pc, #300]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	4a50      	ldr	r2, [pc, #320]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004650:	4013      	ands	r3, r2
 8004652:	0019      	movs	r1, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	4b47      	ldr	r3, [pc, #284]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800465a:	430a      	orrs	r2, r1
 800465c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	2380      	movs	r3, #128	; 0x80
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4013      	ands	r3, r2
 8004668:	d009      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800466a:	4b43      	ldr	r3, [pc, #268]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	4a49      	ldr	r2, [pc, #292]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004670:	4013      	ands	r3, r2
 8004672:	0019      	movs	r1, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	4b3f      	ldr	r3, [pc, #252]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800467a:	430a      	orrs	r2, r1
 800467c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	4013      	ands	r3, r2
 8004688:	d009      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800468a:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800468c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468e:	4a42      	ldr	r2, [pc, #264]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004690:	4013      	ands	r3, r2
 8004692:	0019      	movs	r1, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699a      	ldr	r2, [r3, #24]
 8004698:	4b37      	ldr	r3, [pc, #220]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800469a:	430a      	orrs	r2, r1
 800469c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2220      	movs	r2, #32
 80046a4:	4013      	ands	r3, r2
 80046a6:	d009      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046a8:	4b33      	ldr	r3, [pc, #204]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ac:	4a3b      	ldr	r2, [pc, #236]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	0019      	movs	r1, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	4b30      	ldr	r3, [pc, #192]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046b8:	430a      	orrs	r2, r1
 80046ba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	01db      	lsls	r3, r3, #7
 80046c4:	4013      	ands	r3, r2
 80046c6:	d015      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046c8:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	0899      	lsrs	r1, r3, #2
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69da      	ldr	r2, [r3, #28]
 80046d4:	4b28      	ldr	r3, [pc, #160]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046d6:	430a      	orrs	r2, r1
 80046d8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69da      	ldr	r2, [r3, #28]
 80046de:	2380      	movs	r3, #128	; 0x80
 80046e0:	05db      	lsls	r3, r3, #23
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d106      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80046e6:	4b24      	ldr	r3, [pc, #144]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	4b23      	ldr	r3, [pc, #140]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046ec:	2180      	movs	r1, #128	; 0x80
 80046ee:	0249      	lsls	r1, r1, #9
 80046f0:	430a      	orrs	r2, r1
 80046f2:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	039b      	lsls	r3, r3, #14
 80046fc:	4013      	ands	r3, r2
 80046fe:	d016      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004700:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004704:	4a26      	ldr	r2, [pc, #152]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004706:	4013      	ands	r3, r2
 8004708:	0019      	movs	r1, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1a      	ldr	r2, [r3, #32]
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004710:	430a      	orrs	r2, r1
 8004712:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1a      	ldr	r2, [r3, #32]
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	03db      	lsls	r3, r3, #15
 800471c:	429a      	cmp	r2, r3
 800471e:	d106      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004720:	4b15      	ldr	r3, [pc, #84]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	4b14      	ldr	r3, [pc, #80]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004726:	2180      	movs	r1, #128	; 0x80
 8004728:	0449      	lsls	r1, r1, #17
 800472a:	430a      	orrs	r2, r1
 800472c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	4013      	ands	r3, r2
 8004738:	d016      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800473a:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800473c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473e:	4a19      	ldr	r2, [pc, #100]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004740:	4013      	ands	r3, r2
 8004742:	0019      	movs	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800474a:	430a      	orrs	r2, r1
 800474c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	01db      	lsls	r3, r3, #7
 8004756:	429a      	cmp	r2, r3
 8004758:	d106      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004760:	2180      	movs	r1, #128	; 0x80
 8004762:	0249      	lsls	r1, r1, #9
 8004764:	430a      	orrs	r2, r1
 8004766:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004768:	2312      	movs	r3, #18
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	781b      	ldrb	r3, [r3, #0]
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b006      	add	sp, #24
 8004774:	bd80      	pop	{r7, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	40021000 	.word	0x40021000
 800477c:	40007000 	.word	0x40007000
 8004780:	fffffcff 	.word	0xfffffcff
 8004784:	fffeffff 	.word	0xfffeffff
 8004788:	00001388 	.word	0x00001388
 800478c:	efffffff 	.word	0xefffffff
 8004790:	fffff3ff 	.word	0xfffff3ff
 8004794:	fff3ffff 	.word	0xfff3ffff
 8004798:	ffcfffff 	.word	0xffcfffff
 800479c:	ffffcfff 	.word	0xffffcfff
 80047a0:	ffbfffff 	.word	0xffbfffff
 80047a4:	ffff3fff 	.word	0xffff3fff

080047a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e04a      	b.n	8004850 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	223d      	movs	r2, #61	; 0x3d
 80047be:	5c9b      	ldrb	r3, [r3, r2]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d107      	bne.n	80047d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	223c      	movs	r2, #60	; 0x3c
 80047ca:	2100      	movs	r1, #0
 80047cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f7fc f9c1 	bl	8000b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	223d      	movs	r2, #61	; 0x3d
 80047da:	2102      	movs	r1, #2
 80047dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3304      	adds	r3, #4
 80047e6:	0019      	movs	r1, r3
 80047e8:	0010      	movs	r0, r2
 80047ea:	f000 fc5d 	bl	80050a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2248      	movs	r2, #72	; 0x48
 80047f2:	2101      	movs	r1, #1
 80047f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	223e      	movs	r2, #62	; 0x3e
 80047fa:	2101      	movs	r1, #1
 80047fc:	5499      	strb	r1, [r3, r2]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	223f      	movs	r2, #63	; 0x3f
 8004802:	2101      	movs	r1, #1
 8004804:	5499      	strb	r1, [r3, r2]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2240      	movs	r2, #64	; 0x40
 800480a:	2101      	movs	r1, #1
 800480c:	5499      	strb	r1, [r3, r2]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2241      	movs	r2, #65	; 0x41
 8004812:	2101      	movs	r1, #1
 8004814:	5499      	strb	r1, [r3, r2]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2242      	movs	r2, #66	; 0x42
 800481a:	2101      	movs	r1, #1
 800481c:	5499      	strb	r1, [r3, r2]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2243      	movs	r2, #67	; 0x43
 8004822:	2101      	movs	r1, #1
 8004824:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2244      	movs	r2, #68	; 0x44
 800482a:	2101      	movs	r1, #1
 800482c:	5499      	strb	r1, [r3, r2]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2245      	movs	r2, #69	; 0x45
 8004832:	2101      	movs	r1, #1
 8004834:	5499      	strb	r1, [r3, r2]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2246      	movs	r2, #70	; 0x46
 800483a:	2101      	movs	r1, #1
 800483c:	5499      	strb	r1, [r3, r2]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2247      	movs	r2, #71	; 0x47
 8004842:	2101      	movs	r1, #1
 8004844:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	223d      	movs	r2, #61	; 0x3d
 800484a:	2101      	movs	r1, #1
 800484c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	0018      	movs	r0, r3
 8004852:	46bd      	mov	sp, r7
 8004854:	b002      	add	sp, #8
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	223d      	movs	r2, #61	; 0x3d
 8004864:	5c9b      	ldrb	r3, [r3, r2]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	d001      	beq.n	8004870 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e035      	b.n	80048dc <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	223d      	movs	r2, #61	; 0x3d
 8004874:	2102      	movs	r1, #2
 8004876:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a19      	ldr	r2, [pc, #100]	; (80048e4 <HAL_TIM_Base_Start+0x8c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00a      	beq.n	8004898 <HAL_TIM_Base_Start+0x40>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	05db      	lsls	r3, r3, #23
 800488a:	429a      	cmp	r2, r3
 800488c:	d004      	beq.n	8004898 <HAL_TIM_Base_Start+0x40>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a15      	ldr	r2, [pc, #84]	; (80048e8 <HAL_TIM_Base_Start+0x90>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d116      	bne.n	80048c6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	4a13      	ldr	r2, [pc, #76]	; (80048ec <HAL_TIM_Base_Start+0x94>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b06      	cmp	r3, #6
 80048a8:	d016      	beq.n	80048d8 <HAL_TIM_Base_Start+0x80>
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	2380      	movs	r3, #128	; 0x80
 80048ae:	025b      	lsls	r3, r3, #9
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d011      	beq.n	80048d8 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2101      	movs	r1, #1
 80048c0:	430a      	orrs	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c4:	e008      	b.n	80048d8 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2101      	movs	r1, #1
 80048d2:	430a      	orrs	r2, r1
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e000      	b.n	80048da <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b004      	add	sp, #16
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40012c00 	.word	0x40012c00
 80048e8:	40000400 	.word	0x40000400
 80048ec:	00010007 	.word	0x00010007

080048f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	223d      	movs	r2, #61	; 0x3d
 80048fc:	5c9b      	ldrb	r3, [r3, r2]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d001      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e03d      	b.n	8004984 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	223d      	movs	r2, #61	; 0x3d
 800490c:	2102      	movs	r1, #2
 800490e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2101      	movs	r1, #1
 800491c:	430a      	orrs	r2, r1
 800491e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a19      	ldr	r2, [pc, #100]	; (800498c <HAL_TIM_Base_Start_IT+0x9c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00a      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x50>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	2380      	movs	r3, #128	; 0x80
 8004930:	05db      	lsls	r3, r3, #23
 8004932:	429a      	cmp	r2, r3
 8004934:	d004      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x50>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a15      	ldr	r2, [pc, #84]	; (8004990 <HAL_TIM_Base_Start_IT+0xa0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d116      	bne.n	800496e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	4a13      	ldr	r2, [pc, #76]	; (8004994 <HAL_TIM_Base_Start_IT+0xa4>)
 8004948:	4013      	ands	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b06      	cmp	r3, #6
 8004950:	d016      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x90>
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	2380      	movs	r3, #128	; 0x80
 8004956:	025b      	lsls	r3, r3, #9
 8004958:	429a      	cmp	r2, r3
 800495a:	d011      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2101      	movs	r1, #1
 8004968:	430a      	orrs	r2, r1
 800496a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496c:	e008      	b.n	8004980 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2101      	movs	r1, #1
 800497a:	430a      	orrs	r2, r1
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e000      	b.n	8004982 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004980:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	0018      	movs	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	b004      	add	sp, #16
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40012c00 	.word	0x40012c00
 8004990:	40000400 	.word	0x40000400
 8004994:	00010007 	.word	0x00010007

08004998 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e04a      	b.n	8004a40 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	223d      	movs	r2, #61	; 0x3d
 80049ae:	5c9b      	ldrb	r3, [r3, r2]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d107      	bne.n	80049c6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	223c      	movs	r2, #60	; 0x3c
 80049ba:	2100      	movs	r1, #0
 80049bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7fc f8ab 	bl	8000b1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	223d      	movs	r2, #61	; 0x3d
 80049ca:	2102      	movs	r1, #2
 80049cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	0019      	movs	r1, r3
 80049d8:	0010      	movs	r0, r2
 80049da:	f000 fb65 	bl	80050a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2248      	movs	r2, #72	; 0x48
 80049e2:	2101      	movs	r1, #1
 80049e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	223e      	movs	r2, #62	; 0x3e
 80049ea:	2101      	movs	r1, #1
 80049ec:	5499      	strb	r1, [r3, r2]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	223f      	movs	r2, #63	; 0x3f
 80049f2:	2101      	movs	r1, #1
 80049f4:	5499      	strb	r1, [r3, r2]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2240      	movs	r2, #64	; 0x40
 80049fa:	2101      	movs	r1, #1
 80049fc:	5499      	strb	r1, [r3, r2]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2241      	movs	r2, #65	; 0x41
 8004a02:	2101      	movs	r1, #1
 8004a04:	5499      	strb	r1, [r3, r2]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2242      	movs	r2, #66	; 0x42
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	5499      	strb	r1, [r3, r2]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2243      	movs	r2, #67	; 0x43
 8004a12:	2101      	movs	r1, #1
 8004a14:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2244      	movs	r2, #68	; 0x44
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	5499      	strb	r1, [r3, r2]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2245      	movs	r2, #69	; 0x45
 8004a22:	2101      	movs	r1, #1
 8004a24:	5499      	strb	r1, [r3, r2]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2246      	movs	r2, #70	; 0x46
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	5499      	strb	r1, [r3, r2]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2247      	movs	r2, #71	; 0x47
 8004a32:	2101      	movs	r1, #1
 8004a34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	223d      	movs	r2, #61	; 0x3d
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	0018      	movs	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	b002      	add	sp, #8
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d108      	bne.n	8004a6a <HAL_TIM_PWM_Start+0x22>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	223e      	movs	r2, #62	; 0x3e
 8004a5c:	5c9b      	ldrb	r3, [r3, r2]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	1e5a      	subs	r2, r3, #1
 8004a64:	4193      	sbcs	r3, r2
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	e037      	b.n	8004ada <HAL_TIM_PWM_Start+0x92>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d108      	bne.n	8004a82 <HAL_TIM_PWM_Start+0x3a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	223f      	movs	r2, #63	; 0x3f
 8004a74:	5c9b      	ldrb	r3, [r3, r2]
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	1e5a      	subs	r2, r3, #1
 8004a7c:	4193      	sbcs	r3, r2
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	e02b      	b.n	8004ada <HAL_TIM_PWM_Start+0x92>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d108      	bne.n	8004a9a <HAL_TIM_PWM_Start+0x52>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2240      	movs	r2, #64	; 0x40
 8004a8c:	5c9b      	ldrb	r3, [r3, r2]
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	1e5a      	subs	r2, r3, #1
 8004a94:	4193      	sbcs	r3, r2
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	e01f      	b.n	8004ada <HAL_TIM_PWM_Start+0x92>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	d108      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0x6a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2241      	movs	r2, #65	; 0x41
 8004aa4:	5c9b      	ldrb	r3, [r3, r2]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	1e5a      	subs	r2, r3, #1
 8004aac:	4193      	sbcs	r3, r2
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	e013      	b.n	8004ada <HAL_TIM_PWM_Start+0x92>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d108      	bne.n	8004aca <HAL_TIM_PWM_Start+0x82>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2242      	movs	r2, #66	; 0x42
 8004abc:	5c9b      	ldrb	r3, [r3, r2]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	1e5a      	subs	r2, r3, #1
 8004ac4:	4193      	sbcs	r3, r2
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	e007      	b.n	8004ada <HAL_TIM_PWM_Start+0x92>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2243      	movs	r2, #67	; 0x43
 8004ace:	5c9b      	ldrb	r3, [r3, r2]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	1e5a      	subs	r2, r3, #1
 8004ad6:	4193      	sbcs	r3, r2
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e081      	b.n	8004be6 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d104      	bne.n	8004af2 <HAL_TIM_PWM_Start+0xaa>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	223e      	movs	r2, #62	; 0x3e
 8004aec:	2102      	movs	r1, #2
 8004aee:	5499      	strb	r1, [r3, r2]
 8004af0:	e023      	b.n	8004b3a <HAL_TIM_PWM_Start+0xf2>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d104      	bne.n	8004b02 <HAL_TIM_PWM_Start+0xba>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	223f      	movs	r2, #63	; 0x3f
 8004afc:	2102      	movs	r1, #2
 8004afe:	5499      	strb	r1, [r3, r2]
 8004b00:	e01b      	b.n	8004b3a <HAL_TIM_PWM_Start+0xf2>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d104      	bne.n	8004b12 <HAL_TIM_PWM_Start+0xca>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2240      	movs	r2, #64	; 0x40
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	5499      	strb	r1, [r3, r2]
 8004b10:	e013      	b.n	8004b3a <HAL_TIM_PWM_Start+0xf2>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b0c      	cmp	r3, #12
 8004b16:	d104      	bne.n	8004b22 <HAL_TIM_PWM_Start+0xda>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2241      	movs	r2, #65	; 0x41
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	5499      	strb	r1, [r3, r2]
 8004b20:	e00b      	b.n	8004b3a <HAL_TIM_PWM_Start+0xf2>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b10      	cmp	r3, #16
 8004b26:	d104      	bne.n	8004b32 <HAL_TIM_PWM_Start+0xea>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2242      	movs	r2, #66	; 0x42
 8004b2c:	2102      	movs	r1, #2
 8004b2e:	5499      	strb	r1, [r3, r2]
 8004b30:	e003      	b.n	8004b3a <HAL_TIM_PWM_Start+0xf2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2243      	movs	r2, #67	; 0x43
 8004b36:	2102      	movs	r1, #2
 8004b38:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6839      	ldr	r1, [r7, #0]
 8004b40:	2201      	movs	r2, #1
 8004b42:	0018      	movs	r0, r3
 8004b44:	f000 fdc2 	bl	80056cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a28      	ldr	r2, [pc, #160]	; (8004bf0 <HAL_TIM_PWM_Start+0x1a8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d009      	beq.n	8004b66 <HAL_TIM_PWM_Start+0x11e>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a27      	ldr	r2, [pc, #156]	; (8004bf4 <HAL_TIM_PWM_Start+0x1ac>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d004      	beq.n	8004b66 <HAL_TIM_PWM_Start+0x11e>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a25      	ldr	r2, [pc, #148]	; (8004bf8 <HAL_TIM_PWM_Start+0x1b0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d101      	bne.n	8004b6a <HAL_TIM_PWM_Start+0x122>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_TIM_PWM_Start+0x124>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2180      	movs	r1, #128	; 0x80
 8004b7c:	0209      	lsls	r1, r1, #8
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a1a      	ldr	r2, [pc, #104]	; (8004bf0 <HAL_TIM_PWM_Start+0x1a8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00a      	beq.n	8004ba2 <HAL_TIM_PWM_Start+0x15a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	05db      	lsls	r3, r3, #23
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d004      	beq.n	8004ba2 <HAL_TIM_PWM_Start+0x15a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <HAL_TIM_PWM_Start+0x1b4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d116      	bne.n	8004bd0 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	4a15      	ldr	r2, [pc, #84]	; (8004c00 <HAL_TIM_PWM_Start+0x1b8>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b06      	cmp	r3, #6
 8004bb2:	d016      	beq.n	8004be2 <HAL_TIM_PWM_Start+0x19a>
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	2380      	movs	r3, #128	; 0x80
 8004bb8:	025b      	lsls	r3, r3, #9
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d011      	beq.n	8004be2 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2101      	movs	r1, #1
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bce:	e008      	b.n	8004be2 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2101      	movs	r1, #1
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	e000      	b.n	8004be4 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	0018      	movs	r0, r3
 8004be8:	46bd      	mov	sp, r7
 8004bea:	b004      	add	sp, #16
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40014400 	.word	0x40014400
 8004bf8:	40014800 	.word	0x40014800
 8004bfc:	40000400 	.word	0x40000400
 8004c00:	00010007 	.word	0x00010007

08004c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2202      	movs	r2, #2
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d124      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	2202      	movs	r2, #2
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d11d      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	4252      	negs	r2, r2
 8004c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2203      	movs	r2, #3
 8004c40:	4013      	ands	r3, r2
 8004c42:	d004      	beq.n	8004c4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	0018      	movs	r0, r3
 8004c48:	f000 fa16 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e007      	b.n	8004c5e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	0018      	movs	r0, r3
 8004c52:	f000 fa09 	bl	8005068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f000 fa15 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d125      	bne.n	8004cbe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2204      	movs	r2, #4
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d11e      	bne.n	8004cbe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2205      	movs	r2, #5
 8004c86:	4252      	negs	r2, r2
 8004c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	23c0      	movs	r3, #192	; 0xc0
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	f000 f9e9 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004ca6:	e007      	b.n	8004cb8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	0018      	movs	r0, r3
 8004cac:	f000 f9dc 	bl	8005068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f000 f9e8 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d124      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d11d      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2209      	movs	r2, #9
 8004ce0:	4252      	negs	r2, r2
 8004ce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	2203      	movs	r2, #3
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d004      	beq.n	8004d00 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f000 f9bd 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004cfe:	e007      	b.n	8004d10 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	0018      	movs	r0, r3
 8004d04:	f000 f9b0 	bl	8005068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f000 f9bc 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2210      	movs	r2, #16
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b10      	cmp	r3, #16
 8004d22:	d125      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	2210      	movs	r2, #16
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b10      	cmp	r3, #16
 8004d30:	d11e      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2211      	movs	r2, #17
 8004d38:	4252      	negs	r2, r2
 8004d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2208      	movs	r2, #8
 8004d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	23c0      	movs	r3, #192	; 0xc0
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	0018      	movs	r0, r3
 8004d54:	f000 f990 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004d58:	e007      	b.n	8004d6a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f000 f983 	bl	8005068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	0018      	movs	r0, r3
 8004d66:	f000 f98f 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2201      	movs	r2, #1
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d10f      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	2201      	movs	r2, #1
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d108      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2202      	movs	r2, #2
 8004d92:	4252      	negs	r2, r2
 8004d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7fb fa3f 	bl	800021c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2280      	movs	r2, #128	; 0x80
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b80      	cmp	r3, #128	; 0x80
 8004daa:	d10f      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	2280      	movs	r2, #128	; 0x80
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b80      	cmp	r3, #128	; 0x80
 8004db8:	d108      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2281      	movs	r2, #129	; 0x81
 8004dc0:	4252      	negs	r2, r2
 8004dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f000 fd14 	bl	80057f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	2380      	movs	r3, #128	; 0x80
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	401a      	ands	r2, r3
 8004dd8:	2380      	movs	r3, #128	; 0x80
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d10e      	bne.n	8004dfe <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2280      	movs	r2, #128	; 0x80
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b80      	cmp	r3, #128	; 0x80
 8004dec:	d107      	bne.n	8004dfe <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1c      	ldr	r2, [pc, #112]	; (8004e64 <HAL_TIM_IRQHandler+0x260>)
 8004df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f000 fd03 	bl	8005804 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2240      	movs	r2, #64	; 0x40
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b40      	cmp	r3, #64	; 0x40
 8004e0a:	d10f      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	2240      	movs	r2, #64	; 0x40
 8004e14:	4013      	ands	r3, r2
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d108      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2241      	movs	r2, #65	; 0x41
 8004e20:	4252      	negs	r2, r2
 8004e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	0018      	movs	r0, r3
 8004e28:	f000 f936 	bl	8005098 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2220      	movs	r2, #32
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	d10f      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	4013      	ands	r3, r2
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d108      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2221      	movs	r2, #33	; 0x21
 8004e4e:	4252      	negs	r2, r2
 8004e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	0018      	movs	r0, r3
 8004e56:	f000 fcc5 	bl	80057e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b002      	add	sp, #8
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	fffffeff 	.word	0xfffffeff

08004e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e74:	2317      	movs	r3, #23
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	223c      	movs	r2, #60	; 0x3c
 8004e80:	5c9b      	ldrb	r3, [r3, r2]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e0e5      	b.n	8005056 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	223c      	movs	r2, #60	; 0x3c
 8004e8e:	2101      	movs	r1, #1
 8004e90:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b14      	cmp	r3, #20
 8004e96:	d900      	bls.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004e98:	e0d1      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	009a      	lsls	r2, r3, #2
 8004e9e:	4b70      	ldr	r3, [pc, #448]	; (8005060 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004ea0:	18d3      	adds	r3, r2, r3
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	0011      	movs	r1, r2
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f000 f970 	bl	8005194 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2108      	movs	r1, #8
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2104      	movs	r1, #4
 8004ed0:	438a      	bics	r2, r1
 8004ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6999      	ldr	r1, [r3, #24]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	619a      	str	r2, [r3, #24]
      break;
 8004ee6:	e0af      	b.n	8005048 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	0011      	movs	r1, r2
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	f000 f9cf 	bl	8005294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699a      	ldr	r2, [r3, #24]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2180      	movs	r1, #128	; 0x80
 8004f02:	0109      	lsls	r1, r1, #4
 8004f04:	430a      	orrs	r2, r1
 8004f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4954      	ldr	r1, [pc, #336]	; (8005064 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004f14:	400a      	ands	r2, r1
 8004f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6999      	ldr	r1, [r3, #24]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	021a      	lsls	r2, r3, #8
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	619a      	str	r2, [r3, #24]
      break;
 8004f2c:	e08c      	b.n	8005048 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	0011      	movs	r1, r2
 8004f36:	0018      	movs	r0, r3
 8004f38:	f000 fa2a 	bl	8005390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69da      	ldr	r2, [r3, #28]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2108      	movs	r1, #8
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69da      	ldr	r2, [r3, #28]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2104      	movs	r1, #4
 8004f58:	438a      	bics	r2, r1
 8004f5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69d9      	ldr	r1, [r3, #28]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	61da      	str	r2, [r3, #28]
      break;
 8004f6e:	e06b      	b.n	8005048 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	0011      	movs	r1, r2
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f000 fa8b 	bl	8005494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2180      	movs	r1, #128	; 0x80
 8004f8a:	0109      	lsls	r1, r1, #4
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69da      	ldr	r2, [r3, #28]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4932      	ldr	r1, [pc, #200]	; (8005064 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004f9c:	400a      	ands	r2, r1
 8004f9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69d9      	ldr	r1, [r3, #28]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	021a      	lsls	r2, r3, #8
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	61da      	str	r2, [r3, #28]
      break;
 8004fb4:	e048      	b.n	8005048 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	0011      	movs	r1, r2
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f000 facc 	bl	800555c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2108      	movs	r1, #8
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2104      	movs	r1, #4
 8004fe0:	438a      	bics	r2, r1
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ff6:	e027      	b.n	8005048 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	0011      	movs	r1, r2
 8005000:	0018      	movs	r0, r3
 8005002:	f000 fb05 	bl	8005610 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2180      	movs	r1, #128	; 0x80
 8005012:	0109      	lsls	r1, r1, #4
 8005014:	430a      	orrs	r2, r1
 8005016:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4910      	ldr	r1, [pc, #64]	; (8005064 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005024:	400a      	ands	r2, r1
 8005026:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	021a      	lsls	r2, r3, #8
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800503c:	e004      	b.n	8005048 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800503e:	2317      	movs	r3, #23
 8005040:	18fb      	adds	r3, r7, r3
 8005042:	2201      	movs	r2, #1
 8005044:	701a      	strb	r2, [r3, #0]
      break;
 8005046:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	223c      	movs	r2, #60	; 0x3c
 800504c:	2100      	movs	r1, #0
 800504e:	5499      	strb	r1, [r3, r2]

  return status;
 8005050:	2317      	movs	r3, #23
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	781b      	ldrb	r3, [r3, #0]
}
 8005056:	0018      	movs	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	b006      	add	sp, #24
 800505c:	bd80      	pop	{r7, pc}
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	080058c4 	.word	0x080058c4
 8005064:	fffffbff 	.word	0xfffffbff

08005068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005070:	46c0      	nop			; (mov r8, r8)
 8005072:	46bd      	mov	sp, r7
 8005074:	b002      	add	sp, #8
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005080:	46c0      	nop			; (mov r8, r8)
 8005082:	46bd      	mov	sp, r7
 8005084:	b002      	add	sp, #8
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005090:	46c0      	nop			; (mov r8, r8)
 8005092:	46bd      	mov	sp, r7
 8005094:	b002      	add	sp, #8
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050a0:	46c0      	nop			; (mov r8, r8)
 80050a2:	46bd      	mov	sp, r7
 80050a4:	b002      	add	sp, #8
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a30      	ldr	r2, [pc, #192]	; (800517c <TIM_Base_SetConfig+0xd4>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d008      	beq.n	80050d2 <TIM_Base_SetConfig+0x2a>
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	2380      	movs	r3, #128	; 0x80
 80050c4:	05db      	lsls	r3, r3, #23
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d003      	beq.n	80050d2 <TIM_Base_SetConfig+0x2a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a2c      	ldr	r2, [pc, #176]	; (8005180 <TIM_Base_SetConfig+0xd8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d108      	bne.n	80050e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2270      	movs	r2, #112	; 0x70
 80050d6:	4393      	bics	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a25      	ldr	r2, [pc, #148]	; (800517c <TIM_Base_SetConfig+0xd4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d014      	beq.n	8005116 <TIM_Base_SetConfig+0x6e>
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	2380      	movs	r3, #128	; 0x80
 80050f0:	05db      	lsls	r3, r3, #23
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d00f      	beq.n	8005116 <TIM_Base_SetConfig+0x6e>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a21      	ldr	r2, [pc, #132]	; (8005180 <TIM_Base_SetConfig+0xd8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00b      	beq.n	8005116 <TIM_Base_SetConfig+0x6e>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a20      	ldr	r2, [pc, #128]	; (8005184 <TIM_Base_SetConfig+0xdc>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d007      	beq.n	8005116 <TIM_Base_SetConfig+0x6e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a1f      	ldr	r2, [pc, #124]	; (8005188 <TIM_Base_SetConfig+0xe0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d003      	beq.n	8005116 <TIM_Base_SetConfig+0x6e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1e      	ldr	r2, [pc, #120]	; (800518c <TIM_Base_SetConfig+0xe4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d108      	bne.n	8005128 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4a1d      	ldr	r2, [pc, #116]	; (8005190 <TIM_Base_SetConfig+0xe8>)
 800511a:	4013      	ands	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2280      	movs	r2, #128	; 0x80
 800512c:	4393      	bics	r3, r2
 800512e:	001a      	movs	r2, r3
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a0a      	ldr	r2, [pc, #40]	; (800517c <TIM_Base_SetConfig+0xd4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d007      	beq.n	8005166 <TIM_Base_SetConfig+0xbe>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a0b      	ldr	r2, [pc, #44]	; (8005188 <TIM_Base_SetConfig+0xe0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_Base_SetConfig+0xbe>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a0a      	ldr	r2, [pc, #40]	; (800518c <TIM_Base_SetConfig+0xe4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d103      	bne.n	800516e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	615a      	str	r2, [r3, #20]
}
 8005174:	46c0      	nop			; (mov r8, r8)
 8005176:	46bd      	mov	sp, r7
 8005178:	b004      	add	sp, #16
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40012c00 	.word	0x40012c00
 8005180:	40000400 	.word	0x40000400
 8005184:	40002000 	.word	0x40002000
 8005188:	40014400 	.word	0x40014400
 800518c:	40014800 	.word	0x40014800
 8005190:	fffffcff 	.word	0xfffffcff

08005194 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	2201      	movs	r2, #1
 80051a4:	4393      	bics	r3, r2
 80051a6:	001a      	movs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4a2e      	ldr	r2, [pc, #184]	; (800527c <TIM_OC1_SetConfig+0xe8>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2203      	movs	r2, #3
 80051ca:	4393      	bics	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2202      	movs	r2, #2
 80051dc:	4393      	bics	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a24      	ldr	r2, [pc, #144]	; (8005280 <TIM_OC1_SetConfig+0xec>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d007      	beq.n	8005202 <TIM_OC1_SetConfig+0x6e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a23      	ldr	r2, [pc, #140]	; (8005284 <TIM_OC1_SetConfig+0xf0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d003      	beq.n	8005202 <TIM_OC1_SetConfig+0x6e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a22      	ldr	r2, [pc, #136]	; (8005288 <TIM_OC1_SetConfig+0xf4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d10c      	bne.n	800521c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2208      	movs	r2, #8
 8005206:	4393      	bics	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2204      	movs	r2, #4
 8005218:	4393      	bics	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a18      	ldr	r2, [pc, #96]	; (8005280 <TIM_OC1_SetConfig+0xec>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <TIM_OC1_SetConfig+0xa0>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a17      	ldr	r2, [pc, #92]	; (8005284 <TIM_OC1_SetConfig+0xf0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_OC1_SetConfig+0xa0>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a16      	ldr	r2, [pc, #88]	; (8005288 <TIM_OC1_SetConfig+0xf4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d111      	bne.n	8005258 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4a15      	ldr	r2, [pc, #84]	; (800528c <TIM_OC1_SetConfig+0xf8>)
 8005238:	4013      	ands	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4a14      	ldr	r2, [pc, #80]	; (8005290 <TIM_OC1_SetConfig+0xfc>)
 8005240:	4013      	ands	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	46bd      	mov	sp, r7
 8005276:	b006      	add	sp, #24
 8005278:	bd80      	pop	{r7, pc}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	fffeff8f 	.word	0xfffeff8f
 8005280:	40012c00 	.word	0x40012c00
 8005284:	40014400 	.word	0x40014400
 8005288:	40014800 	.word	0x40014800
 800528c:	fffffeff 	.word	0xfffffeff
 8005290:	fffffdff 	.word	0xfffffdff

08005294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	2210      	movs	r2, #16
 80052a4:	4393      	bics	r3, r2
 80052a6:	001a      	movs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4a2c      	ldr	r2, [pc, #176]	; (8005374 <TIM_OC2_SetConfig+0xe0>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4a2b      	ldr	r2, [pc, #172]	; (8005378 <TIM_OC2_SetConfig+0xe4>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	021b      	lsls	r3, r3, #8
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2220      	movs	r2, #32
 80052de:	4393      	bics	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a22      	ldr	r2, [pc, #136]	; (800537c <TIM_OC2_SetConfig+0xe8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d10d      	bne.n	8005312 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2280      	movs	r2, #128	; 0x80
 80052fa:	4393      	bics	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2240      	movs	r2, #64	; 0x40
 800530e:	4393      	bics	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a19      	ldr	r2, [pc, #100]	; (800537c <TIM_OC2_SetConfig+0xe8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d007      	beq.n	800532a <TIM_OC2_SetConfig+0x96>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a18      	ldr	r2, [pc, #96]	; (8005380 <TIM_OC2_SetConfig+0xec>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d003      	beq.n	800532a <TIM_OC2_SetConfig+0x96>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a17      	ldr	r2, [pc, #92]	; (8005384 <TIM_OC2_SetConfig+0xf0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d113      	bne.n	8005352 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4a16      	ldr	r2, [pc, #88]	; (8005388 <TIM_OC2_SetConfig+0xf4>)
 800532e:	4013      	ands	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4a15      	ldr	r2, [pc, #84]	; (800538c <TIM_OC2_SetConfig+0xf8>)
 8005336:	4013      	ands	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	621a      	str	r2, [r3, #32]
}
 800536c:	46c0      	nop			; (mov r8, r8)
 800536e:	46bd      	mov	sp, r7
 8005370:	b006      	add	sp, #24
 8005372:	bd80      	pop	{r7, pc}
 8005374:	feff8fff 	.word	0xfeff8fff
 8005378:	fffffcff 	.word	0xfffffcff
 800537c:	40012c00 	.word	0x40012c00
 8005380:	40014400 	.word	0x40014400
 8005384:	40014800 	.word	0x40014800
 8005388:	fffffbff 	.word	0xfffffbff
 800538c:	fffff7ff 	.word	0xfffff7ff

08005390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	4a33      	ldr	r2, [pc, #204]	; (800546c <TIM_OC3_SetConfig+0xdc>)
 80053a0:	401a      	ands	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4a2d      	ldr	r2, [pc, #180]	; (8005470 <TIM_OC3_SetConfig+0xe0>)
 80053bc:	4013      	ands	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2203      	movs	r2, #3
 80053c4:	4393      	bics	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	4a27      	ldr	r2, [pc, #156]	; (8005474 <TIM_OC3_SetConfig+0xe4>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a23      	ldr	r2, [pc, #140]	; (8005478 <TIM_OC3_SetConfig+0xe8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d10d      	bne.n	800540a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	4a22      	ldr	r2, [pc, #136]	; (800547c <TIM_OC3_SetConfig+0xec>)
 80053f2:	4013      	ands	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	021b      	lsls	r3, r3, #8
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	4a1e      	ldr	r2, [pc, #120]	; (8005480 <TIM_OC3_SetConfig+0xf0>)
 8005406:	4013      	ands	r3, r2
 8005408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a1a      	ldr	r2, [pc, #104]	; (8005478 <TIM_OC3_SetConfig+0xe8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d007      	beq.n	8005422 <TIM_OC3_SetConfig+0x92>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a1b      	ldr	r2, [pc, #108]	; (8005484 <TIM_OC3_SetConfig+0xf4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d003      	beq.n	8005422 <TIM_OC3_SetConfig+0x92>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a1a      	ldr	r2, [pc, #104]	; (8005488 <TIM_OC3_SetConfig+0xf8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d113      	bne.n	800544a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	4a19      	ldr	r2, [pc, #100]	; (800548c <TIM_OC3_SetConfig+0xfc>)
 8005426:	4013      	ands	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4a18      	ldr	r2, [pc, #96]	; (8005490 <TIM_OC3_SetConfig+0x100>)
 800542e:	4013      	ands	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	621a      	str	r2, [r3, #32]
}
 8005464:	46c0      	nop			; (mov r8, r8)
 8005466:	46bd      	mov	sp, r7
 8005468:	b006      	add	sp, #24
 800546a:	bd80      	pop	{r7, pc}
 800546c:	fffffeff 	.word	0xfffffeff
 8005470:	fffeff8f 	.word	0xfffeff8f
 8005474:	fffffdff 	.word	0xfffffdff
 8005478:	40012c00 	.word	0x40012c00
 800547c:	fffff7ff 	.word	0xfffff7ff
 8005480:	fffffbff 	.word	0xfffffbff
 8005484:	40014400 	.word	0x40014400
 8005488:	40014800 	.word	0x40014800
 800548c:	ffffefff 	.word	0xffffefff
 8005490:	ffffdfff 	.word	0xffffdfff

08005494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	4a26      	ldr	r2, [pc, #152]	; (800553c <TIM_OC4_SetConfig+0xa8>)
 80054a4:	401a      	ands	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4a20      	ldr	r2, [pc, #128]	; (8005540 <TIM_OC4_SetConfig+0xac>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4a1f      	ldr	r2, [pc, #124]	; (8005544 <TIM_OC4_SetConfig+0xb0>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	021b      	lsls	r3, r3, #8
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	4a1b      	ldr	r2, [pc, #108]	; (8005548 <TIM_OC4_SetConfig+0xb4>)
 80054dc:	4013      	ands	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	031b      	lsls	r3, r3, #12
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a17      	ldr	r2, [pc, #92]	; (800554c <TIM_OC4_SetConfig+0xb8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d007      	beq.n	8005504 <TIM_OC4_SetConfig+0x70>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a16      	ldr	r2, [pc, #88]	; (8005550 <TIM_OC4_SetConfig+0xbc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_OC4_SetConfig+0x70>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a15      	ldr	r2, [pc, #84]	; (8005554 <TIM_OC4_SetConfig+0xc0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d109      	bne.n	8005518 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	4a14      	ldr	r2, [pc, #80]	; (8005558 <TIM_OC4_SetConfig+0xc4>)
 8005508:	4013      	ands	r3, r2
 800550a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	019b      	lsls	r3, r3, #6
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	621a      	str	r2, [r3, #32]
}
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	46bd      	mov	sp, r7
 8005536:	b006      	add	sp, #24
 8005538:	bd80      	pop	{r7, pc}
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	ffffefff 	.word	0xffffefff
 8005540:	feff8fff 	.word	0xfeff8fff
 8005544:	fffffcff 	.word	0xfffffcff
 8005548:	ffffdfff 	.word	0xffffdfff
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40014400 	.word	0x40014400
 8005554:	40014800 	.word	0x40014800
 8005558:	ffffbfff 	.word	0xffffbfff

0800555c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	4a23      	ldr	r2, [pc, #140]	; (80055f8 <TIM_OC5_SetConfig+0x9c>)
 800556c:	401a      	ands	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4a1d      	ldr	r2, [pc, #116]	; (80055fc <TIM_OC5_SetConfig+0xa0>)
 8005588:	4013      	ands	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	4a19      	ldr	r2, [pc, #100]	; (8005600 <TIM_OC5_SetConfig+0xa4>)
 800559a:	4013      	ands	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	041b      	lsls	r3, r3, #16
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a15      	ldr	r2, [pc, #84]	; (8005604 <TIM_OC5_SetConfig+0xa8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d007      	beq.n	80055c2 <TIM_OC5_SetConfig+0x66>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a14      	ldr	r2, [pc, #80]	; (8005608 <TIM_OC5_SetConfig+0xac>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_OC5_SetConfig+0x66>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a13      	ldr	r2, [pc, #76]	; (800560c <TIM_OC5_SetConfig+0xb0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d109      	bne.n	80055d6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	4a0c      	ldr	r2, [pc, #48]	; (80055f8 <TIM_OC5_SetConfig+0x9c>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	621a      	str	r2, [r3, #32]
}
 80055f0:	46c0      	nop			; (mov r8, r8)
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b006      	add	sp, #24
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	fffeffff 	.word	0xfffeffff
 80055fc:	fffeff8f 	.word	0xfffeff8f
 8005600:	fffdffff 	.word	0xfffdffff
 8005604:	40012c00 	.word	0x40012c00
 8005608:	40014400 	.word	0x40014400
 800560c:	40014800 	.word	0x40014800

08005610 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	4a24      	ldr	r2, [pc, #144]	; (80056b0 <TIM_OC6_SetConfig+0xa0>)
 8005620:	401a      	ands	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a1e      	ldr	r2, [pc, #120]	; (80056b4 <TIM_OC6_SetConfig+0xa4>)
 800563c:	4013      	ands	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	021b      	lsls	r3, r3, #8
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	4a1a      	ldr	r2, [pc, #104]	; (80056b8 <TIM_OC6_SetConfig+0xa8>)
 8005650:	4013      	ands	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	051b      	lsls	r3, r3, #20
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a16      	ldr	r2, [pc, #88]	; (80056bc <TIM_OC6_SetConfig+0xac>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d007      	beq.n	8005678 <TIM_OC6_SetConfig+0x68>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <TIM_OC6_SetConfig+0xb0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_OC6_SetConfig+0x68>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a14      	ldr	r2, [pc, #80]	; (80056c4 <TIM_OC6_SetConfig+0xb4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d109      	bne.n	800568c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <TIM_OC6_SetConfig+0xb8>)
 800567c:	4013      	ands	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	029b      	lsls	r3, r3, #10
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	621a      	str	r2, [r3, #32]
}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b006      	add	sp, #24
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	ffefffff 	.word	0xffefffff
 80056b4:	feff8fff 	.word	0xfeff8fff
 80056b8:	ffdfffff 	.word	0xffdfffff
 80056bc:	40012c00 	.word	0x40012c00
 80056c0:	40014400 	.word	0x40014400
 80056c4:	40014800 	.word	0x40014800
 80056c8:	fffbffff 	.word	0xfffbffff

080056cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	221f      	movs	r2, #31
 80056dc:	4013      	ands	r3, r2
 80056de:	2201      	movs	r2, #1
 80056e0:	409a      	lsls	r2, r3
 80056e2:	0013      	movs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	43d2      	mvns	r2, r2
 80056ee:	401a      	ands	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1a      	ldr	r2, [r3, #32]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	211f      	movs	r1, #31
 80056fc:	400b      	ands	r3, r1
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	4099      	lsls	r1, r3
 8005702:	000b      	movs	r3, r1
 8005704:	431a      	orrs	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	46bd      	mov	sp, r7
 800570e:	b006      	add	sp, #24
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	223c      	movs	r2, #60	; 0x3c
 8005722:	5c9b      	ldrb	r3, [r3, r2]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005728:	2302      	movs	r3, #2
 800572a:	e050      	b.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	223c      	movs	r2, #60	; 0x3c
 8005730:	2101      	movs	r1, #1
 8005732:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	223d      	movs	r2, #61	; 0x3d
 8005738:	2102      	movs	r1, #2
 800573a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a21      	ldr	r2, [pc, #132]	; (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d108      	bne.n	8005768 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4a20      	ldr	r2, [pc, #128]	; (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800575a:	4013      	ands	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2270      	movs	r2, #112	; 0x70
 800576c:	4393      	bics	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a14      	ldr	r2, [pc, #80]	; (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00a      	beq.n	80057a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	2380      	movs	r3, #128	; 0x80
 8005792:	05db      	lsls	r3, r3, #23
 8005794:	429a      	cmp	r2, r3
 8005796:	d004      	beq.n	80057a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a10      	ldr	r2, [pc, #64]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d10c      	bne.n	80057bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2280      	movs	r2, #128	; 0x80
 80057a6:	4393      	bics	r3, r2
 80057a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	223d      	movs	r2, #61	; 0x3d
 80057c0:	2101      	movs	r1, #1
 80057c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	223c      	movs	r2, #60	; 0x3c
 80057c8:	2100      	movs	r1, #0
 80057ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	0018      	movs	r0, r3
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b004      	add	sp, #16
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	ff0fffff 	.word	0xff0fffff
 80057e0:	40000400 	.word	0x40000400

080057e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057ec:	46c0      	nop			; (mov r8, r8)
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b002      	add	sp, #8
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057fc:	46c0      	nop			; (mov r8, r8)
 80057fe:	46bd      	mov	sp, r7
 8005800:	b002      	add	sp, #8
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800580c:	46c0      	nop			; (mov r8, r8)
 800580e:	46bd      	mov	sp, r7
 8005810:	b002      	add	sp, #8
 8005812:	bd80      	pop	{r7, pc}

08005814 <__libc_init_array>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	2600      	movs	r6, #0
 8005818:	4d0c      	ldr	r5, [pc, #48]	; (800584c <__libc_init_array+0x38>)
 800581a:	4c0d      	ldr	r4, [pc, #52]	; (8005850 <__libc_init_array+0x3c>)
 800581c:	1b64      	subs	r4, r4, r5
 800581e:	10a4      	asrs	r4, r4, #2
 8005820:	42a6      	cmp	r6, r4
 8005822:	d109      	bne.n	8005838 <__libc_init_array+0x24>
 8005824:	2600      	movs	r6, #0
 8005826:	f000 f821 	bl	800586c <_init>
 800582a:	4d0a      	ldr	r5, [pc, #40]	; (8005854 <__libc_init_array+0x40>)
 800582c:	4c0a      	ldr	r4, [pc, #40]	; (8005858 <__libc_init_array+0x44>)
 800582e:	1b64      	subs	r4, r4, r5
 8005830:	10a4      	asrs	r4, r4, #2
 8005832:	42a6      	cmp	r6, r4
 8005834:	d105      	bne.n	8005842 <__libc_init_array+0x2e>
 8005836:	bd70      	pop	{r4, r5, r6, pc}
 8005838:	00b3      	lsls	r3, r6, #2
 800583a:	58eb      	ldr	r3, [r5, r3]
 800583c:	4798      	blx	r3
 800583e:	3601      	adds	r6, #1
 8005840:	e7ee      	b.n	8005820 <__libc_init_array+0xc>
 8005842:	00b3      	lsls	r3, r6, #2
 8005844:	58eb      	ldr	r3, [r5, r3]
 8005846:	4798      	blx	r3
 8005848:	3601      	adds	r6, #1
 800584a:	e7f2      	b.n	8005832 <__libc_init_array+0x1e>
 800584c:	08005918 	.word	0x08005918
 8005850:	08005918 	.word	0x08005918
 8005854:	08005918 	.word	0x08005918
 8005858:	0800591c 	.word	0x0800591c

0800585c <memset>:
 800585c:	0003      	movs	r3, r0
 800585e:	1882      	adds	r2, r0, r2
 8005860:	4293      	cmp	r3, r2
 8005862:	d100      	bne.n	8005866 <memset+0xa>
 8005864:	4770      	bx	lr
 8005866:	7019      	strb	r1, [r3, #0]
 8005868:	3301      	adds	r3, #1
 800586a:	e7f9      	b.n	8005860 <memset+0x4>

0800586c <_init>:
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005872:	bc08      	pop	{r3}
 8005874:	469e      	mov	lr, r3
 8005876:	4770      	bx	lr

08005878 <_fini>:
 8005878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587e:	bc08      	pop	{r3}
 8005880:	469e      	mov	lr, r3
 8005882:	4770      	bx	lr
